
KHood_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001078  080085a8  080085a8  000185a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009620  08009620  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009628  08009628  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009628  08009628  00019628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000078  080096a8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  080096a8  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cdc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002821  00000000  00000000  00032d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  000355a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  000365d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232d0  00000000  00000000  000374e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137c6  00000000  00000000  0005a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d43f8  00000000  00000000  0006df76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014236e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005324  00000000  00000000  001423c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008590 	.word	0x08008590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008590 	.word	0x08008590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b974 	b.w	8000e6c <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468e      	mov	lr, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14d      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4694      	mov	ip, r2
 8000bae:	d969      	bls.n	8000c84 <__udivmoddi4+0xe8>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b152      	cbz	r2, 8000bcc <__udivmoddi4+0x30>
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	f1c2 0120 	rsb	r1, r2, #32
 8000bbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	0c21      	lsrs	r1, r4, #16
 8000bd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bd6:	fa1f f78c 	uxth.w	r7, ip
 8000bda:	fb08 e316 	mls	r3, r8, r6, lr
 8000bde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be2:	fb06 f107 	mul.w	r1, r6, r7
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bf2:	f080 811f 	bcs.w	8000e34 <__udivmoddi4+0x298>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 811c 	bls.w	8000e34 <__udivmoddi4+0x298>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c08:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb00 f707 	mul.w	r7, r0, r7
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x92>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c20:	f080 810a 	bcs.w	8000e38 <__udivmoddi4+0x29c>
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	f240 8107 	bls.w	8000e38 <__udivmoddi4+0x29c>
 8000c2a:	4464      	add	r4, ip
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	1be4      	subs	r4, r4, r7
 8000c34:	2600      	movs	r6, #0
 8000c36:	b11d      	cbz	r5, 8000c40 <__udivmoddi4+0xa4>
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0xc2>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80ef 	beq.w	8000e2e <__udivmoddi4+0x292>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x160>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xd4>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80f9 	bhi.w	8000e62 <__udivmoddi4+0x2c6>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0303 	sbc.w	r3, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	469e      	mov	lr, r3
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e0      	beq.n	8000c40 <__udivmoddi4+0xa4>
 8000c7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c82:	e7dd      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000c84:	b902      	cbnz	r2, 8000c88 <__udivmoddi4+0xec>
 8000c86:	deff      	udf	#255	; 0xff
 8000c88:	fab2 f282 	clz	r2, r2
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f040 8092 	bne.w	8000db6 <__udivmoddi4+0x21a>
 8000c92:	eba1 010c 	sub.w	r1, r1, ip
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	0c20      	lsrs	r0, r4, #16
 8000ca2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ca6:	fb07 1113 	mls	r1, r7, r3, r1
 8000caa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cae:	fb0e f003 	mul.w	r0, lr, r3
 8000cb2:	4288      	cmp	r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x12c>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x12a>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2c0>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x156>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x154>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2ca>
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x9a>
 8000cfc:	f1c6 0720 	rsb	r7, r6, #32
 8000d00:	40b3      	lsls	r3, r6
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	431c      	orrs	r4, r3
 8000d14:	40f9      	lsrs	r1, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d22:	0c20      	lsrs	r0, r4, #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fb09 1118 	mls	r1, r9, r8, r1
 8000d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d30:	fb08 f00e 	mul.w	r0, r8, lr
 8000d34:	4288      	cmp	r0, r1
 8000d36:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b8>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2bc>
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2bc>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	458e      	cmp	lr, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1e2>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2b4>
 8000d76:	458e      	cmp	lr, r1
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2b4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d82:	fba0 9402 	umull	r9, r4, r0, r2
 8000d86:	eba1 010e 	sub.w	r1, r1, lr
 8000d8a:	42a1      	cmp	r1, r4
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46a6      	mov	lr, r4
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x2a4>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x2a0>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x212>
 8000d96:	ebb3 0208 	subs.w	r2, r3, r8
 8000d9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000da2:	fa22 f306 	lsr.w	r3, r2, r6
 8000da6:	40f1      	lsrs	r1, r6
 8000da8:	431f      	orrs	r7, r3
 8000daa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	f1c2 0320 	rsb	r3, r2, #32
 8000dba:	40d8      	lsrs	r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	4301      	orrs	r1, r0
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd8:	0c0b      	lsrs	r3, r1, #16
 8000dda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dde:	fb00 f60e 	mul.w	r6, r0, lr
 8000de2:	429e      	cmp	r6, r3
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x260>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b8>
 8000df4:	429e      	cmp	r6, r3
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b8>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	b289      	uxth	r1, r1
 8000e00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e04:	fb07 3316 	mls	r3, r7, r6, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x28a>
 8000e14:	eb1c 0101 	adds.w	r1, ip, r1
 8000e18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000e22:	3e02      	subs	r6, #2
 8000e24:	4461      	add	r1, ip
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0x104>
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e705      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e3      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6f8      	b.n	8000c2e <__udivmoddi4+0x92>
 8000e3c:	454b      	cmp	r3, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f8>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f8>
 8000e4c:	4646      	mov	r6, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x28a>
 8000e50:	4620      	mov	r0, r4
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1e2>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b8>
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x12c>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xde>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x156>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <SHT31_ReadTempHumidity>:
#define CMD_MEASURE_HUMIDITY 0x2C10 // Command to measure humidity

extern I2C_HandleTypeDef hi2c1;

void SHT31_ReadTempHumidity(float* temp, float* humidity)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
	uint8_t dt[2];
	uint8_t dh[2];
	dt[0] = 0x06;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	763b      	strb	r3, [r7, #24]
	dt[1] = 0x2C;
 8000e7e:	232c      	movs	r3, #44	; 0x2c
 8000e80:	767b      	strb	r3, [r7, #25]
	dh[0] = 0x10;
 8000e82:	2310      	movs	r3, #16
 8000e84:	753b      	strb	r3, [r7, #20]
	dh[1] = 0x2C;
 8000e86:	232c      	movs	r3, #44	; 0x2c
 8000e88:	757b      	strb	r3, [r7, #21]
    uint16_t temp_raw, humidity_raw;
    // Send command to measure temperature
    uint8_t command_temp_buffer[2] = {(CMD_MEASURE_TEMP & 0xff00u) >> 8u, CMD_MEASURE_TEMP & 0xffu};
 8000e8a:	f240 632c 	movw	r3, #1580	; 0x62c
 8000e8e:	823b      	strh	r3, [r7, #16]
    uint8_t command_humid_buffer[2] = {(CMD_MEASURE_HUMIDITY & 0xff00u) >> 8u, CMD_MEASURE_HUMIDITY & 0xffu};
 8000e90:	f241 032c 	movw	r3, #4140	; 0x102c
 8000e94:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, command_temp_buffer, sizeof(command_temp_buffer), 100);
 8000e96:	f107 0210 	add.w	r2, r7, #16
 8000e9a:	2364      	movs	r3, #100	; 0x64
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	2188      	movs	r1, #136	; 0x88
 8000ea2:	482e      	ldr	r0, [pc, #184]	; (8000f5c <SHT31_ReadTempHumidity+0xec>)
 8000ea4:	f002 fbd0 	bl	8003648 <HAL_I2C_Master_Transmit>
    HAL_Delay(50);
 8000ea8:	2032      	movs	r0, #50	; 0x32
 8000eaa:	f001 f83b 	bl	8001f24 <HAL_Delay>
    // Read temperature data
    HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDR, data, 3, 100);
 8000eae:	f107 021c 	add.w	r2, r7, #28
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	2188      	movs	r1, #136	; 0x88
 8000eba:	4828      	ldr	r0, [pc, #160]	; (8000f5c <SHT31_ReadTempHumidity+0xec>)
 8000ebc:	f002 fcb8 	bl	8003830 <HAL_I2C_Master_Receive>
    temp_raw = data[0] << 8 | data[1];
 8000ec0:	7f3b      	ldrb	r3, [r7, #28]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	7f7b      	ldrb	r3, [r7, #29]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	84fb      	strh	r3, [r7, #38]	; 0x26
    *temp = ((float)temp_raw * 175.0f / 65535.0f) - 45.0f;
 8000ed0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eda:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000f60 <SHT31_ReadTempHumidity+0xf0>
 8000ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ee2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000f64 <SHT31_ReadTempHumidity+0xf4>
 8000ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eea:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000f68 <SHT31_ReadTempHumidity+0xf8>
 8000eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
    // Send command to measure humidity
    HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDR, command_humid_buffer, sizeof(command_humid_buffer), 100);
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	2364      	movs	r3, #100	; 0x64
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2302      	movs	r3, #2
 8000f02:	2188      	movs	r1, #136	; 0x88
 8000f04:	4815      	ldr	r0, [pc, #84]	; (8000f5c <SHT31_ReadTempHumidity+0xec>)
 8000f06:	f002 fb9f 	bl	8003648 <HAL_I2C_Master_Transmit>
    HAL_Delay(50);
 8000f0a:	2032      	movs	r0, #50	; 0x32
 8000f0c:	f001 f80a 	bl	8001f24 <HAL_Delay>
    // Read humidity data
    HAL_I2C_Master_Receive(&hi2c1, SHT31_ADDR, data, 3, 100);
 8000f10:	f107 021c 	add.w	r2, r7, #28
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2303      	movs	r3, #3
 8000f1a:	2188      	movs	r1, #136	; 0x88
 8000f1c:	480f      	ldr	r0, [pc, #60]	; (8000f5c <SHT31_ReadTempHumidity+0xec>)
 8000f1e:	f002 fc87 	bl	8003830 <HAL_I2C_Master_Receive>
    humidity_raw = data[0] << 8 | data[1];
 8000f22:	7f3b      	ldrb	r3, [r7, #28]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	7f7b      	ldrb	r3, [r7, #29]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	84bb      	strh	r3, [r7, #36]	; 0x24
    *humidity = ((float)humidity_raw * 100.0f / 65535.0f);
 8000f32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000f6c <SHT31_ReadTempHumidity+0xfc>
 8000f40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f44:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000f64 <SHT31_ReadTempHumidity+0xf4>
 8000f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	edc3 7a00 	vstr	s15, [r3]
}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000f8 	.word	0x200000f8
 8000f60:	432f0000 	.word	0x432f0000
 8000f64:	477fff00 	.word	0x477fff00
 8000f68:	42340000 	.word	0x42340000
 8000f6c:	42c80000 	.word	0x42c80000

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f000 ff60 	bl	8001e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f87f 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f000 f9b3 	bl	80012e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f82:	f000 f981 	bl	8001288 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f86:	f000 f93f 	bl	8001208 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f8a:	f000 f8d9 	bl	8001140 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 8000f8e:	f000 fa1f 	bl	80013d0 <SSD1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000f92:	4836      	ldr	r0, [pc, #216]	; (800106c <main+0xfc>)
 8000f94:	f001 fafa 	bl	800258c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	4833      	ldr	r0, [pc, #204]	; (800106c <main+0xfc>)
 8000f9e:	f001 fb58 	bl	8002652 <HAL_ADC_PollForConversion>

	  analog_in_value = HAL_ADC_GetValue(&hadc1);
 8000fa2:	4832      	ldr	r0, [pc, #200]	; (800106c <main+0xfc>)
 8000fa4:	f001 fbe4 	bl	8002770 <HAL_ADC_GetValue>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	86fb      	strh	r3, [r7, #54]	; 0x36

	  SHT31_ReadTempHumidity(&temperature, &humidity);
 8000fac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff5a 	bl	8000e70 <SHT31_ReadTempHumidity>
	  gcvt(temperature, 4, temp_buf);
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff faba 	bl	8000538 <__aeabi_f2d>
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460d      	mov	r5, r1
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2004      	movs	r0, #4
 8000fd0:	ec45 4b10 	vmov	d0, r4, r5
 8000fd4:	f004 ff08 	bl	8005de8 <gcvt>
	  gcvt(humidity, 4, humid_buf);
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff faac 	bl	8000538 <__aeabi_f2d>
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	460d      	mov	r5, r1
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2004      	movs	r0, #4
 8000fea:	ec45 4b10 	vmov	d0, r4, r5
 8000fee:	f004 fefb 	bl	8005de8 <gcvt>
	  gcvt(analog_in_value, 8, analog_buf);
 8000ff2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa7d 	bl	80004f4 <__aeabi_ui2d>
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	460d      	mov	r5, r1
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4619      	mov	r1, r3
 8001004:	2008      	movs	r0, #8
 8001006:	ec45 4b10 	vmov	d0, r4, r5
 800100a:	f004 feed 	bl	8005de8 <gcvt>
	  SSD1306_GotoXY (10,10); // goto 10, 10
 800100e:	210a      	movs	r1, #10
 8001010:	200a      	movs	r0, #10
 8001012:	f000 fb47 	bl	80016a4 <SSD1306_GotoXY>
	  SSD1306_Puts ("temp:", &Font_11x18, 1);
 8001016:	2201      	movs	r2, #1
 8001018:	4915      	ldr	r1, [pc, #84]	; (8001070 <main+0x100>)
 800101a:	4816      	ldr	r0, [pc, #88]	; (8001074 <main+0x104>)
 800101c:	f000 fbd8 	bl	80017d0 <SSD1306_Puts>
	  SSD1306_GotoXY (65,10); // goto 10, 10
 8001020:	210a      	movs	r1, #10
 8001022:	2041      	movs	r0, #65	; 0x41
 8001024:	f000 fb3e 	bl	80016a4 <SSD1306_GotoXY>
	  SSD1306_Puts (temp_buf, &Font_11x18, 1);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2201      	movs	r2, #1
 800102e:	4910      	ldr	r1, [pc, #64]	; (8001070 <main+0x100>)
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fbcd 	bl	80017d0 <SSD1306_Puts>
	  /*SSD1306_GotoXY (10,30); // goto 10, 10
	  SSD1306_Puts ("humid:", &Font_11x18, 1); // print Hello
	  SSD1306_GotoXY (75, 30);
	  SSD1306_Puts (humid_buf, &Font_11x18, 1);*/
	  SSD1306_GotoXY (10,30); // goto 10, 10
 8001036:	211e      	movs	r1, #30
 8001038:	200a      	movs	r0, #10
 800103a:	f000 fb33 	bl	80016a4 <SSD1306_GotoXY>
	  SSD1306_Puts ("AnIn:", &Font_11x18, 1);
 800103e:	2201      	movs	r2, #1
 8001040:	490b      	ldr	r1, [pc, #44]	; (8001070 <main+0x100>)
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <main+0x108>)
 8001044:	f000 fbc4 	bl	80017d0 <SSD1306_Puts>
	  SSD1306_GotoXY (75, 30);
 8001048:	211e      	movs	r1, #30
 800104a:	204b      	movs	r0, #75	; 0x4b
 800104c:	f000 fb2a 	bl	80016a4 <SSD1306_GotoXY>
	  SSD1306_Puts (analog_buf, &Font_11x18, 1);
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	2201      	movs	r2, #1
 8001056:	4906      	ldr	r1, [pc, #24]	; (8001070 <main+0x100>)
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fbb9 	bl	80017d0 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); // update screen
 800105e:	f000 fa7b 	bl	8001558 <SSD1306_UpdateScreen>
		  SSD1306_GotoXY (10,10); // goto 10, 10
		  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
		  SSD1306_UpdateScreen(); // update screen
		  }
		*/
	  HAL_Delay(100);
 8001062:	2064      	movs	r0, #100	; 0x64
 8001064:	f000 ff5e 	bl	8001f24 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001068:	e793      	b.n	8000f92 <main+0x22>
 800106a:	bf00      	nop
 800106c:	20000094 	.word	0x20000094
 8001070:	20000000 	.word	0x20000000
 8001074:	080085a8 	.word	0x080085a8
 8001078:	080085b0 	.word	0x080085b0

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b096      	sub	sp, #88	; 0x58
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2244      	movs	r2, #68	; 0x44
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f004 fefa 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a2:	f003 f8f1 	bl	8004288 <HAL_PWREx_ControlVoltageScaling>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010ac:	f000 f98a 	bl	80013c4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010b0:	f003 f8cc 	bl	800424c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <SystemClock_Config+0xc0>)
 80010b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ba:	4a20      	ldr	r2, [pc, #128]	; (800113c <SystemClock_Config+0xc0>)
 80010bc:	f023 0318 	bic.w	r3, r3, #24
 80010c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010c4:	2314      	movs	r3, #20
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010d4:	2360      	movs	r3, #96	; 0x60
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010dc:	2301      	movs	r3, #1
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010e4:	2310      	movs	r3, #16
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010e8:	2307      	movs	r3, #7
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 f91b 	bl	8004334 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001104:	f000 f95e 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2303      	movs	r3, #3
 800110e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	2101      	movs	r1, #1
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fd1b 	bl	8004b5c <HAL_RCC_ClockConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800112c:	f000 f94a 	bl	80013c4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001130:	f004 f92e 	bl	8005390 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001134:	bf00      	nop
 8001136:	3758      	adds	r7, #88	; 0x58
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000

08001140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_ADC1_Init+0xbc>)
 8001158:	4a29      	ldr	r2, [pc, #164]	; (8001200 <MX_ADC1_Init+0xc0>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <MX_ADC1_Init+0xbc>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_ADC1_Init+0xbc>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_ADC1_Init+0xbc>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_ADC1_Init+0xbc>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_ADC1_Init+0xbc>)
 8001176:	2204      	movs	r2, #4
 8001178:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_ADC1_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_ADC1_Init+0xbc>)
 8001182:	2200      	movs	r2, #0
 8001184:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_ADC1_Init+0xbc>)
 8001188:	2201      	movs	r2, #1
 800118a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_ADC1_Init+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_ADC1_Init+0xbc>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_ADC1_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_ADC1_Init+0xbc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_ADC1_Init+0xbc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_ADC1_Init+0xbc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_ADC1_Init+0xbc>)
 80011b8:	f001 f8a0 	bl	80022fc <HAL_ADC_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011c2:	f000 f8ff 	bl	80013c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_ADC1_Init+0xc4>)
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ca:	2306      	movs	r3, #6
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d2:	237f      	movs	r3, #127	; 0x7f
 80011d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d6:	2304      	movs	r3, #4
 80011d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_ADC1_Init+0xbc>)
 80011e4:	f001 fad2 	bl	800278c <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011ee:	f000 f8e9 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000094 	.word	0x20000094
 8001200:	50040000 	.word	0x50040000
 8001204:	21800100 	.word	0x21800100

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_I2C1_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_I2C1_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_I2C1_Init+0x74>)
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <MX_I2C1_Init+0x7c>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_I2C1_Init+0x74>)
 8001220:	2201      	movs	r2, #1
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_I2C1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_I2C1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <MX_I2C1_Init+0x74>)
 8001244:	f002 f970 	bl	8003528 <HAL_I2C_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124e:	f000 f8b9 	bl	80013c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <MX_I2C1_Init+0x74>)
 8001256:	f002 ff61 	bl	800411c <HAL_I2CEx_ConfigAnalogFilter>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001260:	f000 f8b0 	bl	80013c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_I2C1_Init+0x74>)
 8001268:	f002 ffa3 	bl	80041b2 <HAL_I2CEx_ConfigDigitalFilter>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 f8a7 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000f8 	.word	0x200000f8
 8001280:	40005400 	.word	0x40005400
 8001284:	00300f38 	.word	0x00300f38

08001288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <MX_USART2_UART_Init+0x5c>)
 8001290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART2_UART_Init+0x58>)
 80012cc:	f004 f962 	bl	8005594 <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012d6:	f000 f875 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000014c 	.word	0x2000014c
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <MX_GPIO_Init+0xd4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <MX_GPIO_Init+0xd4>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_GPIO_Init+0xd4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_GPIO_Init+0xd4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a28      	ldr	r2, [pc, #160]	; (80013bc <MX_GPIO_Init+0xd4>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <MX_GPIO_Init+0xd4>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_GPIO_Init+0xd4>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a22      	ldr	r2, [pc, #136]	; (80013bc <MX_GPIO_Init+0xd4>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_GPIO_Init+0xd4>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f002 f8d2 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_output_GPIO_Port, led_output_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2110      	movs	r1, #16
 8001358:	4819      	ldr	r0, [pc, #100]	; (80013c0 <MX_GPIO_Init+0xd8>)
 800135a:	f002 f8cd 	bl	80034f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137a:	f001 ff53 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_input_Pin */
  GPIO_InitStruct.Pin = button_input_Pin;
 800137e:	2308      	movs	r3, #8
 8001380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_input_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <MX_GPIO_Init+0xd8>)
 8001392:	f001 ff47 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_output_Pin */
  GPIO_InitStruct.Pin = led_output_Pin;
 8001396:	2310      	movs	r3, #16
 8001398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_output_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <MX_GPIO_Init+0xd8>)
 80013ae:	f001 ff39 	bl	8003224 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b2:	bf00      	nop
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000400 	.word	0x48000400

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80013d6:	f000 fa21 	bl	800181c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80013da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013de:	2201      	movs	r2, #1
 80013e0:	2178      	movs	r1, #120	; 0x78
 80013e2:	485b      	ldr	r0, [pc, #364]	; (8001550 <SSD1306_Init+0x180>)
 80013e4:	f002 fb1a 	bl	8003a1c <HAL_I2C_IsDeviceReady>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e0a9      	b.n	8001546 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80013f2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80013f6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013f8:	e002      	b.n	8001400 <SSD1306_Init+0x30>
		p--;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f9      	bne.n	80013fa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001406:	22ae      	movs	r2, #174	; 0xae
 8001408:	2100      	movs	r1, #0
 800140a:	2078      	movs	r0, #120	; 0x78
 800140c:	f000 fa82 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001410:	2220      	movs	r2, #32
 8001412:	2100      	movs	r1, #0
 8001414:	2078      	movs	r0, #120	; 0x78
 8001416:	f000 fa7d 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800141a:	2210      	movs	r2, #16
 800141c:	2100      	movs	r1, #0
 800141e:	2078      	movs	r0, #120	; 0x78
 8001420:	f000 fa78 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001424:	22b0      	movs	r2, #176	; 0xb0
 8001426:	2100      	movs	r1, #0
 8001428:	2078      	movs	r0, #120	; 0x78
 800142a:	f000 fa73 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800142e:	22c8      	movs	r2, #200	; 0xc8
 8001430:	2100      	movs	r1, #0
 8001432:	2078      	movs	r0, #120	; 0x78
 8001434:	f000 fa6e 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2078      	movs	r0, #120	; 0x78
 800143e:	f000 fa69 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001442:	2210      	movs	r2, #16
 8001444:	2100      	movs	r1, #0
 8001446:	2078      	movs	r0, #120	; 0x78
 8001448:	f000 fa64 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	2100      	movs	r1, #0
 8001450:	2078      	movs	r0, #120	; 0x78
 8001452:	f000 fa5f 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001456:	2281      	movs	r2, #129	; 0x81
 8001458:	2100      	movs	r1, #0
 800145a:	2078      	movs	r0, #120	; 0x78
 800145c:	f000 fa5a 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001460:	22ff      	movs	r2, #255	; 0xff
 8001462:	2100      	movs	r1, #0
 8001464:	2078      	movs	r0, #120	; 0x78
 8001466:	f000 fa55 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800146a:	22a1      	movs	r2, #161	; 0xa1
 800146c:	2100      	movs	r1, #0
 800146e:	2078      	movs	r0, #120	; 0x78
 8001470:	f000 fa50 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001474:	22a6      	movs	r2, #166	; 0xa6
 8001476:	2100      	movs	r1, #0
 8001478:	2078      	movs	r0, #120	; 0x78
 800147a:	f000 fa4b 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800147e:	22a8      	movs	r2, #168	; 0xa8
 8001480:	2100      	movs	r1, #0
 8001482:	2078      	movs	r0, #120	; 0x78
 8001484:	f000 fa46 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001488:	223f      	movs	r2, #63	; 0x3f
 800148a:	2100      	movs	r1, #0
 800148c:	2078      	movs	r0, #120	; 0x78
 800148e:	f000 fa41 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001492:	22a4      	movs	r2, #164	; 0xa4
 8001494:	2100      	movs	r1, #0
 8001496:	2078      	movs	r0, #120	; 0x78
 8001498:	f000 fa3c 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800149c:	22d3      	movs	r2, #211	; 0xd3
 800149e:	2100      	movs	r1, #0
 80014a0:	2078      	movs	r0, #120	; 0x78
 80014a2:	f000 fa37 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2078      	movs	r0, #120	; 0x78
 80014ac:	f000 fa32 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014b0:	22d5      	movs	r2, #213	; 0xd5
 80014b2:	2100      	movs	r1, #0
 80014b4:	2078      	movs	r0, #120	; 0x78
 80014b6:	f000 fa2d 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014ba:	22f0      	movs	r2, #240	; 0xf0
 80014bc:	2100      	movs	r1, #0
 80014be:	2078      	movs	r0, #120	; 0x78
 80014c0:	f000 fa28 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014c4:	22d9      	movs	r2, #217	; 0xd9
 80014c6:	2100      	movs	r1, #0
 80014c8:	2078      	movs	r0, #120	; 0x78
 80014ca:	f000 fa23 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80014ce:	2222      	movs	r2, #34	; 0x22
 80014d0:	2100      	movs	r1, #0
 80014d2:	2078      	movs	r0, #120	; 0x78
 80014d4:	f000 fa1e 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80014d8:	22da      	movs	r2, #218	; 0xda
 80014da:	2100      	movs	r1, #0
 80014dc:	2078      	movs	r0, #120	; 0x78
 80014de:	f000 fa19 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80014e2:	2212      	movs	r2, #18
 80014e4:	2100      	movs	r1, #0
 80014e6:	2078      	movs	r0, #120	; 0x78
 80014e8:	f000 fa14 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80014ec:	22db      	movs	r2, #219	; 0xdb
 80014ee:	2100      	movs	r1, #0
 80014f0:	2078      	movs	r0, #120	; 0x78
 80014f2:	f000 fa0f 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	2078      	movs	r0, #120	; 0x78
 80014fc:	f000 fa0a 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001500:	228d      	movs	r2, #141	; 0x8d
 8001502:	2100      	movs	r1, #0
 8001504:	2078      	movs	r0, #120	; 0x78
 8001506:	f000 fa05 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800150a:	2214      	movs	r2, #20
 800150c:	2100      	movs	r1, #0
 800150e:	2078      	movs	r0, #120	; 0x78
 8001510:	f000 fa00 	bl	8001914 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001514:	22af      	movs	r2, #175	; 0xaf
 8001516:	2100      	movs	r1, #0
 8001518:	2078      	movs	r0, #120	; 0x78
 800151a:	f000 f9fb 	bl	8001914 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800151e:	222e      	movs	r2, #46	; 0x2e
 8001520:	2100      	movs	r1, #0
 8001522:	2078      	movs	r0, #120	; 0x78
 8001524:	f000 f9f6 	bl	8001914 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001528:	2000      	movs	r0, #0
 800152a:	f000 f843 	bl	80015b4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800152e:	f000 f813 	bl	8001558 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <SSD1306_Init+0x184>)
 8001534:	2200      	movs	r2, #0
 8001536:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <SSD1306_Init+0x184>)
 800153a:	2200      	movs	r2, #0
 800153c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SSD1306_Init+0x184>)
 8001540:	2201      	movs	r2, #1
 8001542:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000f8 	.word	0x200000f8
 8001554:	200005d0 	.word	0x200005d0

08001558 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	e01d      	b.n	80015a0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	3b50      	subs	r3, #80	; 0x50
 8001568:	b2db      	uxtb	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	2078      	movs	r0, #120	; 0x78
 8001570:	f000 f9d0 	bl	8001914 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	2078      	movs	r0, #120	; 0x78
 800157a:	f000 f9cb 	bl	8001914 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800157e:	2210      	movs	r2, #16
 8001580:	2100      	movs	r1, #0
 8001582:	2078      	movs	r0, #120	; 0x78
 8001584:	f000 f9c6 	bl	8001914 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	01db      	lsls	r3, r3, #7
 800158c:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <SSD1306_UpdateScreen+0x58>)
 800158e:	441a      	add	r2, r3
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 f957 	bl	8001848 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	3301      	adds	r3, #1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b07      	cmp	r3, #7
 80015a4:	d9de      	bls.n	8001564 <SSD1306_UpdateScreen+0xc>
	}
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200001d0 	.word	0x200001d0

080015b4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <SSD1306_Fill+0x14>
 80015c4:	2300      	movs	r3, #0
 80015c6:	e000      	b.n	80015ca <SSD1306_Fill+0x16>
 80015c8:	23ff      	movs	r3, #255	; 0xff
 80015ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ce:	4619      	mov	r1, r3
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <SSD1306_Fill+0x2c>)
 80015d2:	f004 fc57 	bl	8005e84 <memset>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001d0 	.word	0x200001d0

080015e4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
 80015ee:	460b      	mov	r3, r1
 80015f0:	80bb      	strh	r3, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	70fb      	strb	r3, [r7, #3]
	if (
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	2b7f      	cmp	r3, #127	; 0x7f
 80015fa:	d848      	bhi.n	800168e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001600:	d845      	bhi.n	800168e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <SSD1306_DrawPixel+0xb8>)
 8001604:	791b      	ldrb	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d006      	beq.n	8001618 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d11a      	bne.n	8001654 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	88bb      	ldrh	r3, [r7, #4]
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	b298      	uxth	r0, r3
 8001626:	4603      	mov	r3, r0
 8001628:	01db      	lsls	r3, r3, #7
 800162a:	4413      	add	r3, r2
 800162c:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <SSD1306_DrawPixel+0xbc>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	b25a      	sxtb	r2, r3
 8001632:	88bb      	ldrh	r3, [r7, #4]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	2101      	movs	r1, #1
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	b25b      	sxtb	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b259      	sxtb	r1, r3
 8001644:	88fa      	ldrh	r2, [r7, #6]
 8001646:	4603      	mov	r3, r0
 8001648:	01db      	lsls	r3, r3, #7
 800164a:	4413      	add	r3, r2
 800164c:	b2c9      	uxtb	r1, r1
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <SSD1306_DrawPixel+0xbc>)
 8001650:	54d1      	strb	r1, [r2, r3]
 8001652:	e01d      	b.n	8001690 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001654:	88fa      	ldrh	r2, [r7, #6]
 8001656:	88bb      	ldrh	r3, [r7, #4]
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	b298      	uxth	r0, r3
 800165c:	4603      	mov	r3, r0
 800165e:	01db      	lsls	r3, r3, #7
 8001660:	4413      	add	r3, r2
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <SSD1306_DrawPixel+0xbc>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	b25a      	sxtb	r2, r3
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	2101      	movs	r1, #1
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	b25b      	sxtb	r3, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	b25b      	sxtb	r3, r3
 800167a:	4013      	ands	r3, r2
 800167c:	b259      	sxtb	r1, r3
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	4603      	mov	r3, r0
 8001682:	01db      	lsls	r3, r3, #7
 8001684:	4413      	add	r3, r2
 8001686:	b2c9      	uxtb	r1, r1
 8001688:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <SSD1306_DrawPixel+0xbc>)
 800168a:	54d1      	strb	r1, [r2, r3]
 800168c:	e000      	b.n	8001690 <SSD1306_DrawPixel+0xac>
		return;
 800168e:	bf00      	nop
	}
}
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200005d0 	.word	0x200005d0
 80016a0:	200001d0 	.word	0x200001d0

080016a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	460a      	mov	r2, r1
 80016ae:	80fb      	strh	r3, [r7, #6]
 80016b0:	4613      	mov	r3, r2
 80016b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016b4:	4a05      	ldr	r2, [pc, #20]	; (80016cc <SSD1306_GotoXY+0x28>)
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <SSD1306_GotoXY+0x28>)
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	8053      	strh	r3, [r2, #2]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	200005d0 	.word	0x200005d0

080016d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
 80016dc:	4613      	mov	r3, r2
 80016de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016e0:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <SSD1306_Putc+0xfc>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
	if (
 80016ec:	2b7f      	cmp	r3, #127	; 0x7f
 80016ee:	dc07      	bgt.n	8001700 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <SSD1306_Putc+0xfc>)
 80016f2:	885b      	ldrh	r3, [r3, #2]
 80016f4:	461a      	mov	r2, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	785b      	ldrb	r3, [r3, #1]
 80016fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016fc:	2b3f      	cmp	r3, #63	; 0x3f
 80016fe:	dd01      	ble.n	8001704 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001700:	2300      	movs	r3, #0
 8001702:	e05e      	b.n	80017c2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e04b      	b.n	80017a2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	3b20      	subs	r3, #32
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	7849      	ldrb	r1, [r1, #1]
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4619      	mov	r1, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	440b      	add	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	e030      	b.n	8001790 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d010      	beq.n	8001760 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <SSD1306_Putc+0xfc>)
 8001740:	881a      	ldrh	r2, [r3, #0]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	b29b      	uxth	r3, r3
 8001746:	4413      	add	r3, r2
 8001748:	b298      	uxth	r0, r3
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <SSD1306_Putc+0xfc>)
 800174c:	885a      	ldrh	r2, [r3, #2]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	b29b      	uxth	r3, r3
 8001756:	79ba      	ldrb	r2, [r7, #6]
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff ff43 	bl	80015e4 <SSD1306_DrawPixel>
 800175e:	e014      	b.n	800178a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <SSD1306_Putc+0xfc>)
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4413      	add	r3, r2
 800176a:	b298      	uxth	r0, r3
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <SSD1306_Putc+0xfc>)
 800176e:	885a      	ldrh	r2, [r3, #2]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b299      	uxth	r1, r3
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf0c      	ite	eq
 800177e:	2301      	moveq	r3, #1
 8001780:	2300      	movne	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	f7ff ff2d 	bl	80015e4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	3301      	adds	r3, #1
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4293      	cmp	r3, r2
 800179a:	d3c8      	bcc.n	800172e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	461a      	mov	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d3ad      	bcc.n	800170a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <SSD1306_Putc+0xfc>)
 80017b0:	881a      	ldrh	r2, [r3, #0]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <SSD1306_Putc+0xfc>)
 80017be:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200005d0 	.word	0x200005d0

080017d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	4613      	mov	r3, r2
 80017dc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80017de:	e012      	b.n	8001806 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	79fa      	ldrb	r2, [r7, #7]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff71 	bl	80016d0 <SSD1306_Putc>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d002      	beq.n	8001800 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	e008      	b.n	8001812 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3301      	adds	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e8      	bne.n	80017e0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	781b      	ldrb	r3, [r3, #0]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <ssd1306_I2C_Init+0x28>)
 8001824:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001826:	e002      	b.n	800182e <ssd1306_I2C_Init+0x12>
		p--;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f9      	bne.n	8001828 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	0003d090 	.word	0x0003d090

08001848 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b0c7      	sub	sp, #284	; 0x11c
 800184c:	af02      	add	r7, sp, #8
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001856:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800185a:	600a      	str	r2, [r1, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001862:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001866:	4622      	mov	r2, r4
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800186e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001872:	4602      	mov	r2, r0
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800187a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800187e:	460a      	mov	r2, r1
 8001880:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800188a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800188e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001892:	7812      	ldrb	r2, [r2, #0]
 8001894:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800189c:	e015      	b.n	80018ca <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800189e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018a6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	441a      	add	r2, r3
 80018ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018b2:	3301      	adds	r3, #1
 80018b4:	7811      	ldrb	r1, [r2, #0]
 80018b6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018ba:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80018be:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018c4:	3301      	adds	r3, #1
 80018c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018d4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80018d8:	8812      	ldrh	r2, [r2, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d8df      	bhi.n	800189e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80018de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018e2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b299      	uxth	r1, r3
 80018ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	200a      	movs	r0, #10
 80018fe:	9000      	str	r0, [sp, #0]
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <ssd1306_I2C_WriteMulti+0xc8>)
 8001902:	f001 fea1 	bl	8003648 <HAL_I2C_Master_Transmit>
}
 8001906:	bf00      	nop
 8001908:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	200000f8 	.word	0x200000f8

08001914 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af02      	add	r7, sp, #8
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
 800191e:	460b      	mov	r3, r1
 8001920:	71bb      	strb	r3, [r7, #6]
 8001922:	4613      	mov	r3, r2
 8001924:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800192a:	797b      	ldrb	r3, [r7, #5]
 800192c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	b299      	uxth	r1, r3
 8001932:	f107 020c 	add.w	r2, r7, #12
 8001936:	230a      	movs	r3, #10
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2302      	movs	r3, #2
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <ssd1306_I2C_Write+0x38>)
 800193e:	f001 fe83 	bl	8003648 <HAL_I2C_Master_Transmit>
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200000f8 	.word	0x200000f8

08001950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_MspInit+0x44>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_MspInit+0x44>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6613      	str	r3, [r2, #96]	; 0x60
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_MspInit+0x44>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_MspInit+0x44>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_MspInit+0x44>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	6593      	str	r3, [r2, #88]	; 0x58
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_MspInit+0x44>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b09e      	sub	sp, #120	; 0x78
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2254      	movs	r2, #84	; 0x54
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fa63 	bl	8005e84 <memset>
  if(hadc->Instance==ADC1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <HAL_ADC_MspInit+0xc0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d143      	bne.n	8001a50 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019d2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019d4:	2301      	movs	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80019dc:	2310      	movs	r3, #16
 80019de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019e0:	2307      	movs	r3, #7
 80019e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fad4 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001a02:	f7ff fcdf 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_ADC_MspInit+0xc4>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_ADC_MspInit+0xc4>)
 8001a0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_ADC_MspInit+0xc4>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_ADC_MspInit+0xc4>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <HAL_ADC_MspInit+0xc4>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_ADC_MspInit+0xc4>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a36:	2308      	movs	r3, #8
 8001a38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a3a:	230b      	movs	r3, #11
 8001a3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f001 fbea 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3778      	adds	r7, #120	; 0x78
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	50040000 	.word	0x50040000
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b09e      	sub	sp, #120	; 0x78
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2254      	movs	r2, #84	; 0x54
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 f9ff 	bl	8005e84 <memset>
  if(hi2c->Instance==I2C1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <HAL_I2C_MspInit+0xa4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d135      	bne.n	8001afc <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a90:	2340      	movs	r3, #64	; 0x40
 8001a92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 fa81 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001aa8:	f7ff fc8c 	bl	80013c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac4:	23c0      	movs	r3, #192	; 0xc0
 8001ac6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac8:	2312      	movs	r3, #18
 8001aca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001adc:	4619      	mov	r1, r3
 8001ade:	480b      	ldr	r0, [pc, #44]	; (8001b0c <HAL_I2C_MspInit+0xac>)
 8001ae0:	f001 fba0 	bl	8003224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aee:	6593      	str	r3, [r2, #88]	; 0x58
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_I2C_MspInit+0xa8>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3778      	adds	r7, #120	; 0x78
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40005400 	.word	0x40005400
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000400 	.word	0x48000400

08001b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b09e      	sub	sp, #120	; 0x78
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2254      	movs	r2, #84	; 0x54
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 f9a7 	bl	8005e84 <memset>
  if(huart->Instance==USART2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a28      	ldr	r2, [pc, #160]	; (8001bdc <HAL_UART_MspInit+0xcc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d148      	bne.n	8001bd2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fa29 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b58:	f7ff fc34 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_UART_MspInit+0xd0>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_UART_MspInit+0xd0>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b66:	6593      	str	r3, [r2, #88]	; 0x58
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0xd0>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_UART_MspInit+0xd0>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0xd0>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_UART_MspInit+0xd0>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001baa:	f001 fb3b 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bb2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bce:	f001 fb29 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3778      	adds	r7, #120	; 0x78
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	40021000 	.word	0x40021000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f958 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c52:	f004 f8ed 	bl	8005e30 <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7a:	e7fe      	b.n	8001c7a <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
  }

  return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
  }
  return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
  return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f004 f852 	bl	8005e30 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20010000 	.word	0x20010000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	200005d8 	.word	0x200005d8
 8001dc0:	200005f0 	.word	0x200005f0

08001dc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dec:	f7ff ffea 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	; (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	; (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f004 f811 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7ff f8a9 	bl	8000f70 <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e2c:	08009630 	.word	0x08009630
  ldr r2, =_sbss
 8001e30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e34:	200005f0 	.word	0x200005f0

08001e38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_IRQHandler>

08001e3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e44:	2003      	movs	r0, #3
 8001e46:	f001 f9b9 	bl	80031bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f000 f80e 	bl	8001e6c <HAL_InitTick>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	71fb      	strb	r3, [r7, #7]
 8001e5a:	e001      	b.n	8001e60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e5c:	f7ff fd78 	bl	8001950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e60:	79fb      	ldrb	r3, [r7, #7]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_InitTick+0x6c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e80:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_InitTick+0x70>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_InitTick+0x6c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 f9b7 	bl	800320a <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d809      	bhi.n	8001ebc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f001 f98f 	bl	80031d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_InitTick+0x74>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e004      	b.n	8001ecc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	e001      	b.n	8001ecc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000010 	.word	0x20000010
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000010 	.word	0x20000010
 8001f08:	200005dc 	.word	0x200005dc

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200005dc 	.word	0x200005dc

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff ffee 	bl	8001f0c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d005      	beq.n	8001f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_Delay+0x44>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f7      	bhi.n	8001f4c <HAL_Delay+0x28>
  {
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000010 	.word	0x20000010

08001f6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	609a      	str	r2, [r3, #8]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3360      	adds	r3, #96	; 0x60
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <LL_ADC_SetOffset+0x44>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	4313      	orrs	r3, r2
 8002004:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	03fff000 	.word	0x03fff000

0800201c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3360      	adds	r3, #96	; 0x60
 800202a:	461a      	mov	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3360      	adds	r3, #96	; 0x60
 8002058:	461a      	mov	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3330      	adds	r3, #48	; 0x30
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	4413      	add	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	211f      	movs	r1, #31
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	0e9b      	lsrs	r3, r3, #26
 80020dc:	f003 011f 	and.w	r1, r3, #31
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	431a      	orrs	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3314      	adds	r3, #20
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0e5b      	lsrs	r3, r3, #25
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0d1b      	lsrs	r3, r3, #20
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2107      	movs	r1, #7
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	401a      	ands	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	0d1b      	lsrs	r3, r3, #20
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	431a      	orrs	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216c:	43db      	mvns	r3, r3
 800216e:	401a      	ands	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0318 	and.w	r3, r3, #24
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002178:	40d9      	lsrs	r1, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	400b      	ands	r3, r1
 800217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002182:	431a      	orrs	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	0007ffff 	.word	0x0007ffff

0800219c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6093      	str	r3, [r2, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021d4:	d101      	bne.n	80021da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002224:	d101      	bne.n	800222a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <LL_ADC_IsEnabled+0x18>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <LL_ADC_IsEnabled+0x1a>
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002296:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800229a:	f043 0204 	orr.w	r2, r3, #4
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d101      	bne.n	80022ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e12c      	b.n	8002570 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff fb37 	bl	8001998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff3f 	bl	80021c0 <LL_ADC_IsDeepPowerDownEnabled>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff25 	bl	800219c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff5a 	bl	8002210 <LL_ADC_IsInternalRegulatorEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d115      	bne.n	800238e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff3e 	bl	80021e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800236c:	4b82      	ldr	r3, [pc, #520]	; (8002578 <HAL_ADC_Init+0x27c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	4a82      	ldr	r2, [pc, #520]	; (800257c <HAL_ADC_Init+0x280>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002380:	e002      	b.n	8002388 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff3c 	bl	8002210 <LL_ADC_IsInternalRegulatorEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff75 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 80023c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 80c5 	bne.w	800255e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 80c1 	bne.w	800255e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023e4:	f043 0202 	orr.w	r2, r3, #2
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff35 	bl	8002260 <LL_ADC_IsEnabled>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fc:	4860      	ldr	r0, [pc, #384]	; (8002580 <HAL_ADC_Init+0x284>)
 80023fe:	f7ff ff2f 	bl	8002260 <LL_ADC_IsEnabled>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4619      	mov	r1, r3
 800240e:	485d      	ldr	r0, [pc, #372]	; (8002584 <HAL_ADC_Init+0x288>)
 8002410:	f7ff fdac 	bl	8001f6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e5b      	ldrb	r3, [r3, #25]
 8002418:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800241e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002424:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800242a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002432:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d106      	bne.n	8002450 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	3b01      	subs	r3, #1
 8002448:	045b      	lsls	r3, r3, #17
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4b45      	ldr	r3, [pc, #276]	; (8002588 <HAL_ADC_Init+0x28c>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	430b      	orrs	r3, r1
 800247e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff12 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 800248a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff1f 	bl	80022d4 <LL_ADC_INJ_IsConversionOngoing>
 8002496:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d13d      	bne.n	800251a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d13a      	bne.n	800251a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024a8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024b0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024c0:	f023 0302 	bic.w	r3, r3, #2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	69b9      	ldr	r1, [r7, #24]
 80024ca:	430b      	orrs	r3, r1
 80024cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d118      	bne.n	800250a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024e2:	f023 0304 	bic.w	r3, r3, #4
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024ee:	4311      	orrs	r1, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024f4:	4311      	orrs	r1, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024fa:	430a      	orrs	r2, r1
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	611a      	str	r2, [r3, #16]
 8002508:	e007      	b.n	800251a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10c      	bne.n	800253c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f023 010f 	bic.w	r1, r3, #15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
 800253a:	e007      	b.n	800254c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 020f 	bic.w	r2, r2, #15
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f023 0303 	bic.w	r3, r3, #3
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
 800255c:	e007      	b.n	800256e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800256e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000008 	.word	0x20000008
 800257c:	053e2d63 	.word	0x053e2d63
 8002580:	50040000 	.word	0x50040000
 8002584:	50040300 	.word	0x50040300
 8002588:	fff0c007 	.word	0xfff0c007

0800258c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fe88 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d14f      	bne.n	8002644 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Start+0x26>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e04b      	b.n	800264a <HAL_ADC_Start+0xbe>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fcc6 	bl	8002f4c <ADC_Enable>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d137      	bne.n	800263a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d106      	bne.n	80025fa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f023 0206 	bic.w	r2, r3, #6
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	659a      	str	r2, [r3, #88]	; 0x58
 80025f8:	e002      	b.n	8002600 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	221c      	movs	r2, #28
 8002606:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002626:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fe27 	bl	8002286 <LL_ADC_REG_StartConversion>
 8002638:	e006      	b.n	8002648 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002642:	e001      	b.n	8002648 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002644:	2302      	movs	r3, #2
 8002646:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d102      	bne.n	800266a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002664:	2308      	movs	r3, #8
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e010      	b.n	800268c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e06f      	b.n	8002768 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002688:	2304      	movs	r3, #4
 800268a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800268c:	f7ff fc3e 	bl	8001f0c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002692:	e021      	b.n	80026d8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d01d      	beq.n	80026d8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800269c:	f7ff fc36 	bl	8001f0c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d302      	bcc.n	80026b2 <HAL_ADC_PollForConversion+0x60>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d112      	bne.n	80026d8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f043 0204 	orr.w	r2, r3, #4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e047      	b.n	8002768 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0d6      	beq.n	8002694 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fcc1 	bl	800207e <LL_ADC_REG_IsTriggerSourceSWStart>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01c      	beq.n	800273c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7e5b      	ldrb	r3, [r3, #25]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b08      	cmp	r3, #8
 8002716:	d111      	bne.n	800273c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d104      	bne.n	8002754 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2208      	movs	r2, #8
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e008      	b.n	8002766 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b0b6      	sub	sp, #216	; 0xd8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x22>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e3b9      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x796>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fd77 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 839e 	bne.w	8002f04 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d824      	bhi.n	800281a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	3b02      	subs	r3, #2
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d81b      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x86>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <HAL_ADC_ConfigChannel+0x54>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	080027f9 	.word	0x080027f9
 80027e8:	08002801 	.word	0x08002801
 80027ec:	08002809 	.word	0x08002809
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	220c      	movs	r2, #12
 80027f4:	605a      	str	r2, [r3, #4]
          break;
 80027f6:	e011      	b.n	800281c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2212      	movs	r2, #18
 80027fc:	605a      	str	r2, [r3, #4]
          break;
 80027fe:	e00d      	b.n	800281c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2218      	movs	r2, #24
 8002804:	605a      	str	r2, [r3, #4]
          break;
 8002806:	e009      	b.n	800281c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280e:	605a      	str	r2, [r3, #4]
          break;
 8002810:	e004      	b.n	800281c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2206      	movs	r2, #6
 8002816:	605a      	str	r2, [r3, #4]
          break;
 8002818:	e000      	b.n	800281c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800281a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	f7ff fc3b 	bl	80020a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fd3b 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 8002838:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fd47 	bl	80022d4 <LL_ADC_INJ_IsConversionOngoing>
 8002846:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 81a6 	bne.w	8002ba0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002854:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 81a1 	bne.w	8002ba0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6819      	ldr	r1, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	461a      	mov	r2, r3
 800286c:	f7ff fc46 	bl	80020fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	08db      	lsrs	r3, r3, #3
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b04      	cmp	r3, #4
 8002890:	d00a      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6919      	ldr	r1, [r3, #16]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028a2:	f7ff fb97 	bl	8001fd4 <LL_ADC_SetOffset>
 80028a6:	e17b      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fbb4 	bl	800201c <LL_ADC_GetOffsetChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x148>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fba9 	bl	800201c <LL_ADC_GetOffsetChannel>
 80028ca:	4603      	mov	r3, r0
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	f003 021f 	and.w	r2, r3, #31
 80028d2:	e01e      	b.n	8002912 <HAL_ADC_ConfigChannel+0x186>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fb9e 	bl	800201c <LL_ADC_GetOffsetChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e004      	b.n	8002910 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d105      	bne.n	800292a <HAL_ADC_ConfigChannel+0x19e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0e9b      	lsrs	r3, r3, #26
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	e018      	b.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800293e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e004      	b.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800295c:	429a      	cmp	r2, r3
 800295e:	d106      	bne.n	800296e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fb6d 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2101      	movs	r1, #1
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fb51 	bl	800201c <LL_ADC_GetOffsetChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <HAL_ADC_ConfigChannel+0x20e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fb46 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002990:	4603      	mov	r3, r0
 8002992:	0e9b      	lsrs	r3, r3, #26
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	e01e      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x24c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2101      	movs	r1, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fb3b 	bl	800201c <LL_ADC_GetOffsetChannel>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e004      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80029cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x264>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	e018      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x296>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e004      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d106      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fb0a 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2102      	movs	r1, #2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff faee 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x2d4>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2102      	movs	r1, #2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fae3 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	f003 021f 	and.w	r2, r3, #31
 8002a5e:	e01e      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x312>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2102      	movs	r1, #2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fad8 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002a8e:	2320      	movs	r3, #32
 8002a90:	e004      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d105      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x32a>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0e9b      	lsrs	r3, r3, #26
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	e016      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x358>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e004      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d106      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2102      	movs	r1, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff faa9 	bl	8002048 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2103      	movs	r1, #3
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fa8d 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x396>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2103      	movs	r1, #3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fa82 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	0e9b      	lsrs	r3, r3, #26
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	e017      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x3c6>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2103      	movs	r1, #3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fa77 	bl	800201c <LL_ADC_GetOffsetChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b3c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x3de>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	e011      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x402>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002b82:	2320      	movs	r3, #32
 8002b84:	e003      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d106      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2200      	movs	r2, #0
 8002b98:	2103      	movs	r1, #3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fa54 	bl	8002048 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fb5b 	bl	8002260 <LL_ADC_IsEnabled>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 813f 	bne.w	8002e30 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f7ff fac8 	bl	8002154 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a8e      	ldr	r2, [pc, #568]	; (8002e04 <HAL_ADC_ConfigChannel+0x678>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	f040 8130 	bne.w	8002e30 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x46c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	3301      	adds	r3, #1
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2b09      	cmp	r3, #9
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e019      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x4a0>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c00:	fa93 f3a3 	rbit	r3, r3
 8002c04:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c08:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c10:	2320      	movs	r3, #32
 8002c12:	e003      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	bf94      	ite	ls
 8002c26:	2301      	movls	r3, #1
 8002c28:	2300      	movhi	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d079      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x4c0>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0e9b      	lsrs	r3, r3, #26
 8002c42:	3301      	adds	r3, #1
 8002c44:	069b      	lsls	r3, r3, #26
 8002c46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4a:	e015      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x4ec>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	069b      	lsls	r3, r3, #26
 8002c74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x50c>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0e9b      	lsrs	r3, r3, #26
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	2101      	movs	r1, #1
 8002c92:	fa01 f303 	lsl.w	r3, r1, r3
 8002c96:	e017      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x53c>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e003      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc8:	ea42 0103 	orr.w	r1, r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x562>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0e9b      	lsrs	r3, r3, #26
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	051b      	lsls	r3, r3, #20
 8002cec:	e018      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x594>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e003      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d20:	430b      	orrs	r3, r1
 8002d22:	e080      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x5b4>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	3301      	adds	r3, #1
 8002d38:	069b      	lsls	r3, r3, #26
 8002d3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d3e:	e015      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x5e0>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e003      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	069b      	lsls	r3, r3, #26
 8002d68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x600>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	e017      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x630>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	61fb      	str	r3, [r7, #28]
  return result;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	ea42 0103 	orr.w	r1, r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x65c>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b1e      	subs	r3, #30
 8002de0:	051b      	lsls	r3, r3, #20
 8002de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002de6:	e01d      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x698>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	613b      	str	r3, [r7, #16]
  return result;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d103      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e005      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x684>
 8002e04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b1e      	subs	r3, #30
 8002e1e:	051b      	lsls	r3, r3, #20
 8002e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e24:	430b      	orrs	r3, r1
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	6892      	ldr	r2, [r2, #8]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f7ff f966 	bl	80020fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <HAL_ADC_ConfigChannel+0x7a0>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d06c      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e3c:	483c      	ldr	r0, [pc, #240]	; (8002f30 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e3e:	f7ff f8bb 	bl	8001fb8 <LL_ADC_GetCommonPathInternalCh>
 8002e42:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a3a      	ldr	r2, [pc, #232]	; (8002f34 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d127      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d121      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a35      	ldr	r2, [pc, #212]	; (8002f38 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d157      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e6e:	4619      	mov	r1, r3
 8002e70:	482f      	ldr	r0, [pc, #188]	; (8002f30 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e72:	f7ff f88e 	bl	8001f92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_ADC_ConfigChannel+0x7b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e90:	e002      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f9      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e9e:	e03a      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d113      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x746>
 8002eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <HAL_ADC_ConfigChannel+0x7ac>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d12a      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4819      	ldr	r0, [pc, #100]	; (8002f30 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ecc:	f7ff f861 	bl	8001f92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ed0:	e021      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d11c      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d116      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_ADC_ConfigChannel+0x7ac>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d111      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002efa:	4619      	mov	r1, r3
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <HAL_ADC_ConfigChannel+0x7a4>)
 8002efe:	f7ff f848 	bl	8001f92 <LL_ADC_SetCommonPathInternalCh>
 8002f02:	e008      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	37d8      	adds	r7, #216	; 0xd8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	80080000 	.word	0x80080000
 8002f30:	50040300 	.word	0x50040300
 8002f34:	c7520000 	.word	0xc7520000
 8002f38:	50040000 	.word	0x50040000
 8002f3c:	20000008 	.word	0x20000008
 8002f40:	053e2d63 	.word	0x053e2d63
 8002f44:	cb840000 	.word	0xcb840000
 8002f48:	80000001 	.word	0x80000001

08002f4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff f97f 	bl	8002260 <LL_ADC_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d169      	bne.n	800303c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <ADC_Enable+0xfc>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f043 0210 	orr.w	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e055      	b.n	800303e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f94e 	bl	8002238 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f9c:	482b      	ldr	r0, [pc, #172]	; (800304c <ADC_Enable+0x100>)
 8002f9e:	f7ff f80b 	bl	8001fb8 <LL_ADC_GetCommonPathInternalCh>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fac:	4b28      	ldr	r3, [pc, #160]	; (8003050 <ADC_Enable+0x104>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	4a28      	ldr	r2, [pc, #160]	; (8003054 <ADC_Enable+0x108>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002fc6:	e002      	b.n	8002fce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f9      	bne.n	8002fc8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fd4:	f7fe ff9a 	bl	8001f0c <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fda:	e028      	b.n	800302e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f93d 	bl	8002260 <LL_ADC_IsEnabled>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f921 	bl	8002238 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ff6:	f7fe ff89 	bl	8001f0c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d914      	bls.n	800302e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d00d      	beq.n	800302e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f043 0210 	orr.w	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d1cf      	bne.n	8002fdc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	8000003f 	.word	0x8000003f
 800304c:	50040300 	.word	0x50040300
 8003050:	20000008 	.word	0x20000008
 8003054:	053e2d63 	.word	0x053e2d63

08003058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <__NVIC_SetPriorityGrouping+0x44>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003074:	4013      	ands	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308a:	4a04      	ldr	r2, [pc, #16]	; (800309c <__NVIC_SetPriorityGrouping+0x44>)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	60d3      	str	r3, [r2, #12]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <__NVIC_GetPriorityGrouping+0x18>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	f003 0307 	and.w	r3, r3, #7
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	490c      	ldr	r1, [pc, #48]	; (8003108 <__NVIC_SetPriority+0x4c>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4908      	ldr	r1, [pc, #32]	; (800310c <__NVIC_SetPriority+0x50>)
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3b04      	subs	r3, #4
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf28      	it	cs
 800312e:	2304      	movcs	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3304      	adds	r3, #4
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b03      	subs	r3, #3
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	f04f 32ff 	mov.w	r2, #4294967295
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003158:	f04f 31ff 	mov.w	r1, #4294967295
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43d9      	mvns	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	4313      	orrs	r3, r2
         );
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	; 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003188:	d301      	bcc.n	800318e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318a:	2301      	movs	r3, #1
 800318c:	e00f      	b.n	80031ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <SysTick_Config+0x40>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003196:	210f      	movs	r1, #15
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f7ff ff8e 	bl	80030bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <SysTick_Config+0x40>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <SysTick_Config+0x40>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff47 	bl	8003058 <__NVIC_SetPriorityGrouping>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031e4:	f7ff ff5c 	bl	80030a0 <__NVIC_GetPriorityGrouping>
 80031e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	6978      	ldr	r0, [r7, #20]
 80031f0:	f7ff ff8e 	bl	8003110 <NVIC_EncodePriority>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff5d 	bl	80030bc <__NVIC_SetPriority>
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffb0 	bl	8003178 <SysTick_Config>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003232:	e148      	b.n	80034c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2101      	movs	r1, #1
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 813a 	beq.w	80034c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d005      	beq.n	8003264 <HAL_GPIO_Init+0x40>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d130      	bne.n	80032c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800329a:	2201      	movs	r2, #1
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 0201 	and.w	r2, r3, #1
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d017      	beq.n	8003302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d123      	bne.n	8003356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	220f      	movs	r2, #15
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	08da      	lsrs	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3208      	adds	r2, #8
 8003350:	6939      	ldr	r1, [r7, #16]
 8003352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0203 	and.w	r2, r3, #3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8094 	beq.w	80034c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003398:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <HAL_GPIO_Init+0x2c0>)
 800339a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339c:	4a51      	ldr	r2, [pc, #324]	; (80034e4 <HAL_GPIO_Init+0x2c0>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6613      	str	r3, [r2, #96]	; 0x60
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_GPIO_Init+0x2c0>)
 80033a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033b0:	4a4d      	ldr	r2, [pc, #308]	; (80034e8 <HAL_GPIO_Init+0x2c4>)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	089b      	lsrs	r3, r3, #2
 80033b6:	3302      	adds	r3, #2
 80033b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	220f      	movs	r2, #15
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033da:	d00d      	beq.n	80033f8 <HAL_GPIO_Init+0x1d4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a43      	ldr	r2, [pc, #268]	; (80034ec <HAL_GPIO_Init+0x2c8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <HAL_GPIO_Init+0x1d0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <HAL_GPIO_Init+0x2cc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_GPIO_Init+0x1cc>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e004      	b.n	80033fa <HAL_GPIO_Init+0x1d6>
 80033f0:	2307      	movs	r3, #7
 80033f2:	e002      	b.n	80033fa <HAL_GPIO_Init+0x1d6>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_GPIO_Init+0x1d6>
 80033f8:	2300      	movs	r3, #0
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	f002 0203 	and.w	r2, r2, #3
 8003400:	0092      	lsls	r2, r2, #2
 8003402:	4093      	lsls	r3, r2
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800340a:	4937      	ldr	r1, [pc, #220]	; (80034e8 <HAL_GPIO_Init+0x2c4>)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	3302      	adds	r3, #2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800343c:	4a2d      	ldr	r2, [pc, #180]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003466:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003490:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003496:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	3301      	adds	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f aeaf 	bne.w	8003234 <HAL_GPIO_Init+0x10>
  }
}
 80034d6:	bf00      	nop
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010000 	.word	0x40010000
 80034ec:	48000400 	.word	0x48000400
 80034f0:	48000800 	.word	0x48000800
 80034f4:	40010400 	.word	0x40010400

080034f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
 8003504:	4613      	mov	r3, r2
 8003506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003508:	787b      	ldrb	r3, [r7, #1]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800350e:	887a      	ldrh	r2, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003514:	e002      	b.n	800351c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e081      	b.n	800363e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fe fa86 	bl	8001a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2224      	movs	r2, #36	; 0x24
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e006      	b.n	80035b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d104      	bne.n	80035c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69d9      	ldr	r1, [r3, #28]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	461a      	mov	r2, r3
 8003654:	460b      	mov	r3, r1
 8003656:	817b      	strh	r3, [r7, #10]
 8003658:	4613      	mov	r3, r2
 800365a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b20      	cmp	r3, #32
 8003666:	f040 80da 	bne.w	800381e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_I2C_Master_Transmit+0x30>
 8003674:	2302      	movs	r3, #2
 8003676:	e0d3      	b.n	8003820 <HAL_I2C_Master_Transmit+0x1d8>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003680:	f7fe fc44 	bl	8001f0c <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2319      	movs	r3, #25
 800368c:	2201      	movs	r2, #1
 800368e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 faed 	bl	8003c72 <I2C_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0be      	b.n	8003820 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2221      	movs	r2, #33	; 0x21
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2210      	movs	r2, #16
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	893a      	ldrh	r2, [r7, #8]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2bff      	cmp	r3, #255	; 0xff
 80036d2:	d90e      	bls.n	80036f2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	22ff      	movs	r2, #255	; 0xff
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	8979      	ldrh	r1, [r7, #10]
 80036e2:	4b51      	ldr	r3, [pc, #324]	; (8003828 <HAL_I2C_Master_Transmit+0x1e0>)
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fce4 	bl	80040b8 <I2C_TransferConfig>
 80036f0:	e06c      	b.n	80037cc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	b2da      	uxtb	r2, r3
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	4b48      	ldr	r3, [pc, #288]	; (8003828 <HAL_I2C_Master_Transmit+0x1e0>)
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fcd3 	bl	80040b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003712:	e05b      	b.n	80037cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	6a39      	ldr	r1, [r7, #32]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 faea 	bl	8003cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e07b      	b.n	8003820 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d034      	beq.n	80037cc <HAL_I2C_Master_Transmit+0x184>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	2b00      	cmp	r3, #0
 8003768:	d130      	bne.n	80037cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	2200      	movs	r2, #0
 8003772:	2180      	movs	r1, #128	; 0x80
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fa7c 	bl	8003c72 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04d      	b.n	8003820 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2bff      	cmp	r3, #255	; 0xff
 800378c:	d90e      	bls.n	80037ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fc87 	bl	80040b8 <I2C_TransferConfig>
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	8979      	ldrh	r1, [r7, #10]
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fc76 	bl	80040b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d19e      	bne.n	8003714 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	6a39      	ldr	r1, [r7, #32]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fac9 	bl	8003d72 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e01a      	b.n	8003820 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2220      	movs	r2, #32
 80037f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_I2C_Master_Transmit+0x1e4>)
 80037fe:	400b      	ands	r3, r1
 8003800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
  }
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	80002000 	.word	0x80002000
 800382c:	fe00e800 	.word	0xfe00e800

08003830 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	461a      	mov	r2, r3
 800383c:	460b      	mov	r3, r1
 800383e:	817b      	strh	r3, [r7, #10]
 8003840:	4613      	mov	r3, r2
 8003842:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b20      	cmp	r3, #32
 800384e:	f040 80db 	bne.w	8003a08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_I2C_Master_Receive+0x30>
 800385c:	2302      	movs	r3, #2
 800385e:	e0d4      	b.n	8003a0a <HAL_I2C_Master_Receive+0x1da>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003868:	f7fe fb50 	bl	8001f0c <HAL_GetTick>
 800386c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2319      	movs	r3, #25
 8003874:	2201      	movs	r2, #1
 8003876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f9f9 	bl	8003c72 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e0bf      	b.n	8003a0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2222      	movs	r2, #34	; 0x22
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2210      	movs	r2, #16
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	893a      	ldrh	r2, [r7, #8]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2bff      	cmp	r3, #255	; 0xff
 80038ba:	d90e      	bls.n	80038da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	22ff      	movs	r2, #255	; 0xff
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	8979      	ldrh	r1, [r7, #10]
 80038ca:	4b52      	ldr	r3, [pc, #328]	; (8003a14 <HAL_I2C_Master_Receive+0x1e4>)
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fbf0 	bl	80040b8 <I2C_TransferConfig>
 80038d8:	e06d      	b.n	80039b6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	8979      	ldrh	r1, [r7, #10]
 80038ec:	4b49      	ldr	r3, [pc, #292]	; (8003a14 <HAL_I2C_Master_Receive+0x1e4>)
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 fbdf 	bl	80040b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80038fa:	e05c      	b.n	80039b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	6a39      	ldr	r1, [r7, #32]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fa73 	bl	8003dec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e07c      	b.n	8003a0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d034      	beq.n	80039b6 <HAL_I2C_Master_Receive+0x186>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d130      	bne.n	80039b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2200      	movs	r2, #0
 800395c:	2180      	movs	r1, #128	; 0x80
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f987 	bl	8003c72 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04d      	b.n	8003a0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2bff      	cmp	r3, #255	; 0xff
 8003976:	d90e      	bls.n	8003996 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	b2da      	uxtb	r2, r3
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	2300      	movs	r3, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fb92 	bl	80040b8 <I2C_TransferConfig>
 8003994:	e00f      	b.n	80039b6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fb81 	bl	80040b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d19d      	bne.n	80038fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	6a39      	ldr	r1, [r7, #32]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f9d4 	bl	8003d72 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e01a      	b.n	8003a0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2220      	movs	r2, #32
 80039da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_I2C_Master_Receive+0x1e8>)
 80039e8:	400b      	ands	r3, r1
 80039ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	80002400 	.word	0x80002400
 8003a18:	fe00e800 	.word	0xfe00e800

08003a1c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	f040 80f1 	bne.w	8003c20 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0e7      	b.n	8003c22 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_I2C_IsDeviceReady+0x44>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e0e0      	b.n	8003c22 <HAL_I2C_IsDeviceReady+0x206>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2224      	movs	r2, #36	; 0x24
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_I2C_IsDeviceReady+0x72>
 8003a7e:	897b      	ldrh	r3, [r7, #10]
 8003a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a8c:	e004      	b.n	8003a98 <HAL_I2C_IsDeviceReady+0x7c>
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a94:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fa35 	bl	8001f0c <HAL_GetTick>
 8003aa2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ad0:	e034      	b.n	8003b3c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d01a      	beq.n	8003b10 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7fe fa17 	bl	8001f0c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <HAL_I2C_IsDeviceReady+0xd4>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10f      	bne.n	8003b10 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e088      	b.n	8003c22 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <HAL_I2C_IsDeviceReady+0x12c>
 8003b42:	7fbb      	ldrb	r3, [r7, #30]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0c4      	beq.n	8003ad2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d01a      	beq.n	8003b8c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2120      	movs	r1, #32
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f886 	bl	8003c72 <I2C_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e058      	b.n	8003c22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2220      	movs	r2, #32
 8003b76:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e04a      	b.n	8003c22 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2120      	movs	r1, #32
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f86b 	bl	8003c72 <I2C_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e03d      	b.n	8003c22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2210      	movs	r2, #16
 8003bac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d118      	bne.n	8003bf0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bcc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f84a 	bl	8003c72 <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e01c      	b.n	8003c22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2220      	movs	r2, #32
 8003bee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	f63f af3b 	bhi.w	8003a76 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d103      	bne.n	8003c48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2200      	movs	r2, #0
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d007      	beq.n	8003c66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	619a      	str	r2, [r3, #24]
  }
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c82:	e022      	b.n	8003cca <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d01e      	beq.n	8003cca <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fe f93e 	bl	8001f0c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d113      	bne.n	8003cca <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f043 0220 	orr.w	r2, r3, #32
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d0cd      	beq.n	8003c84 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cfe:	e02c      	b.n	8003d5a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f8eb 	bl	8003ee0 <I2C_IsErrorOccurred>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e02a      	b.n	8003d6a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d01e      	beq.n	8003d5a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fe f8f6 	bl	8001f0c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d113      	bne.n	8003d5a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e007      	b.n	8003d6a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d1cb      	bne.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d7e:	e028      	b.n	8003dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f8ab 	bl	8003ee0 <I2C_IsErrorOccurred>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e026      	b.n	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d94:	f7fe f8ba 	bl	8001f0c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d302      	bcc.n	8003daa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d113      	bne.n	8003dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e007      	b.n	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d1cf      	bne.n	8003d80 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df8:	e064      	b.n	8003ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f86e 	bl	8003ee0 <I2C_IsErrorOccurred>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e062      	b.n	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d138      	bne.n	8003e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d105      	bne.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e04e      	b.n	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d107      	bne.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2210      	movs	r2, #16
 8003e4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
 8003e52:	e002      	b.n	8003e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003e6e:	400b      	ands	r3, r1
 8003e70:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fe f83d 	bl	8001f0c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10f      	bne.n	8003ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e007      	b.n	8003ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d193      	bne.n	8003dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	fe00e800 	.word	0xfe00e800

08003ee0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d075      	beq.n	8003ff8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2210      	movs	r2, #16
 8003f12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f14:	e056      	b.n	8003fc4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d052      	beq.n	8003fc4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f1e:	f7fd fff5 	bl	8001f0c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <I2C_IsErrorOccurred+0x54>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d147      	bne.n	8003fc4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f56:	d12e      	bne.n	8003fb6 <I2C_IsErrorOccurred+0xd6>
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f5e:	d02a      	beq.n	8003fb6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d027      	beq.n	8003fb6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f76:	f7fd ffc9 	bl	8001f0c <HAL_GetTick>
 8003f7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f7c:	e01b      	b.n	8003fb6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f7e:	f7fd ffc5 	bl	8001f0c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b19      	cmp	r3, #25
 8003f8a:	d914      	bls.n	8003fb6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d1dc      	bne.n	8003f7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d003      	beq.n	8003fda <I2C_IsErrorOccurred+0xfa>
 8003fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d09d      	beq.n	8003f16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800401a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f043 0308 	orr.w	r3, r3, #8
 8004032:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800403c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800405e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01c      	beq.n	80040a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fddb 	bl	8003c2a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <I2C_IsErrorOccurred+0x1d4>)
 8004080:	400b      	ands	r3, r1
 8004082:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	431a      	orrs	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80040a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3728      	adds	r7, #40	; 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	fe00e800 	.word	0xfe00e800

080040b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	817b      	strh	r3, [r7, #10]
 80040c6:	4613      	mov	r3, r2
 80040c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ca:	897b      	ldrh	r3, [r7, #10]
 80040cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040d0:	7a7b      	ldrb	r3, [r7, #9]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	0d5b      	lsrs	r3, r3, #21
 80040f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <I2C_TransferConfig+0x60>)
 80040f8:	430b      	orrs	r3, r1
 80040fa:	43db      	mvns	r3, r3
 80040fc:	ea02 0103 	and.w	r1, r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	03ff63ff 	.word	0x03ff63ff

0800411c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b20      	cmp	r3, #32
 8004130:	d138      	bne.n	80041a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800413c:	2302      	movs	r3, #2
 800413e:	e032      	b.n	80041a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2224      	movs	r2, #36	; 0x24
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800416e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6819      	ldr	r1, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d139      	bne.n	800423c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e033      	b.n	800423e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2224      	movs	r2, #36	; 0x24
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004204:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e000      	b.n	800423e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a04      	ldr	r2, [pc, #16]	; (8004268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40007000 	.word	0x40007000

0800426c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_PWREx_GetVoltageRange+0x18>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40007000 	.word	0x40007000

08004288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004296:	d130      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d038      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2232      	movs	r2, #50	; 0x32
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042cc:	e002      	b.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d102      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f2      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d110      	bne.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004306:	d007      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004310:	4a05      	ldr	r2, [pc, #20]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004316:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40007000 	.word	0x40007000
 800432c:	20000008 	.word	0x20000008
 8004330:	431bde83 	.word	0x431bde83

08004334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f000 bc02 	b.w	8004b4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004348:	4b96      	ldr	r3, [pc, #600]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004352:	4b94      	ldr	r3, [pc, #592]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80e4 	beq.w	8004532 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_RCC_OscConfig+0x4c>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	f040 808b 	bne.w	800448e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b01      	cmp	r3, #1
 800437c:	f040 8087 	bne.w	800448e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004380:	4b88      	ldr	r3, [pc, #544]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_OscConfig+0x64>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e3d9      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	4b81      	ldr	r3, [pc, #516]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_RCC_OscConfig+0x7e>
 80043a8:	4b7e      	ldr	r3, [pc, #504]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b0:	e005      	b.n	80043be <HAL_RCC_OscConfig+0x8a>
 80043b2:	4b7c      	ldr	r3, [pc, #496]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043be:	4293      	cmp	r3, r2
 80043c0:	d223      	bcs.n	800440a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fd8c 	bl	8004ee4 <RCC_SetFlashLatencyFromMSIRange>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e3ba      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d6:	4b73      	ldr	r3, [pc, #460]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a72      	ldr	r2, [pc, #456]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043dc:	f043 0308 	orr.w	r3, r3, #8
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b70      	ldr	r3, [pc, #448]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	496d      	ldr	r1, [pc, #436]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f4:	4b6b      	ldr	r3, [pc, #428]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	4968      	ldr	r1, [pc, #416]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
 8004408:	e025      	b.n	8004456 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440a:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a65      	ldr	r2, [pc, #404]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004410:	f043 0308 	orr.w	r3, r3, #8
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4960      	ldr	r1, [pc, #384]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004428:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	495b      	ldr	r1, [pc, #364]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fd4c 	bl	8004ee4 <RCC_SetFlashLatencyFromMSIRange>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e37a      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004456:	f000 fc81 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 800445a:	4602      	mov	r2, r0
 800445c:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	4950      	ldr	r1, [pc, #320]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004468:	5ccb      	ldrb	r3, [r1, r3]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	4a4e      	ldr	r2, [pc, #312]	; (80045ac <HAL_RCC_OscConfig+0x278>)
 8004474:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004476:	4b4e      	ldr	r3, [pc, #312]	; (80045b0 <HAL_RCC_OscConfig+0x27c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd fcf6 	bl	8001e6c <HAL_InitTick>
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d052      	beq.n	8004530 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	e35e      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d032      	beq.n	80044fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004496:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a42      	ldr	r2, [pc, #264]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a2:	f7fd fd33 	bl	8001f0c <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044aa:	f7fd fd2f 	bl	8001f0c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e347      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044c8:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a35      	ldr	r2, [pc, #212]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044ce:	f043 0308 	orr.w	r3, r3, #8
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b33      	ldr	r3, [pc, #204]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4930      	ldr	r1, [pc, #192]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044e6:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	492b      	ldr	r1, [pc, #172]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
 80044fa:	e01a      	b.n	8004532 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044fc:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004508:	f7fd fd00 	bl	8001f0c <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004510:	f7fd fcfc 	bl	8001f0c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e314      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004522:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x1dc>
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004530:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d073      	beq.n	8004626 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d005      	beq.n	8004550 <HAL_RCC_OscConfig+0x21c>
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d10e      	bne.n	8004568 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d10b      	bne.n	8004568 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d063      	beq.n	8004624 <HAL_RCC_OscConfig+0x2f0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d15f      	bne.n	8004624 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e2f1      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x24c>
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e025      	b.n	80045cc <HAL_RCC_OscConfig+0x298>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004588:	d114      	bne.n	80045b4 <HAL_RCC_OscConfig+0x280>
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a02      	ldr	r2, [pc, #8]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e013      	b.n	80045cc <HAL_RCC_OscConfig+0x298>
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08009314 	.word	0x08009314
 80045ac:	20000008 	.word	0x20000008
 80045b0:	2000000c 	.word	0x2000000c
 80045b4:	4ba0      	ldr	r3, [pc, #640]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a9f      	ldr	r2, [pc, #636]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4b9d      	ldr	r3, [pc, #628]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a9c      	ldr	r2, [pc, #624]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d013      	beq.n	80045fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fc9a 	bl	8001f0c <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fd fc96 	bl	8001f0c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e2ae      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ee:	4b92      	ldr	r3, [pc, #584]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x2a8>
 80045fa:	e014      	b.n	8004626 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fd fc86 	bl	8001f0c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004604:	f7fd fc82 	bl	8001f0c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e29a      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x2d0>
 8004622:	e000      	b.n	8004626 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d060      	beq.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d005      	beq.n	8004644 <HAL_RCC_OscConfig+0x310>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d119      	bne.n	8004672 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d116      	bne.n	8004672 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004644:	4b7c      	ldr	r3, [pc, #496]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x328>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e277      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	4973      	ldr	r1, [pc, #460]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004670:	e040      	b.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d023      	beq.n	80046c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467a:	4b6f      	ldr	r3, [pc, #444]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6e      	ldr	r2, [pc, #440]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004686:	f7fd fc41 	bl	8001f0c <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468e:	f7fd fc3d 	bl	8001f0c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e255      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a0:	4b65      	ldr	r3, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ac:	4b62      	ldr	r3, [pc, #392]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	495f      	ldr	r1, [pc, #380]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
 80046c0:	e018      	b.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c2:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a5c      	ldr	r2, [pc, #368]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd fc1d 	bl	8001f0c <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fd fc19 	bl	8001f0c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e231      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d03c      	beq.n	800477a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01c      	beq.n	8004742 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004708:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800470a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470e:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fd fbf8 	bl	8001f0c <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004720:	f7fd fbf4 	bl	8001f0c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e20c      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ef      	beq.n	8004720 <HAL_RCC_OscConfig+0x3ec>
 8004740:	e01b      	b.n	800477a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004742:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004748:	4a3b      	ldr	r2, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004752:	f7fd fbdb 	bl	8001f0c <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475a:	f7fd fbd7 	bl	8001f0c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e1ef      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800476c:	4b32      	ldr	r3, [pc, #200]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ef      	bne.n	800475a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80a6 	beq.w	80048d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800478c:	4b2a      	ldr	r3, [pc, #168]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10d      	bne.n	80047b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	4b27      	ldr	r3, [pc, #156]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	4a26      	ldr	r2, [pc, #152]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6593      	str	r3, [r2, #88]	; 0x58
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b0:	2301      	movs	r3, #1
 80047b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCC_OscConfig+0x508>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d118      	bne.n	80047f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCC_OscConfig+0x508>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <HAL_RCC_OscConfig+0x508>)
 80047c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047cc:	f7fd fb9e 	bl	8001f0c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d4:	f7fd fb9a 	bl	8001f0c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1b2      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <HAL_RCC_OscConfig+0x508>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d108      	bne.n	800480c <HAL_RCC_OscConfig+0x4d8>
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800480a:	e029      	b.n	8004860 <HAL_RCC_OscConfig+0x52c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b05      	cmp	r3, #5
 8004812:	d115      	bne.n	8004840 <HAL_RCC_OscConfig+0x50c>
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	4a07      	ldr	r2, [pc, #28]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	4a03      	ldr	r2, [pc, #12]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004834:	e014      	b.n	8004860 <HAL_RCC_OscConfig+0x52c>
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	40007000 	.word	0x40007000
 8004840:	4b9a      	ldr	r3, [pc, #616]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	4a99      	ldr	r2, [pc, #612]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004850:	4b96      	ldr	r3, [pc, #600]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	4a95      	ldr	r2, [pc, #596]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d016      	beq.n	8004896 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fd fb50 	bl	8001f0c <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486e:	e00a      	b.n	8004886 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fd fb4c 	bl	8001f0c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e162      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	4b89      	ldr	r3, [pc, #548]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ed      	beq.n	8004870 <HAL_RCC_OscConfig+0x53c>
 8004894:	e015      	b.n	80048c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fd fb39 	bl	8001f0c <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7fd fb35 	bl	8001f0c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e14b      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b4:	4b7d      	ldr	r3, [pc, #500]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ed      	bne.n	800489e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c2:	7ffb      	ldrb	r3, [r7, #31]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d105      	bne.n	80048d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c8:	4b78      	ldr	r3, [pc, #480]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	4a77      	ldr	r2, [pc, #476]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d03c      	beq.n	800495a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01c      	beq.n	8004922 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048e8:	4b70      	ldr	r3, [pc, #448]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ee:	4a6f      	ldr	r2, [pc, #444]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd fb08 	bl	8001f0c <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004900:	f7fd fb04 	bl	8001f0c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e11c      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004912:	4b66      	ldr	r3, [pc, #408]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ef      	beq.n	8004900 <HAL_RCC_OscConfig+0x5cc>
 8004920:	e01b      	b.n	800495a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004922:	4b62      	ldr	r3, [pc, #392]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004928:	4a60      	ldr	r2, [pc, #384]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fd faeb 	bl	8001f0c <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800493a:	f7fd fae7 	bl	8001f0c <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e0ff      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800494c:	4b57      	ldr	r3, [pc, #348]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 800494e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1ef      	bne.n	800493a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80f3 	beq.w	8004b4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	2b02      	cmp	r3, #2
 800496a:	f040 80c9 	bne.w	8004b00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800496e:	4b4f      	ldr	r3, [pc, #316]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 0203 	and.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	429a      	cmp	r2, r3
 8004980:	d12c      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	3b01      	subs	r3, #1
 800498e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d123      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d11b      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d113      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d109      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	3b01      	subs	r3, #1
 80049d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d06b      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d062      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049e2:	4b32      	ldr	r3, [pc, #200]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0ac      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049f2:	4b2e      	ldr	r3, [pc, #184]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2d      	ldr	r2, [pc, #180]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80049f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049fe:	f7fd fa85 	bl	8001f0c <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fd fa81 	bl	8001f0c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e099      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a18:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f0      	bne.n	8004a06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a24:	4b21      	ldr	r3, [pc, #132]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <HAL_RCC_OscConfig+0x77c>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a34:	3a01      	subs	r2, #1
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	4311      	orrs	r1, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a3e:	0212      	lsls	r2, r2, #8
 8004a40:	4311      	orrs	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a46:	0852      	lsrs	r2, r2, #1
 8004a48:	3a01      	subs	r2, #1
 8004a4a:	0552      	lsls	r2, r2, #21
 8004a4c:	4311      	orrs	r1, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a52:	0852      	lsrs	r2, r2, #1
 8004a54:	3a01      	subs	r2, #1
 8004a56:	0652      	lsls	r2, r2, #25
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a5e:	06d2      	lsls	r2, r2, #27
 8004a60:	430a      	orrs	r2, r1
 8004a62:	4912      	ldr	r1, [pc, #72]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a68:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0f      	ldr	r2, [pc, #60]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a80:	f7fd fa44 	bl	8001f0c <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fd fa40 	bl	8001f0c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e058      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aa6:	e050      	b.n	8004b4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e04f      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab4:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d144      	bne.n	8004b4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004acc:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ad8:	f7fd fa18 	bl	8001f0c <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd fa14 	bl	8001f0c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e02c      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af2:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x7ac>
 8004afe:	e024      	b.n	8004b4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	d01f      	beq.n	8004b46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b06:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fd f9fb 	bl	8001f0c <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fd f9f7 	bl	8001f0c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e00f      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	4905      	ldr	r1, [pc, #20]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCC_OscConfig+0x824>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	60cb      	str	r3, [r1, #12]
 8004b44:	e001      	b.n	8004b4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	feeefffc 	.word	0xfeeefffc

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0e7      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b75      	ldr	r3, [pc, #468]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d910      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b72      	ldr	r3, [pc, #456]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 0207 	bic.w	r2, r3, #7
 8004b86:	4970      	ldr	r1, [pc, #448]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b6e      	ldr	r3, [pc, #440]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0cf      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d010      	beq.n	8004bce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d908      	bls.n	8004bce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bbc:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4960      	ldr	r1, [pc, #384]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d04c      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	4b5a      	ldr	r3, [pc, #360]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d121      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0a6      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfa:	4b54      	ldr	r3, [pc, #336]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d115      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e09a      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c12:	4b4e      	ldr	r3, [pc, #312]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e08e      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c22:	4b4a      	ldr	r3, [pc, #296]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e086      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c32:	4b46      	ldr	r3, [pc, #280]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 0203 	bic.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4943      	ldr	r1, [pc, #268]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fd f962 	bl	8001f0c <HAL_GetTick>
 8004c48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4c:	f7fd f95e 	bl	8001f0c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e06e      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 020c 	and.w	r2, r3, #12
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1eb      	bne.n	8004c4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d010      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d208      	bcs.n	8004ca2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	492b      	ldr	r1, [pc, #172]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca2:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d210      	bcs.n	8004cd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 0207 	bic.w	r2, r3, #7
 8004cb8:	4923      	ldr	r1, [pc, #140]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc0:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d001      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e036      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cde:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	4918      	ldr	r1, [pc, #96]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfc:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4910      	ldr	r1, [pc, #64]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d10:	f000 f824 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	490b      	ldr	r1, [pc, #44]	; (8004d50 <HAL_RCC_ClockConfig+0x1f4>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1f8>)
 8004d2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1fc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd f899 	bl	8001e6c <HAL_InitTick>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40022000 	.word	0x40022000
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	08009314 	.word	0x08009314
 8004d54:	20000008 	.word	0x20000008
 8004d58:	2000000c 	.word	0x2000000c

08004d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b089      	sub	sp, #36	; 0x24
 8004d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	2300      	movs	r3, #0
 8004d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6a:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x34>
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d121      	bne.n	8004dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d11e      	bne.n	8004dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d90:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d9c:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e005      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dac:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004db8:	4a2b      	ldr	r2, [pc, #172]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d102      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e004      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004de0:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8004de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d134      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dea:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d003      	beq.n	8004e02 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0xac>
 8004e00:	e005      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8004e04:	617b      	str	r3, [r7, #20]
      break;
 8004e06:	e005      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e08:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e0a:	617b      	str	r3, [r7, #20]
      break;
 8004e0c:	e002      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	617b      	str	r3, [r7, #20]
      break;
 8004e12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	3301      	adds	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	fb03 f202 	mul.w	r2, r3, r2
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	0e5b      	lsrs	r3, r3, #25
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	3301      	adds	r3, #1
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e54:	69bb      	ldr	r3, [r7, #24]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3724      	adds	r7, #36	; 0x24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000
 8004e68:	0800932c 	.word	0x0800932c
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	007a1200 	.word	0x007a1200

08004e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000008 	.word	0x20000008

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4904      	ldr	r1, [pc, #16]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	08009324 	.word	0x08009324

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ebc:	f7ff ffda 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0adb      	lsrs	r3, r3, #11
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4904      	ldr	r1, [pc, #16]	; (8004ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	08009324 	.word	0x08009324

08004ee4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ef0:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004efc:	f7ff f9b6 	bl	800426c <HAL_PWREx_GetVoltageRange>
 8004f00:	6178      	str	r0, [r7, #20]
 8004f02:	e014      	b.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f10:	4b22      	ldr	r3, [pc, #136]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f1c:	f7ff f9a6 	bl	800426c <HAL_PWREx_GetVoltageRange>
 8004f20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f34:	d10b      	bne.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d919      	bls.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f40:	d902      	bls.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f42:	2302      	movs	r3, #2
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e013      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f48:	2301      	movs	r3, #1
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e010      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d902      	bls.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f54:	2303      	movs	r3, #3
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e00a      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d102      	bne.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f60:	2302      	movs	r3, #2
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e004      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b70      	cmp	r3, #112	; 0x70
 8004f6a:	d101      	bne.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 0207 	bic.w	r2, r3, #7
 8004f78:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d001      	beq.n	8004f92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40022000 	.word	0x40022000

08004fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fac:	2300      	movs	r3, #0
 8004fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d031      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fc8:	d01a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004fca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fce:	d814      	bhi.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd8:	d10f      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004fda:	4b5d      	ldr	r3, [pc, #372]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4a5c      	ldr	r2, [pc, #368]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe6:	e00c      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f9de 	bl	80053b0 <RCCEx_PLLSAI1_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff8:	e003      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005002:	7cfb      	ldrb	r3, [r7, #19]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005008:	4b51      	ldr	r3, [pc, #324]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	494e      	ldr	r1, [pc, #312]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800501e:	e001      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 809e 	beq.w	800516e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005036:	4b46      	ldr	r3, [pc, #280]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00d      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504c:	4b40      	ldr	r3, [pc, #256]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	4a3f      	ldr	r2, [pc, #252]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005056:	6593      	str	r3, [r2, #88]	; 0x58
 8005058:	4b3d      	ldr	r3, [pc, #244]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005064:	2301      	movs	r3, #1
 8005066:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005068:	4b3a      	ldr	r3, [pc, #232]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a39      	ldr	r2, [pc, #228]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800506e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005074:	f7fc ff4a 	bl	8001f0c <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800507a:	e009      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507c:	f7fc ff46 	bl	8001f0c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d902      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	74fb      	strb	r3, [r7, #19]
        break;
 800508e:	e005      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005090:	4b30      	ldr	r3, [pc, #192]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ef      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d15a      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050a2:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01e      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d019      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050ca:	4b21      	ldr	r3, [pc, #132]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050ea:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d016      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fc ff06 	bl	8001f0c <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005102:	e00b      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005104:	f7fc ff02 	bl	8001f0c <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d902      	bls.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	74fb      	strb	r3, [r7, #19]
            break;
 800511a:	e006      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ec      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513e:	4904      	ldr	r1, [pc, #16]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005146:	e009      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	74bb      	strb	r3, [r7, #18]
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800515c:	7c7b      	ldrb	r3, [r7, #17]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005162:	4b8a      	ldr	r3, [pc, #552]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	4a89      	ldr	r2, [pc, #548]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800517a:	4b84      	ldr	r3, [pc, #528]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005180:	f023 0203 	bic.w	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4980      	ldr	r1, [pc, #512]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800519c:	4b7b      	ldr	r3, [pc, #492]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f023 020c 	bic.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	4978      	ldr	r1, [pc, #480]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051be:	4b73      	ldr	r3, [pc, #460]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	496f      	ldr	r1, [pc, #444]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051e0:	4b6a      	ldr	r3, [pc, #424]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	4967      	ldr	r1, [pc, #412]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005202:	4b62      	ldr	r3, [pc, #392]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	495e      	ldr	r1, [pc, #376]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005224:	4b59      	ldr	r3, [pc, #356]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4956      	ldr	r1, [pc, #344]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005246:	4b51      	ldr	r3, [pc, #324]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	494d      	ldr	r1, [pc, #308]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d028      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005268:	4b48      	ldr	r3, [pc, #288]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	4945      	ldr	r1, [pc, #276]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005286:	d106      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005288:	4b40      	ldr	r3, [pc, #256]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a3f      	ldr	r2, [pc, #252]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800528e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005292:	60d3      	str	r3, [r2, #12]
 8005294:	e011      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800529e:	d10c      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f882 	bl	80053b0 <RCCEx_PLLSAI1_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d028      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c6:	4b31      	ldr	r3, [pc, #196]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d4:	492d      	ldr	r1, [pc, #180]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e4:	d106      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e6:	4b29      	ldr	r3, [pc, #164]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4a28      	ldr	r2, [pc, #160]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f0:	60d3      	str	r3, [r2, #12]
 80052f2:	e011      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052fc:	d10c      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3304      	adds	r3, #4
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f853 	bl	80053b0 <RCCEx_PLLSAI1_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01c      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005324:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005332:	4916      	ldr	r1, [pc, #88]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005342:	d10c      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	2102      	movs	r1, #2
 800534a:	4618      	mov	r0, r3
 800534c:	f000 f830 	bl	80053b0 <RCCEx_PLLSAI1_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800535a:	7cfb      	ldrb	r3, [r7, #19]
 800535c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800536a:	4b08      	ldr	r3, [pc, #32]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005378:	4904      	ldr	r1, [pc, #16]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005380:	7cbb      	ldrb	r3, [r7, #18]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000

08005390 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a04      	ldr	r2, [pc, #16]	; (80053ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000

080053b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053be:	4b74      	ldr	r3, [pc, #464]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053ca:	4b71      	ldr	r3, [pc, #452]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0203 	and.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d10d      	bne.n	80053f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
       ||
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053e2:	4b6b      	ldr	r3, [pc, #428]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
       ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d047      	beq.n	8005486 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
 80053fa:	e044      	b.n	8005486 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d018      	beq.n	8005436 <RCCEx_PLLSAI1_Config+0x86>
 8005404:	2b03      	cmp	r3, #3
 8005406:	d825      	bhi.n	8005454 <RCCEx_PLLSAI1_Config+0xa4>
 8005408:	2b01      	cmp	r3, #1
 800540a:	d002      	beq.n	8005412 <RCCEx_PLLSAI1_Config+0x62>
 800540c:	2b02      	cmp	r3, #2
 800540e:	d009      	beq.n	8005424 <RCCEx_PLLSAI1_Config+0x74>
 8005410:	e020      	b.n	8005454 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005412:	4b5f      	ldr	r3, [pc, #380]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d11d      	bne.n	800545a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005422:	e01a      	b.n	800545a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005424:	4b5a      	ldr	r3, [pc, #360]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d116      	bne.n	800545e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005434:	e013      	b.n	800545e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005436:	4b56      	ldr	r3, [pc, #344]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10f      	bne.n	8005462 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005442:	4b53      	ldr	r3, [pc, #332]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005452:	e006      	b.n	8005462 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      break;
 8005458:	e004      	b.n	8005464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005462:	bf00      	nop
    }

    if(status == HAL_OK)
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800546a:	4b49      	ldr	r3, [pc, #292]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	3b01      	subs	r3, #1
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	430b      	orrs	r3, r1
 8005480:	4943      	ldr	r1, [pc, #268]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005482:	4313      	orrs	r3, r2
 8005484:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d17c      	bne.n	8005586 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800548c:	4b40      	ldr	r3, [pc, #256]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a3f      	ldr	r2, [pc, #252]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005498:	f7fc fd38 	bl	8001f0c <HAL_GetTick>
 800549c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800549e:	e009      	b.n	80054b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054a0:	f7fc fd34 	bl	8001f0c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d902      	bls.n	80054b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	73fb      	strb	r3, [r7, #15]
        break;
 80054b2:	e005      	b.n	80054c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054b4:	4b36      	ldr	r3, [pc, #216]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ef      	bne.n	80054a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d15f      	bne.n	8005586 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d110      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054cc:	4b30      	ldr	r3, [pc, #192]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80054d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6892      	ldr	r2, [r2, #8]
 80054dc:	0211      	lsls	r1, r2, #8
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68d2      	ldr	r2, [r2, #12]
 80054e2:	06d2      	lsls	r2, r2, #27
 80054e4:	430a      	orrs	r2, r1
 80054e6:	492a      	ldr	r1, [pc, #168]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	610b      	str	r3, [r1, #16]
 80054ec:	e027      	b.n	800553e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d112      	bne.n	800551a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054f4:	4b26      	ldr	r3, [pc, #152]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6892      	ldr	r2, [r2, #8]
 8005504:	0211      	lsls	r1, r2, #8
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6912      	ldr	r2, [r2, #16]
 800550a:	0852      	lsrs	r2, r2, #1
 800550c:	3a01      	subs	r2, #1
 800550e:	0552      	lsls	r2, r2, #21
 8005510:	430a      	orrs	r2, r1
 8005512:	491f      	ldr	r1, [pc, #124]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005514:	4313      	orrs	r3, r2
 8005516:	610b      	str	r3, [r1, #16]
 8005518:	e011      	b.n	800553e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800551a:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005522:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6892      	ldr	r2, [r2, #8]
 800552a:	0211      	lsls	r1, r2, #8
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6952      	ldr	r2, [r2, #20]
 8005530:	0852      	lsrs	r2, r2, #1
 8005532:	3a01      	subs	r2, #1
 8005534:	0652      	lsls	r2, r2, #25
 8005536:	430a      	orrs	r2, r1
 8005538:	4915      	ldr	r1, [pc, #84]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800553a:	4313      	orrs	r3, r2
 800553c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800553e:	4b14      	ldr	r3, [pc, #80]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005544:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005548:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554a:	f7fc fcdf 	bl	8001f0c <HAL_GetTick>
 800554e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005550:	e009      	b.n	8005566 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005552:	f7fc fcdb 	bl	8001f0c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d902      	bls.n	8005566 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	73fb      	strb	r3, [r7, #15]
          break;
 8005564:	e005      	b.n	8005572 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0ef      	beq.n	8005552 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	4903      	ldr	r1, [pc, #12]	; (8005590 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40021000 	.word	0x40021000

08005594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e040      	b.n	8005628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc faaa 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	; 0x24
 80055c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f82c 	bl	8005630 <UART_SetConfig>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e022      	b.n	8005628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa4c 	bl	8005a88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800560e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fad3 	bl	8005bcc <UART_CheckIdleState>
 8005626:	4603      	mov	r3, r0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005634:	b08a      	sub	sp, #40	; 0x28
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	431a      	orrs	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	431a      	orrs	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	4313      	orrs	r3, r2
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4bb4      	ldr	r3, [pc, #720]	; (8005930 <UART_SetConfig+0x300>)
 8005660:	4013      	ands	r3, r2
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005668:	430b      	orrs	r3, r1
 800566a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4aa9      	ldr	r2, [pc, #676]	; (8005934 <UART_SetConfig+0x304>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005698:	4313      	orrs	r3, r2
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ac:	430a      	orrs	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4aa0      	ldr	r2, [pc, #640]	; (8005938 <UART_SetConfig+0x308>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d126      	bne.n	8005708 <UART_SetConfig+0xd8>
 80056ba:	4ba0      	ldr	r3, [pc, #640]	; (800593c <UART_SetConfig+0x30c>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d81b      	bhi.n	8005700 <UART_SetConfig+0xd0>
 80056c8:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <UART_SetConfig+0xa0>)
 80056ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ce:	bf00      	nop
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056f1 	.word	0x080056f1
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	080056f9 	.word	0x080056f9
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e080      	b.n	80057ea <UART_SetConfig+0x1ba>
 80056e8:	2302      	movs	r3, #2
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ee:	e07c      	b.n	80057ea <UART_SetConfig+0x1ba>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056f6:	e078      	b.n	80057ea <UART_SetConfig+0x1ba>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056fe:	e074      	b.n	80057ea <UART_SetConfig+0x1ba>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005706:	e070      	b.n	80057ea <UART_SetConfig+0x1ba>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a8c      	ldr	r2, [pc, #560]	; (8005940 <UART_SetConfig+0x310>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d138      	bne.n	8005784 <UART_SetConfig+0x154>
 8005712:	4b8a      	ldr	r3, [pc, #552]	; (800593c <UART_SetConfig+0x30c>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	2b0c      	cmp	r3, #12
 800571e:	d82d      	bhi.n	800577c <UART_SetConfig+0x14c>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0xf8>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	0800575d 	.word	0x0800575d
 800572c:	0800577d 	.word	0x0800577d
 8005730:	0800577d 	.word	0x0800577d
 8005734:	0800577d 	.word	0x0800577d
 8005738:	0800576d 	.word	0x0800576d
 800573c:	0800577d 	.word	0x0800577d
 8005740:	0800577d 	.word	0x0800577d
 8005744:	0800577d 	.word	0x0800577d
 8005748:	08005765 	.word	0x08005765
 800574c:	0800577d 	.word	0x0800577d
 8005750:	0800577d 	.word	0x0800577d
 8005754:	0800577d 	.word	0x0800577d
 8005758:	08005775 	.word	0x08005775
 800575c:	2300      	movs	r3, #0
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005762:	e042      	b.n	80057ea <UART_SetConfig+0x1ba>
 8005764:	2302      	movs	r3, #2
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576a:	e03e      	b.n	80057ea <UART_SetConfig+0x1ba>
 800576c:	2304      	movs	r3, #4
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005772:	e03a      	b.n	80057ea <UART_SetConfig+0x1ba>
 8005774:	2308      	movs	r3, #8
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577a:	e036      	b.n	80057ea <UART_SetConfig+0x1ba>
 800577c:	2310      	movs	r3, #16
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005782:	e032      	b.n	80057ea <UART_SetConfig+0x1ba>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a6a      	ldr	r2, [pc, #424]	; (8005934 <UART_SetConfig+0x304>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d12a      	bne.n	80057e4 <UART_SetConfig+0x1b4>
 800578e:	4b6b      	ldr	r3, [pc, #428]	; (800593c <UART_SetConfig+0x30c>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005794:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005798:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800579c:	d01a      	beq.n	80057d4 <UART_SetConfig+0x1a4>
 800579e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057a2:	d81b      	bhi.n	80057dc <UART_SetConfig+0x1ac>
 80057a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a8:	d00c      	beq.n	80057c4 <UART_SetConfig+0x194>
 80057aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ae:	d815      	bhi.n	80057dc <UART_SetConfig+0x1ac>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <UART_SetConfig+0x18c>
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b8:	d008      	beq.n	80057cc <UART_SetConfig+0x19c>
 80057ba:	e00f      	b.n	80057dc <UART_SetConfig+0x1ac>
 80057bc:	2300      	movs	r3, #0
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c2:	e012      	b.n	80057ea <UART_SetConfig+0x1ba>
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ca:	e00e      	b.n	80057ea <UART_SetConfig+0x1ba>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d2:	e00a      	b.n	80057ea <UART_SetConfig+0x1ba>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e006      	b.n	80057ea <UART_SetConfig+0x1ba>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e002      	b.n	80057ea <UART_SetConfig+0x1ba>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a51      	ldr	r2, [pc, #324]	; (8005934 <UART_SetConfig+0x304>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d17a      	bne.n	80058ea <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d824      	bhi.n	8005846 <UART_SetConfig+0x216>
 80057fc:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <UART_SetConfig+0x1d4>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005829 	.word	0x08005829
 8005808:	08005847 	.word	0x08005847
 800580c:	08005831 	.word	0x08005831
 8005810:	08005847 	.word	0x08005847
 8005814:	08005837 	.word	0x08005837
 8005818:	08005847 	.word	0x08005847
 800581c:	08005847 	.word	0x08005847
 8005820:	08005847 	.word	0x08005847
 8005824:	0800583f 	.word	0x0800583f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7ff fb30 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 800582c:	61f8      	str	r0, [r7, #28]
        break;
 800582e:	e010      	b.n	8005852 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005830:	4b44      	ldr	r3, [pc, #272]	; (8005944 <UART_SetConfig+0x314>)
 8005832:	61fb      	str	r3, [r7, #28]
        break;
 8005834:	e00d      	b.n	8005852 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005836:	f7ff fa91 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 800583a:	61f8      	str	r0, [r7, #28]
        break;
 800583c:	e009      	b.n	8005852 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005842:	61fb      	str	r3, [r7, #28]
        break;
 8005844:	e005      	b.n	8005852 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005850:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 8107 	beq.w	8005a68 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	429a      	cmp	r2, r3
 8005868:	d305      	bcc.n	8005876 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	429a      	cmp	r2, r3
 8005874:	d903      	bls.n	800587e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800587c:	e0f4      	b.n	8005a68 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2200      	movs	r2, #0
 8005882:	461c      	mov	r4, r3
 8005884:	4615      	mov	r5, r2
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	022b      	lsls	r3, r5, #8
 8005890:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005894:	0222      	lsls	r2, r4, #8
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	6849      	ldr	r1, [r1, #4]
 800589a:	0849      	lsrs	r1, r1, #1
 800589c:	2000      	movs	r0, #0
 800589e:	4688      	mov	r8, r1
 80058a0:	4681      	mov	r9, r0
 80058a2:	eb12 0a08 	adds.w	sl, r2, r8
 80058a6:	eb43 0b09 	adc.w	fp, r3, r9
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	603b      	str	r3, [r7, #0]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b8:	4650      	mov	r0, sl
 80058ba:	4659      	mov	r1, fp
 80058bc:	f7fb f956 	bl	8000b6c <__aeabi_uldivmod>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4613      	mov	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ce:	d308      	bcc.n	80058e2 <UART_SetConfig+0x2b2>
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058d6:	d204      	bcs.n	80058e2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	60da      	str	r2, [r3, #12]
 80058e0:	e0c2      	b.n	8005a68 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058e8:	e0be      	b.n	8005a68 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f2:	d16a      	bne.n	80059ca <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80058f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d834      	bhi.n	8005966 <UART_SetConfig+0x336>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x2d4>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005929 	.word	0x08005929
 8005908:	08005949 	.word	0x08005949
 800590c:	08005951 	.word	0x08005951
 8005910:	08005967 	.word	0x08005967
 8005914:	08005957 	.word	0x08005957
 8005918:	08005967 	.word	0x08005967
 800591c:	08005967 	.word	0x08005967
 8005920:	08005967 	.word	0x08005967
 8005924:	0800595f 	.word	0x0800595f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005928:	f7ff fab0 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 800592c:	61f8      	str	r0, [r7, #28]
        break;
 800592e:	e020      	b.n	8005972 <UART_SetConfig+0x342>
 8005930:	efff69f3 	.word	0xefff69f3
 8005934:	40008000 	.word	0x40008000
 8005938:	40013800 	.word	0x40013800
 800593c:	40021000 	.word	0x40021000
 8005940:	40004400 	.word	0x40004400
 8005944:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005948:	f7ff fab6 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 800594c:	61f8      	str	r0, [r7, #28]
        break;
 800594e:	e010      	b.n	8005972 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005950:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <UART_SetConfig+0x454>)
 8005952:	61fb      	str	r3, [r7, #28]
        break;
 8005954:	e00d      	b.n	8005972 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005956:	f7ff fa01 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 800595a:	61f8      	str	r0, [r7, #28]
        break;
 800595c:	e009      	b.n	8005972 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800595e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005962:	61fb      	str	r3, [r7, #28]
        break;
 8005964:	e005      	b.n	8005972 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005970:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d077      	beq.n	8005a68 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	005a      	lsls	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	441a      	add	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d916      	bls.n	80059c2 <UART_SetConfig+0x392>
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599a:	d212      	bcs.n	80059c2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f023 030f 	bic.w	r3, r3, #15
 80059a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	8afb      	ldrh	r3, [r7, #22]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	8afa      	ldrh	r2, [r7, #22]
 80059be:	60da      	str	r2, [r3, #12]
 80059c0:	e052      	b.n	8005a68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059c8:	e04e      	b.n	8005a68 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d827      	bhi.n	8005a22 <UART_SetConfig+0x3f2>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <UART_SetConfig+0x3a8>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	08005a23 	.word	0x08005a23
 80059e8:	08005a13 	.word	0x08005a13
 80059ec:	08005a23 	.word	0x08005a23
 80059f0:	08005a23 	.word	0x08005a23
 80059f4:	08005a23 	.word	0x08005a23
 80059f8:	08005a1b 	.word	0x08005a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fc:	f7ff fa46 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8005a00:	61f8      	str	r0, [r7, #28]
        break;
 8005a02:	e014      	b.n	8005a2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a04:	f7ff fa58 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8005a08:	61f8      	str	r0, [r7, #28]
        break;
 8005a0a:	e010      	b.n	8005a2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a0c:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <UART_SetConfig+0x454>)
 8005a0e:	61fb      	str	r3, [r7, #28]
        break;
 8005a10:	e00d      	b.n	8005a2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a12:	f7ff f9a3 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8005a16:	61f8      	str	r0, [r7, #28]
        break;
 8005a18:	e009      	b.n	8005a2e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a1e:	61fb      	str	r3, [r7, #28]
        break;
 8005a20:	e005      	b.n	8005a2e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a2c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d019      	beq.n	8005a68 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	085a      	lsrs	r2, r3, #1
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	441a      	add	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b0f      	cmp	r3, #15
 8005a4c:	d909      	bls.n	8005a62 <UART_SetConfig+0x432>
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a54:	d205      	bcs.n	8005a62 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60da      	str	r2, [r3, #12]
 8005a60:	e002      	b.n	8005a68 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3728      	adds	r7, #40	; 0x28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a82:	bf00      	nop
 8005a84:	00f42400 	.word	0x00f42400

08005a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01a      	beq.n	8005b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b86:	d10a      	bne.n	8005b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bdc:	f7fc f996 	bl	8001f0c <HAL_GetTick>
 8005be0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d10e      	bne.n	8005c0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f82d 	bl	8005c5e <UART_WaitOnFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e023      	b.n	8005c56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d10e      	bne.n	8005c3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f817 	bl	8005c5e <UART_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e00d      	b.n	8005c56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b09c      	sub	sp, #112	; 0x70
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6e:	e0a5      	b.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	f000 80a1 	beq.w	8005dbc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fc f947 	bl	8001f0c <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d13e      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e6      	bne.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	f023 0301 	bic.w	r3, r3, #1
 8005cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3308      	adds	r3, #8
 8005ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ce2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ce4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e067      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d04f      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d2a:	d147      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d34:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
 8005d56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e6      	bne.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	613b      	str	r3, [r7, #16]
   return(result);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f023 0301 	bic.w	r3, r3, #1
 8005d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3308      	adds	r3, #8
 8005d86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d88:	623a      	str	r2, [r7, #32]
 8005d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	69f9      	ldr	r1, [r7, #28]
 8005d8e:	6a3a      	ldr	r2, [r7, #32]
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e010      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69da      	ldr	r2, [r3, #28]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f43f af4a 	beq.w	8005c70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3770      	adds	r7, #112	; 0x70
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <gcvt>:
 8005de8:	b530      	push	{r4, r5, lr}
 8005dea:	2200      	movs	r2, #0
 8005dec:	b085      	sub	sp, #20
 8005dee:	460c      	mov	r4, r1
 8005df0:	4605      	mov	r5, r0
 8005df2:	2300      	movs	r3, #0
 8005df4:	ec51 0b10 	vmov	r0, r1, d0
 8005df8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005dfc:	f7fa fe66 	bl	8000acc <__aeabi_dcmplt>
 8005e00:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005e04:	4622      	mov	r2, r4
 8005e06:	b118      	cbz	r0, 8005e10 <gcvt+0x28>
 8005e08:	232d      	movs	r3, #45	; 0x2d
 8005e0a:	f802 3b01 	strb.w	r3, [r2], #1
 8005e0e:	3d01      	subs	r5, #1
 8005e10:	2300      	movs	r3, #0
 8005e12:	4806      	ldr	r0, [pc, #24]	; (8005e2c <gcvt+0x44>)
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	4629      	mov	r1, r5
 8005e18:	2367      	movs	r3, #103	; 0x67
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	f000 f8b4 	bl	8005f88 <_gcvt>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	bf14      	ite	ne
 8005e24:	4620      	movne	r0, r4
 8005e26:	2000      	moveq	r0, #0
 8005e28:	b005      	add	sp, #20
 8005e2a:	bd30      	pop	{r4, r5, pc}
 8005e2c:	20000014 	.word	0x20000014

08005e30 <__errno>:
 8005e30:	4b01      	ldr	r3, [pc, #4]	; (8005e38 <__errno+0x8>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000014 	.word	0x20000014

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4d0d      	ldr	r5, [pc, #52]	; (8005e74 <__libc_init_array+0x38>)
 8005e40:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e42:	1b64      	subs	r4, r4, r5
 8005e44:	10a4      	asrs	r4, r4, #2
 8005e46:	2600      	movs	r6, #0
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	4d0b      	ldr	r5, [pc, #44]	; (8005e7c <__libc_init_array+0x40>)
 8005e4e:	4c0c      	ldr	r4, [pc, #48]	; (8005e80 <__libc_init_array+0x44>)
 8005e50:	f002 fb9e 	bl	8008590 <_init>
 8005e54:	1b64      	subs	r4, r4, r5
 8005e56:	10a4      	asrs	r4, r4, #2
 8005e58:	2600      	movs	r6, #0
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	08009628 	.word	0x08009628
 8005e78:	08009628 	.word	0x08009628
 8005e7c:	08009628 	.word	0x08009628
 8005e80:	0800962c 	.word	0x0800962c

08005e84 <memset>:
 8005e84:	4402      	add	r2, r0
 8005e86:	4603      	mov	r3, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <print_e>:
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	b087      	sub	sp, #28
 8005e98:	ec43 2b10 	vmov	d0, r2, r3
 8005e9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005e9e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8005ea2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005ea4:	ab04      	add	r3, sp, #16
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	ab03      	add	r3, sp, #12
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	1c62      	adds	r2, r4, #1
 8005eae:	ab05      	add	r3, sp, #20
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	f000 fe38 	bl	8006b28 <_dtoa_r>
 8005eb8:	9a05      	ldr	r2, [sp, #20]
 8005eba:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d105      	bne.n	8005ece <print_e+0x3a>
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f000 fd7b 	bl	80069c0 <strcpy>
 8005eca:	b007      	add	sp, #28
 8005ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ece:	463b      	mov	r3, r7
 8005ed0:	7801      	ldrb	r1, [r0, #0]
 8005ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed6:	2c00      	cmp	r4, #0
 8005ed8:	bfc8      	it	gt
 8005eda:	2501      	movgt	r5, #1
 8005edc:	212e      	movs	r1, #46	; 0x2e
 8005ede:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8005ee2:	b10f      	cbz	r7, 8005ee8 <print_e+0x54>
 8005ee4:	2c00      	cmp	r4, #0
 8005ee6:	dc37      	bgt.n	8005f58 <print_e+0xc4>
 8005ee8:	2e67      	cmp	r6, #103	; 0x67
 8005eea:	d046      	beq.n	8005f7a <print_e+0xe6>
 8005eec:	2e47      	cmp	r6, #71	; 0x47
 8005eee:	d046      	beq.n	8005f7e <print_e+0xea>
 8005ef0:	212e      	movs	r1, #46	; 0x2e
 8005ef2:	2030      	movs	r0, #48	; 0x30
 8005ef4:	2c00      	cmp	r4, #0
 8005ef6:	dc38      	bgt.n	8005f6a <print_e+0xd6>
 8005ef8:	1e51      	subs	r1, r2, #1
 8005efa:	2900      	cmp	r1, #0
 8005efc:	bfb8      	it	lt
 8005efe:	f1c2 0201 	rsblt	r2, r2, #1
 8005f02:	4618      	mov	r0, r3
 8005f04:	9105      	str	r1, [sp, #20]
 8005f06:	bfac      	ite	ge
 8005f08:	222b      	movge	r2, #43	; 0x2b
 8005f0a:	9205      	strlt	r2, [sp, #20]
 8005f0c:	f800 6b02 	strb.w	r6, [r0], #2
 8005f10:	bfa8      	it	ge
 8005f12:	705a      	strbge	r2, [r3, #1]
 8005f14:	9a05      	ldr	r2, [sp, #20]
 8005f16:	bfbc      	itt	lt
 8005f18:	212d      	movlt	r1, #45	; 0x2d
 8005f1a:	7059      	strblt	r1, [r3, #1]
 8005f1c:	2a63      	cmp	r2, #99	; 0x63
 8005f1e:	dd0b      	ble.n	8005f38 <print_e+0xa4>
 8005f20:	2164      	movs	r1, #100	; 0x64
 8005f22:	fb92 f1f1 	sdiv	r1, r2, r1
 8005f26:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005f2a:	1cd8      	adds	r0, r3, #3
 8005f2c:	709c      	strb	r4, [r3, #2]
 8005f2e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005f32:	fb03 2201 	mla	r2, r3, r1, r2
 8005f36:	9205      	str	r2, [sp, #20]
 8005f38:	9b05      	ldr	r3, [sp, #20]
 8005f3a:	220a      	movs	r2, #10
 8005f3c:	fb93 f2f2 	sdiv	r2, r3, r2
 8005f40:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8005f44:	7001      	strb	r1, [r0, #0]
 8005f46:	f06f 0109 	mvn.w	r1, #9
 8005f4a:	fb01 3302 	mla	r3, r1, r2, r3
 8005f4e:	3330      	adds	r3, #48	; 0x30
 8005f50:	7043      	strb	r3, [r0, #1]
 8005f52:	2300      	movs	r3, #0
 8005f54:	7083      	strb	r3, [r0, #2]
 8005f56:	e7b8      	b.n	8005eca <print_e+0x36>
 8005f58:	b10d      	cbz	r5, 8005f5e <print_e+0xca>
 8005f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f5e:	7805      	ldrb	r5, [r0, #0]
 8005f60:	f803 5b01 	strb.w	r5, [r3], #1
 8005f64:	3c01      	subs	r4, #1
 8005f66:	2500      	movs	r5, #0
 8005f68:	e7b9      	b.n	8005ede <print_e+0x4a>
 8005f6a:	b10d      	cbz	r5, 8005f70 <print_e+0xdc>
 8005f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f70:	f803 0b01 	strb.w	r0, [r3], #1
 8005f74:	3c01      	subs	r4, #1
 8005f76:	2500      	movs	r5, #0
 8005f78:	e7bc      	b.n	8005ef4 <print_e+0x60>
 8005f7a:	2665      	movs	r6, #101	; 0x65
 8005f7c:	e7bc      	b.n	8005ef8 <print_e+0x64>
 8005f7e:	2645      	movs	r6, #69	; 0x45
 8005f80:	e7ba      	b.n	8005ef8 <print_e+0x64>
 8005f82:	0000      	movs	r0, r0
 8005f84:	0000      	movs	r0, r0
	...

08005f88 <_gcvt>:
 8005f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	ec55 4b10 	vmov	r4, r5, d0
 8005f90:	b088      	sub	sp, #32
 8005f92:	4681      	mov	r9, r0
 8005f94:	4688      	mov	r8, r1
 8005f96:	4616      	mov	r6, r2
 8005f98:	469a      	mov	sl, r3
 8005f9a:	ee10 0a10 	vmov	r0, s0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005fa6:	f7fa fd91 	bl	8000acc <__aeabi_dcmplt>
 8005faa:	b110      	cbz	r0, 8005fb2 <_gcvt+0x2a>
 8005fac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005fb0:	461d      	mov	r5, r3
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	f7fa fd7d 	bl	8000ab8 <__aeabi_dcmpeq>
 8005fbe:	b138      	cbz	r0, 8005fd0 <_gcvt+0x48>
 8005fc0:	2330      	movs	r3, #48	; 0x30
 8005fc2:	7033      	strb	r3, [r6, #0]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	7073      	strb	r3, [r6, #1]
 8005fc8:	4630      	mov	r0, r6
 8005fca:	b008      	add	sp, #32
 8005fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd0:	a34b      	add	r3, pc, #300	; (adr r3, 8006100 <_gcvt+0x178>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa fd81 	bl	8000ae0 <__aeabi_dcmple>
 8005fde:	b158      	cbz	r0, 8005ff8 <_gcvt+0x70>
 8005fe0:	f108 31ff 	add.w	r1, r8, #4294967295
 8005fe4:	9100      	str	r1, [sp, #0]
 8005fe6:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005fea:	4622      	mov	r2, r4
 8005fec:	462b      	mov	r3, r5
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4648      	mov	r0, r9
 8005ff2:	f7ff ff4f 	bl	8005e94 <print_e>
 8005ff6:	e7e7      	b.n	8005fc8 <_gcvt+0x40>
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	f000 fc09 	bl	8006810 <_mprec_log10>
 8005ffe:	4622      	mov	r2, r4
 8006000:	ec51 0b10 	vmov	r0, r1, d0
 8006004:	462b      	mov	r3, r5
 8006006:	f7fa fd6b 	bl	8000ae0 <__aeabi_dcmple>
 800600a:	2800      	cmp	r0, #0
 800600c:	d1e8      	bne.n	8005fe0 <_gcvt+0x58>
 800600e:	ab07      	add	r3, sp, #28
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	ab06      	add	r3, sp, #24
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	4642      	mov	r2, r8
 8006018:	ab05      	add	r3, sp, #20
 800601a:	ec45 4b10 	vmov	d0, r4, r5
 800601e:	2102      	movs	r1, #2
 8006020:	4648      	mov	r0, r9
 8006022:	f000 fd81 	bl	8006b28 <_dtoa_r>
 8006026:	9a05      	ldr	r2, [sp, #20]
 8006028:	f242 730f 	movw	r3, #9999	; 0x270f
 800602c:	429a      	cmp	r2, r3
 800602e:	d00e      	beq.n	800604e <_gcvt+0xc6>
 8006030:	4633      	mov	r3, r6
 8006032:	44b0      	add	r8, r6
 8006034:	4605      	mov	r5, r0
 8006036:	f810 1b01 	ldrb.w	r1, [r0], #1
 800603a:	9c05      	ldr	r4, [sp, #20]
 800603c:	eba8 0203 	sub.w	r2, r8, r3
 8006040:	b109      	cbz	r1, 8006046 <_gcvt+0xbe>
 8006042:	2c00      	cmp	r4, #0
 8006044:	dc08      	bgt.n	8006058 <_gcvt+0xd0>
 8006046:	2100      	movs	r1, #0
 8006048:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800604c:	e00d      	b.n	800606a <_gcvt+0xe2>
 800604e:	4601      	mov	r1, r0
 8006050:	4630      	mov	r0, r6
 8006052:	f000 fcb5 	bl	80069c0 <strcpy>
 8006056:	e7b7      	b.n	8005fc8 <_gcvt+0x40>
 8006058:	3c01      	subs	r4, #1
 800605a:	f803 1b01 	strb.w	r1, [r3], #1
 800605e:	9405      	str	r4, [sp, #20]
 8006060:	e7e8      	b.n	8006034 <_gcvt+0xac>
 8006062:	f803 cb01 	strb.w	ip, [r3], #1
 8006066:	3a01      	subs	r2, #1
 8006068:	2101      	movs	r1, #1
 800606a:	2c00      	cmp	r4, #0
 800606c:	4620      	mov	r0, r4
 800606e:	dc2a      	bgt.n	80060c6 <_gcvt+0x13e>
 8006070:	b101      	cbz	r1, 8006074 <_gcvt+0xec>
 8006072:	9405      	str	r4, [sp, #20]
 8006074:	b90f      	cbnz	r7, 800607a <_gcvt+0xf2>
 8006076:	7829      	ldrb	r1, [r5, #0]
 8006078:	b311      	cbz	r1, 80060c0 <_gcvt+0x138>
 800607a:	42b3      	cmp	r3, r6
 800607c:	bf04      	itt	eq
 800607e:	2130      	moveq	r1, #48	; 0x30
 8006080:	f803 1b01 	strbeq.w	r1, [r3], #1
 8006084:	212e      	movs	r1, #46	; 0x2e
 8006086:	7019      	strb	r1, [r3, #0]
 8006088:	9905      	ldr	r1, [sp, #20]
 800608a:	4618      	mov	r0, r3
 800608c:	2400      	movs	r4, #0
 800608e:	eba1 0c03 	sub.w	ip, r1, r3
 8006092:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006096:	eb1c 0f00 	cmn.w	ip, r0
 800609a:	d41c      	bmi.n	80060d6 <_gcvt+0x14e>
 800609c:	2900      	cmp	r1, #0
 800609e:	f1c1 0000 	rsb	r0, r1, #0
 80060a2:	bfc8      	it	gt
 80060a4:	2000      	movgt	r0, #0
 80060a6:	f100 0c01 	add.w	ip, r0, #1
 80060aa:	4463      	add	r3, ip
 80060ac:	4401      	add	r1, r0
 80060ae:	b104      	cbz	r4, 80060b2 <_gcvt+0x12a>
 80060b0:	9105      	str	r1, [sp, #20]
 80060b2:	1e69      	subs	r1, r5, #1
 80060b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80060b8:	b108      	cbz	r0, 80060be <_gcvt+0x136>
 80060ba:	2a00      	cmp	r2, #0
 80060bc:	dc0f      	bgt.n	80060de <_gcvt+0x156>
 80060be:	b9df      	cbnz	r7, 80060f8 <_gcvt+0x170>
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e780      	b.n	8005fc8 <_gcvt+0x40>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80060cc:	dcc9      	bgt.n	8006062 <_gcvt+0xda>
 80060ce:	2900      	cmp	r1, #0
 80060d0:	d0d0      	beq.n	8006074 <_gcvt+0xec>
 80060d2:	9005      	str	r0, [sp, #20]
 80060d4:	e7ce      	b.n	8006074 <_gcvt+0xec>
 80060d6:	f800 ef01 	strb.w	lr, [r0, #1]!
 80060da:	2401      	movs	r4, #1
 80060dc:	e7db      	b.n	8006096 <_gcvt+0x10e>
 80060de:	f803 0b01 	strb.w	r0, [r3], #1
 80060e2:	3a01      	subs	r2, #1
 80060e4:	e7e6      	b.n	80060b4 <_gcvt+0x12c>
 80060e6:	f801 5b01 	strb.w	r5, [r1], #1
 80060ea:	1a60      	subs	r0, r4, r1
 80060ec:	2800      	cmp	r0, #0
 80060ee:	dcfa      	bgt.n	80060e6 <_gcvt+0x15e>
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	bfa8      	it	ge
 80060f4:	189b      	addge	r3, r3, r2
 80060f6:	e7e3      	b.n	80060c0 <_gcvt+0x138>
 80060f8:	4619      	mov	r1, r3
 80060fa:	189c      	adds	r4, r3, r2
 80060fc:	2530      	movs	r5, #48	; 0x30
 80060fe:	e7f4      	b.n	80060ea <_gcvt+0x162>
 8006100:	eb1c432d 	.word	0xeb1c432d
 8006104:	3f1a36e2 	.word	0x3f1a36e2

08006108 <_Balloc>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800610c:	4604      	mov	r4, r0
 800610e:	460d      	mov	r5, r1
 8006110:	b976      	cbnz	r6, 8006130 <_Balloc+0x28>
 8006112:	2010      	movs	r0, #16
 8006114:	f001 fb08 	bl	8007728 <malloc>
 8006118:	4602      	mov	r2, r0
 800611a:	6260      	str	r0, [r4, #36]	; 0x24
 800611c:	b920      	cbnz	r0, 8006128 <_Balloc+0x20>
 800611e:	4b18      	ldr	r3, [pc, #96]	; (8006180 <_Balloc+0x78>)
 8006120:	4818      	ldr	r0, [pc, #96]	; (8006184 <_Balloc+0x7c>)
 8006122:	2166      	movs	r1, #102	; 0x66
 8006124:	f000 fc54 	bl	80069d0 <__assert_func>
 8006128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800612c:	6006      	str	r6, [r0, #0]
 800612e:	60c6      	str	r6, [r0, #12]
 8006130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006132:	68f3      	ldr	r3, [r6, #12]
 8006134:	b183      	cbz	r3, 8006158 <_Balloc+0x50>
 8006136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800613e:	b9b8      	cbnz	r0, 8006170 <_Balloc+0x68>
 8006140:	2101      	movs	r1, #1
 8006142:	fa01 f605 	lsl.w	r6, r1, r5
 8006146:	1d72      	adds	r2, r6, #5
 8006148:	0092      	lsls	r2, r2, #2
 800614a:	4620      	mov	r0, r4
 800614c:	f000 fb7e 	bl	800684c <_calloc_r>
 8006150:	b160      	cbz	r0, 800616c <_Balloc+0x64>
 8006152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006156:	e00e      	b.n	8006176 <_Balloc+0x6e>
 8006158:	2221      	movs	r2, #33	; 0x21
 800615a:	2104      	movs	r1, #4
 800615c:	4620      	mov	r0, r4
 800615e:	f000 fb75 	bl	800684c <_calloc_r>
 8006162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006164:	60f0      	str	r0, [r6, #12]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e4      	bne.n	8006136 <_Balloc+0x2e>
 800616c:	2000      	movs	r0, #0
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	6802      	ldr	r2, [r0, #0]
 8006172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006176:	2300      	movs	r3, #0
 8006178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800617c:	e7f7      	b.n	800616e <_Balloc+0x66>
 800617e:	bf00      	nop
 8006180:	08009360 	.word	0x08009360
 8006184:	08009377 	.word	0x08009377

08006188 <_Bfree>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
 8006190:	b976      	cbnz	r6, 80061b0 <_Bfree+0x28>
 8006192:	2010      	movs	r0, #16
 8006194:	f001 fac8 	bl	8007728 <malloc>
 8006198:	4602      	mov	r2, r0
 800619a:	6268      	str	r0, [r5, #36]	; 0x24
 800619c:	b920      	cbnz	r0, 80061a8 <_Bfree+0x20>
 800619e:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <_Bfree+0x3c>)
 80061a0:	4809      	ldr	r0, [pc, #36]	; (80061c8 <_Bfree+0x40>)
 80061a2:	218a      	movs	r1, #138	; 0x8a
 80061a4:	f000 fc14 	bl	80069d0 <__assert_func>
 80061a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061ac:	6006      	str	r6, [r0, #0]
 80061ae:	60c6      	str	r6, [r0, #12]
 80061b0:	b13c      	cbz	r4, 80061c2 <_Bfree+0x3a>
 80061b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061b4:	6862      	ldr	r2, [r4, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061bc:	6021      	str	r1, [r4, #0]
 80061be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	08009360 	.word	0x08009360
 80061c8:	08009377 	.word	0x08009377

080061cc <__multadd>:
 80061cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d0:	690d      	ldr	r5, [r1, #16]
 80061d2:	4607      	mov	r7, r0
 80061d4:	460c      	mov	r4, r1
 80061d6:	461e      	mov	r6, r3
 80061d8:	f101 0c14 	add.w	ip, r1, #20
 80061dc:	2000      	movs	r0, #0
 80061de:	f8dc 3000 	ldr.w	r3, [ip]
 80061e2:	b299      	uxth	r1, r3
 80061e4:	fb02 6101 	mla	r1, r2, r1, r6
 80061e8:	0c1e      	lsrs	r6, r3, #16
 80061ea:	0c0b      	lsrs	r3, r1, #16
 80061ec:	fb02 3306 	mla	r3, r2, r6, r3
 80061f0:	b289      	uxth	r1, r1
 80061f2:	3001      	adds	r0, #1
 80061f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061f8:	4285      	cmp	r5, r0
 80061fa:	f84c 1b04 	str.w	r1, [ip], #4
 80061fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006202:	dcec      	bgt.n	80061de <__multadd+0x12>
 8006204:	b30e      	cbz	r6, 800624a <__multadd+0x7e>
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	42ab      	cmp	r3, r5
 800620a:	dc19      	bgt.n	8006240 <__multadd+0x74>
 800620c:	6861      	ldr	r1, [r4, #4]
 800620e:	4638      	mov	r0, r7
 8006210:	3101      	adds	r1, #1
 8006212:	f7ff ff79 	bl	8006108 <_Balloc>
 8006216:	4680      	mov	r8, r0
 8006218:	b928      	cbnz	r0, 8006226 <__multadd+0x5a>
 800621a:	4602      	mov	r2, r0
 800621c:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <__multadd+0x84>)
 800621e:	480d      	ldr	r0, [pc, #52]	; (8006254 <__multadd+0x88>)
 8006220:	21b5      	movs	r1, #181	; 0xb5
 8006222:	f000 fbd5 	bl	80069d0 <__assert_func>
 8006226:	6922      	ldr	r2, [r4, #16]
 8006228:	3202      	adds	r2, #2
 800622a:	f104 010c 	add.w	r1, r4, #12
 800622e:	0092      	lsls	r2, r2, #2
 8006230:	300c      	adds	r0, #12
 8006232:	f001 fa81 	bl	8007738 <memcpy>
 8006236:	4621      	mov	r1, r4
 8006238:	4638      	mov	r0, r7
 800623a:	f7ff ffa5 	bl	8006188 <_Bfree>
 800623e:	4644      	mov	r4, r8
 8006240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006244:	3501      	adds	r5, #1
 8006246:	615e      	str	r6, [r3, #20]
 8006248:	6125      	str	r5, [r4, #16]
 800624a:	4620      	mov	r0, r4
 800624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006250:	080093d3 	.word	0x080093d3
 8006254:	08009377 	.word	0x08009377

08006258 <__hi0bits>:
 8006258:	0c03      	lsrs	r3, r0, #16
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	b9d3      	cbnz	r3, 8006294 <__hi0bits+0x3c>
 800625e:	0400      	lsls	r0, r0, #16
 8006260:	2310      	movs	r3, #16
 8006262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006266:	bf04      	itt	eq
 8006268:	0200      	lsleq	r0, r0, #8
 800626a:	3308      	addeq	r3, #8
 800626c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006270:	bf04      	itt	eq
 8006272:	0100      	lsleq	r0, r0, #4
 8006274:	3304      	addeq	r3, #4
 8006276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800627a:	bf04      	itt	eq
 800627c:	0080      	lsleq	r0, r0, #2
 800627e:	3302      	addeq	r3, #2
 8006280:	2800      	cmp	r0, #0
 8006282:	db05      	blt.n	8006290 <__hi0bits+0x38>
 8006284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006288:	f103 0301 	add.w	r3, r3, #1
 800628c:	bf08      	it	eq
 800628e:	2320      	moveq	r3, #32
 8006290:	4618      	mov	r0, r3
 8006292:	4770      	bx	lr
 8006294:	2300      	movs	r3, #0
 8006296:	e7e4      	b.n	8006262 <__hi0bits+0xa>

08006298 <__lo0bits>:
 8006298:	6803      	ldr	r3, [r0, #0]
 800629a:	f013 0207 	ands.w	r2, r3, #7
 800629e:	4601      	mov	r1, r0
 80062a0:	d00b      	beq.n	80062ba <__lo0bits+0x22>
 80062a2:	07da      	lsls	r2, r3, #31
 80062a4:	d423      	bmi.n	80062ee <__lo0bits+0x56>
 80062a6:	0798      	lsls	r0, r3, #30
 80062a8:	bf49      	itett	mi
 80062aa:	085b      	lsrmi	r3, r3, #1
 80062ac:	089b      	lsrpl	r3, r3, #2
 80062ae:	2001      	movmi	r0, #1
 80062b0:	600b      	strmi	r3, [r1, #0]
 80062b2:	bf5c      	itt	pl
 80062b4:	600b      	strpl	r3, [r1, #0]
 80062b6:	2002      	movpl	r0, #2
 80062b8:	4770      	bx	lr
 80062ba:	b298      	uxth	r0, r3
 80062bc:	b9a8      	cbnz	r0, 80062ea <__lo0bits+0x52>
 80062be:	0c1b      	lsrs	r3, r3, #16
 80062c0:	2010      	movs	r0, #16
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	b90a      	cbnz	r2, 80062ca <__lo0bits+0x32>
 80062c6:	3008      	adds	r0, #8
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	071a      	lsls	r2, r3, #28
 80062cc:	bf04      	itt	eq
 80062ce:	091b      	lsreq	r3, r3, #4
 80062d0:	3004      	addeq	r0, #4
 80062d2:	079a      	lsls	r2, r3, #30
 80062d4:	bf04      	itt	eq
 80062d6:	089b      	lsreq	r3, r3, #2
 80062d8:	3002      	addeq	r0, #2
 80062da:	07da      	lsls	r2, r3, #31
 80062dc:	d403      	bmi.n	80062e6 <__lo0bits+0x4e>
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	f100 0001 	add.w	r0, r0, #1
 80062e4:	d005      	beq.n	80062f2 <__lo0bits+0x5a>
 80062e6:	600b      	str	r3, [r1, #0]
 80062e8:	4770      	bx	lr
 80062ea:	4610      	mov	r0, r2
 80062ec:	e7e9      	b.n	80062c2 <__lo0bits+0x2a>
 80062ee:	2000      	movs	r0, #0
 80062f0:	4770      	bx	lr
 80062f2:	2020      	movs	r0, #32
 80062f4:	4770      	bx	lr
	...

080062f8 <__i2b>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	460c      	mov	r4, r1
 80062fc:	2101      	movs	r1, #1
 80062fe:	f7ff ff03 	bl	8006108 <_Balloc>
 8006302:	4602      	mov	r2, r0
 8006304:	b928      	cbnz	r0, 8006312 <__i2b+0x1a>
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <__i2b+0x24>)
 8006308:	4805      	ldr	r0, [pc, #20]	; (8006320 <__i2b+0x28>)
 800630a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800630e:	f000 fb5f 	bl	80069d0 <__assert_func>
 8006312:	2301      	movs	r3, #1
 8006314:	6144      	str	r4, [r0, #20]
 8006316:	6103      	str	r3, [r0, #16]
 8006318:	bd10      	pop	{r4, pc}
 800631a:	bf00      	nop
 800631c:	080093d3 	.word	0x080093d3
 8006320:	08009377 	.word	0x08009377

08006324 <__multiply>:
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	4691      	mov	r9, r2
 800632a:	690a      	ldr	r2, [r1, #16]
 800632c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006330:	429a      	cmp	r2, r3
 8006332:	bfb8      	it	lt
 8006334:	460b      	movlt	r3, r1
 8006336:	460c      	mov	r4, r1
 8006338:	bfbc      	itt	lt
 800633a:	464c      	movlt	r4, r9
 800633c:	4699      	movlt	r9, r3
 800633e:	6927      	ldr	r7, [r4, #16]
 8006340:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006344:	68a3      	ldr	r3, [r4, #8]
 8006346:	6861      	ldr	r1, [r4, #4]
 8006348:	eb07 060a 	add.w	r6, r7, sl
 800634c:	42b3      	cmp	r3, r6
 800634e:	b085      	sub	sp, #20
 8006350:	bfb8      	it	lt
 8006352:	3101      	addlt	r1, #1
 8006354:	f7ff fed8 	bl	8006108 <_Balloc>
 8006358:	b930      	cbnz	r0, 8006368 <__multiply+0x44>
 800635a:	4602      	mov	r2, r0
 800635c:	4b44      	ldr	r3, [pc, #272]	; (8006470 <__multiply+0x14c>)
 800635e:	4845      	ldr	r0, [pc, #276]	; (8006474 <__multiply+0x150>)
 8006360:	f240 115d 	movw	r1, #349	; 0x15d
 8006364:	f000 fb34 	bl	80069d0 <__assert_func>
 8006368:	f100 0514 	add.w	r5, r0, #20
 800636c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006370:	462b      	mov	r3, r5
 8006372:	2200      	movs	r2, #0
 8006374:	4543      	cmp	r3, r8
 8006376:	d321      	bcc.n	80063bc <__multiply+0x98>
 8006378:	f104 0314 	add.w	r3, r4, #20
 800637c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006380:	f109 0314 	add.w	r3, r9, #20
 8006384:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006388:	9202      	str	r2, [sp, #8]
 800638a:	1b3a      	subs	r2, r7, r4
 800638c:	3a15      	subs	r2, #21
 800638e:	f022 0203 	bic.w	r2, r2, #3
 8006392:	3204      	adds	r2, #4
 8006394:	f104 0115 	add.w	r1, r4, #21
 8006398:	428f      	cmp	r7, r1
 800639a:	bf38      	it	cc
 800639c:	2204      	movcc	r2, #4
 800639e:	9201      	str	r2, [sp, #4]
 80063a0:	9a02      	ldr	r2, [sp, #8]
 80063a2:	9303      	str	r3, [sp, #12]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d80c      	bhi.n	80063c2 <__multiply+0x9e>
 80063a8:	2e00      	cmp	r6, #0
 80063aa:	dd03      	ble.n	80063b4 <__multiply+0x90>
 80063ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d05a      	beq.n	800646a <__multiply+0x146>
 80063b4:	6106      	str	r6, [r0, #16]
 80063b6:	b005      	add	sp, #20
 80063b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063bc:	f843 2b04 	str.w	r2, [r3], #4
 80063c0:	e7d8      	b.n	8006374 <__multiply+0x50>
 80063c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80063c6:	f1ba 0f00 	cmp.w	sl, #0
 80063ca:	d024      	beq.n	8006416 <__multiply+0xf2>
 80063cc:	f104 0e14 	add.w	lr, r4, #20
 80063d0:	46a9      	mov	r9, r5
 80063d2:	f04f 0c00 	mov.w	ip, #0
 80063d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063da:	f8d9 1000 	ldr.w	r1, [r9]
 80063de:	fa1f fb82 	uxth.w	fp, r2
 80063e2:	b289      	uxth	r1, r1
 80063e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80063e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80063ec:	f8d9 2000 	ldr.w	r2, [r9]
 80063f0:	4461      	add	r1, ip
 80063f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80063fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063fe:	b289      	uxth	r1, r1
 8006400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006404:	4577      	cmp	r7, lr
 8006406:	f849 1b04 	str.w	r1, [r9], #4
 800640a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800640e:	d8e2      	bhi.n	80063d6 <__multiply+0xb2>
 8006410:	9a01      	ldr	r2, [sp, #4]
 8006412:	f845 c002 	str.w	ip, [r5, r2]
 8006416:	9a03      	ldr	r2, [sp, #12]
 8006418:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800641c:	3304      	adds	r3, #4
 800641e:	f1b9 0f00 	cmp.w	r9, #0
 8006422:	d020      	beq.n	8006466 <__multiply+0x142>
 8006424:	6829      	ldr	r1, [r5, #0]
 8006426:	f104 0c14 	add.w	ip, r4, #20
 800642a:	46ae      	mov	lr, r5
 800642c:	f04f 0a00 	mov.w	sl, #0
 8006430:	f8bc b000 	ldrh.w	fp, [ip]
 8006434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006438:	fb09 220b 	mla	r2, r9, fp, r2
 800643c:	4492      	add	sl, r2
 800643e:	b289      	uxth	r1, r1
 8006440:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006444:	f84e 1b04 	str.w	r1, [lr], #4
 8006448:	f85c 2b04 	ldr.w	r2, [ip], #4
 800644c:	f8be 1000 	ldrh.w	r1, [lr]
 8006450:	0c12      	lsrs	r2, r2, #16
 8006452:	fb09 1102 	mla	r1, r9, r2, r1
 8006456:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800645a:	4567      	cmp	r7, ip
 800645c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006460:	d8e6      	bhi.n	8006430 <__multiply+0x10c>
 8006462:	9a01      	ldr	r2, [sp, #4]
 8006464:	50a9      	str	r1, [r5, r2]
 8006466:	3504      	adds	r5, #4
 8006468:	e79a      	b.n	80063a0 <__multiply+0x7c>
 800646a:	3e01      	subs	r6, #1
 800646c:	e79c      	b.n	80063a8 <__multiply+0x84>
 800646e:	bf00      	nop
 8006470:	080093d3 	.word	0x080093d3
 8006474:	08009377 	.word	0x08009377

08006478 <__pow5mult>:
 8006478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800647c:	4615      	mov	r5, r2
 800647e:	f012 0203 	ands.w	r2, r2, #3
 8006482:	4606      	mov	r6, r0
 8006484:	460f      	mov	r7, r1
 8006486:	d007      	beq.n	8006498 <__pow5mult+0x20>
 8006488:	4c25      	ldr	r4, [pc, #148]	; (8006520 <__pow5mult+0xa8>)
 800648a:	3a01      	subs	r2, #1
 800648c:	2300      	movs	r3, #0
 800648e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006492:	f7ff fe9b 	bl	80061cc <__multadd>
 8006496:	4607      	mov	r7, r0
 8006498:	10ad      	asrs	r5, r5, #2
 800649a:	d03d      	beq.n	8006518 <__pow5mult+0xa0>
 800649c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800649e:	b97c      	cbnz	r4, 80064c0 <__pow5mult+0x48>
 80064a0:	2010      	movs	r0, #16
 80064a2:	f001 f941 	bl	8007728 <malloc>
 80064a6:	4602      	mov	r2, r0
 80064a8:	6270      	str	r0, [r6, #36]	; 0x24
 80064aa:	b928      	cbnz	r0, 80064b8 <__pow5mult+0x40>
 80064ac:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <__pow5mult+0xac>)
 80064ae:	481e      	ldr	r0, [pc, #120]	; (8006528 <__pow5mult+0xb0>)
 80064b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80064b4:	f000 fa8c 	bl	80069d0 <__assert_func>
 80064b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064bc:	6004      	str	r4, [r0, #0]
 80064be:	60c4      	str	r4, [r0, #12]
 80064c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064c8:	b94c      	cbnz	r4, 80064de <__pow5mult+0x66>
 80064ca:	f240 2171 	movw	r1, #625	; 0x271
 80064ce:	4630      	mov	r0, r6
 80064d0:	f7ff ff12 	bl	80062f8 <__i2b>
 80064d4:	2300      	movs	r3, #0
 80064d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80064da:	4604      	mov	r4, r0
 80064dc:	6003      	str	r3, [r0, #0]
 80064de:	f04f 0900 	mov.w	r9, #0
 80064e2:	07eb      	lsls	r3, r5, #31
 80064e4:	d50a      	bpl.n	80064fc <__pow5mult+0x84>
 80064e6:	4639      	mov	r1, r7
 80064e8:	4622      	mov	r2, r4
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7ff ff1a 	bl	8006324 <__multiply>
 80064f0:	4639      	mov	r1, r7
 80064f2:	4680      	mov	r8, r0
 80064f4:	4630      	mov	r0, r6
 80064f6:	f7ff fe47 	bl	8006188 <_Bfree>
 80064fa:	4647      	mov	r7, r8
 80064fc:	106d      	asrs	r5, r5, #1
 80064fe:	d00b      	beq.n	8006518 <__pow5mult+0xa0>
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	b938      	cbnz	r0, 8006514 <__pow5mult+0x9c>
 8006504:	4622      	mov	r2, r4
 8006506:	4621      	mov	r1, r4
 8006508:	4630      	mov	r0, r6
 800650a:	f7ff ff0b 	bl	8006324 <__multiply>
 800650e:	6020      	str	r0, [r4, #0]
 8006510:	f8c0 9000 	str.w	r9, [r0]
 8006514:	4604      	mov	r4, r0
 8006516:	e7e4      	b.n	80064e2 <__pow5mult+0x6a>
 8006518:	4638      	mov	r0, r7
 800651a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800651e:	bf00      	nop
 8006520:	080094d8 	.word	0x080094d8
 8006524:	08009360 	.word	0x08009360
 8006528:	08009377 	.word	0x08009377

0800652c <__lshift>:
 800652c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	460c      	mov	r4, r1
 8006532:	6849      	ldr	r1, [r1, #4]
 8006534:	6923      	ldr	r3, [r4, #16]
 8006536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800653a:	68a3      	ldr	r3, [r4, #8]
 800653c:	4607      	mov	r7, r0
 800653e:	4691      	mov	r9, r2
 8006540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006544:	f108 0601 	add.w	r6, r8, #1
 8006548:	42b3      	cmp	r3, r6
 800654a:	db0b      	blt.n	8006564 <__lshift+0x38>
 800654c:	4638      	mov	r0, r7
 800654e:	f7ff fddb 	bl	8006108 <_Balloc>
 8006552:	4605      	mov	r5, r0
 8006554:	b948      	cbnz	r0, 800656a <__lshift+0x3e>
 8006556:	4602      	mov	r2, r0
 8006558:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <__lshift+0xd8>)
 800655a:	482b      	ldr	r0, [pc, #172]	; (8006608 <__lshift+0xdc>)
 800655c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006560:	f000 fa36 	bl	80069d0 <__assert_func>
 8006564:	3101      	adds	r1, #1
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	e7ee      	b.n	8006548 <__lshift+0x1c>
 800656a:	2300      	movs	r3, #0
 800656c:	f100 0114 	add.w	r1, r0, #20
 8006570:	f100 0210 	add.w	r2, r0, #16
 8006574:	4618      	mov	r0, r3
 8006576:	4553      	cmp	r3, sl
 8006578:	db37      	blt.n	80065ea <__lshift+0xbe>
 800657a:	6920      	ldr	r0, [r4, #16]
 800657c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006580:	f104 0314 	add.w	r3, r4, #20
 8006584:	f019 091f 	ands.w	r9, r9, #31
 8006588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800658c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006590:	d02f      	beq.n	80065f2 <__lshift+0xc6>
 8006592:	f1c9 0e20 	rsb	lr, r9, #32
 8006596:	468a      	mov	sl, r1
 8006598:	f04f 0c00 	mov.w	ip, #0
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	fa02 f209 	lsl.w	r2, r2, r9
 80065a2:	ea42 020c 	orr.w	r2, r2, ip
 80065a6:	f84a 2b04 	str.w	r2, [sl], #4
 80065aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ae:	4298      	cmp	r0, r3
 80065b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80065b4:	d8f2      	bhi.n	800659c <__lshift+0x70>
 80065b6:	1b03      	subs	r3, r0, r4
 80065b8:	3b15      	subs	r3, #21
 80065ba:	f023 0303 	bic.w	r3, r3, #3
 80065be:	3304      	adds	r3, #4
 80065c0:	f104 0215 	add.w	r2, r4, #21
 80065c4:	4290      	cmp	r0, r2
 80065c6:	bf38      	it	cc
 80065c8:	2304      	movcc	r3, #4
 80065ca:	f841 c003 	str.w	ip, [r1, r3]
 80065ce:	f1bc 0f00 	cmp.w	ip, #0
 80065d2:	d001      	beq.n	80065d8 <__lshift+0xac>
 80065d4:	f108 0602 	add.w	r6, r8, #2
 80065d8:	3e01      	subs	r6, #1
 80065da:	4638      	mov	r0, r7
 80065dc:	612e      	str	r6, [r5, #16]
 80065de:	4621      	mov	r1, r4
 80065e0:	f7ff fdd2 	bl	8006188 <_Bfree>
 80065e4:	4628      	mov	r0, r5
 80065e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80065ee:	3301      	adds	r3, #1
 80065f0:	e7c1      	b.n	8006576 <__lshift+0x4a>
 80065f2:	3904      	subs	r1, #4
 80065f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80065fc:	4298      	cmp	r0, r3
 80065fe:	d8f9      	bhi.n	80065f4 <__lshift+0xc8>
 8006600:	e7ea      	b.n	80065d8 <__lshift+0xac>
 8006602:	bf00      	nop
 8006604:	080093d3 	.word	0x080093d3
 8006608:	08009377 	.word	0x08009377

0800660c <__mcmp>:
 800660c:	b530      	push	{r4, r5, lr}
 800660e:	6902      	ldr	r2, [r0, #16]
 8006610:	690c      	ldr	r4, [r1, #16]
 8006612:	1b12      	subs	r2, r2, r4
 8006614:	d10e      	bne.n	8006634 <__mcmp+0x28>
 8006616:	f100 0314 	add.w	r3, r0, #20
 800661a:	3114      	adds	r1, #20
 800661c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800662c:	42a5      	cmp	r5, r4
 800662e:	d003      	beq.n	8006638 <__mcmp+0x2c>
 8006630:	d305      	bcc.n	800663e <__mcmp+0x32>
 8006632:	2201      	movs	r2, #1
 8006634:	4610      	mov	r0, r2
 8006636:	bd30      	pop	{r4, r5, pc}
 8006638:	4283      	cmp	r3, r0
 800663a:	d3f3      	bcc.n	8006624 <__mcmp+0x18>
 800663c:	e7fa      	b.n	8006634 <__mcmp+0x28>
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	e7f7      	b.n	8006634 <__mcmp+0x28>

08006644 <__mdiff>:
 8006644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006648:	460c      	mov	r4, r1
 800664a:	4606      	mov	r6, r0
 800664c:	4611      	mov	r1, r2
 800664e:	4620      	mov	r0, r4
 8006650:	4690      	mov	r8, r2
 8006652:	f7ff ffdb 	bl	800660c <__mcmp>
 8006656:	1e05      	subs	r5, r0, #0
 8006658:	d110      	bne.n	800667c <__mdiff+0x38>
 800665a:	4629      	mov	r1, r5
 800665c:	4630      	mov	r0, r6
 800665e:	f7ff fd53 	bl	8006108 <_Balloc>
 8006662:	b930      	cbnz	r0, 8006672 <__mdiff+0x2e>
 8006664:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <__mdiff+0x10c>)
 8006666:	4602      	mov	r2, r0
 8006668:	f240 2132 	movw	r1, #562	; 0x232
 800666c:	4839      	ldr	r0, [pc, #228]	; (8006754 <__mdiff+0x110>)
 800666e:	f000 f9af 	bl	80069d0 <__assert_func>
 8006672:	2301      	movs	r3, #1
 8006674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667c:	bfa4      	itt	ge
 800667e:	4643      	movge	r3, r8
 8006680:	46a0      	movge	r8, r4
 8006682:	4630      	mov	r0, r6
 8006684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006688:	bfa6      	itte	ge
 800668a:	461c      	movge	r4, r3
 800668c:	2500      	movge	r5, #0
 800668e:	2501      	movlt	r5, #1
 8006690:	f7ff fd3a 	bl	8006108 <_Balloc>
 8006694:	b920      	cbnz	r0, 80066a0 <__mdiff+0x5c>
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <__mdiff+0x10c>)
 8006698:	4602      	mov	r2, r0
 800669a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800669e:	e7e5      	b.n	800666c <__mdiff+0x28>
 80066a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80066a4:	6926      	ldr	r6, [r4, #16]
 80066a6:	60c5      	str	r5, [r0, #12]
 80066a8:	f104 0914 	add.w	r9, r4, #20
 80066ac:	f108 0514 	add.w	r5, r8, #20
 80066b0:	f100 0e14 	add.w	lr, r0, #20
 80066b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80066b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066bc:	f108 0210 	add.w	r2, r8, #16
 80066c0:	46f2      	mov	sl, lr
 80066c2:	2100      	movs	r1, #0
 80066c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80066c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066cc:	fa1f f883 	uxth.w	r8, r3
 80066d0:	fa11 f18b 	uxtah	r1, r1, fp
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	eba1 0808 	sub.w	r8, r1, r8
 80066da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066e2:	fa1f f888 	uxth.w	r8, r8
 80066e6:	1419      	asrs	r1, r3, #16
 80066e8:	454e      	cmp	r6, r9
 80066ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066ee:	f84a 3b04 	str.w	r3, [sl], #4
 80066f2:	d8e7      	bhi.n	80066c4 <__mdiff+0x80>
 80066f4:	1b33      	subs	r3, r6, r4
 80066f6:	3b15      	subs	r3, #21
 80066f8:	f023 0303 	bic.w	r3, r3, #3
 80066fc:	3304      	adds	r3, #4
 80066fe:	3415      	adds	r4, #21
 8006700:	42a6      	cmp	r6, r4
 8006702:	bf38      	it	cc
 8006704:	2304      	movcc	r3, #4
 8006706:	441d      	add	r5, r3
 8006708:	4473      	add	r3, lr
 800670a:	469e      	mov	lr, r3
 800670c:	462e      	mov	r6, r5
 800670e:	4566      	cmp	r6, ip
 8006710:	d30e      	bcc.n	8006730 <__mdiff+0xec>
 8006712:	f10c 0203 	add.w	r2, ip, #3
 8006716:	1b52      	subs	r2, r2, r5
 8006718:	f022 0203 	bic.w	r2, r2, #3
 800671c:	3d03      	subs	r5, #3
 800671e:	45ac      	cmp	ip, r5
 8006720:	bf38      	it	cc
 8006722:	2200      	movcc	r2, #0
 8006724:	441a      	add	r2, r3
 8006726:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800672a:	b17b      	cbz	r3, 800674c <__mdiff+0x108>
 800672c:	6107      	str	r7, [r0, #16]
 800672e:	e7a3      	b.n	8006678 <__mdiff+0x34>
 8006730:	f856 8b04 	ldr.w	r8, [r6], #4
 8006734:	fa11 f288 	uxtah	r2, r1, r8
 8006738:	1414      	asrs	r4, r2, #16
 800673a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800673e:	b292      	uxth	r2, r2
 8006740:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006744:	f84e 2b04 	str.w	r2, [lr], #4
 8006748:	1421      	asrs	r1, r4, #16
 800674a:	e7e0      	b.n	800670e <__mdiff+0xca>
 800674c:	3f01      	subs	r7, #1
 800674e:	e7ea      	b.n	8006726 <__mdiff+0xe2>
 8006750:	080093d3 	.word	0x080093d3
 8006754:	08009377 	.word	0x08009377

08006758 <__d2b>:
 8006758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800675c:	4689      	mov	r9, r1
 800675e:	2101      	movs	r1, #1
 8006760:	ec57 6b10 	vmov	r6, r7, d0
 8006764:	4690      	mov	r8, r2
 8006766:	f7ff fccf 	bl	8006108 <_Balloc>
 800676a:	4604      	mov	r4, r0
 800676c:	b930      	cbnz	r0, 800677c <__d2b+0x24>
 800676e:	4602      	mov	r2, r0
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <__d2b+0xb0>)
 8006772:	4826      	ldr	r0, [pc, #152]	; (800680c <__d2b+0xb4>)
 8006774:	f240 310a 	movw	r1, #778	; 0x30a
 8006778:	f000 f92a 	bl	80069d0 <__assert_func>
 800677c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006780:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006784:	bb35      	cbnz	r5, 80067d4 <__d2b+0x7c>
 8006786:	2e00      	cmp	r6, #0
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	d028      	beq.n	80067de <__d2b+0x86>
 800678c:	4668      	mov	r0, sp
 800678e:	9600      	str	r6, [sp, #0]
 8006790:	f7ff fd82 	bl	8006298 <__lo0bits>
 8006794:	9900      	ldr	r1, [sp, #0]
 8006796:	b300      	cbz	r0, 80067da <__d2b+0x82>
 8006798:	9a01      	ldr	r2, [sp, #4]
 800679a:	f1c0 0320 	rsb	r3, r0, #32
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	430b      	orrs	r3, r1
 80067a4:	40c2      	lsrs	r2, r0
 80067a6:	6163      	str	r3, [r4, #20]
 80067a8:	9201      	str	r2, [sp, #4]
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	61a3      	str	r3, [r4, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bf14      	ite	ne
 80067b2:	2202      	movne	r2, #2
 80067b4:	2201      	moveq	r2, #1
 80067b6:	6122      	str	r2, [r4, #16]
 80067b8:	b1d5      	cbz	r5, 80067f0 <__d2b+0x98>
 80067ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067be:	4405      	add	r5, r0
 80067c0:	f8c9 5000 	str.w	r5, [r9]
 80067c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067c8:	f8c8 0000 	str.w	r0, [r8]
 80067cc:	4620      	mov	r0, r4
 80067ce:	b003      	add	sp, #12
 80067d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067d8:	e7d5      	b.n	8006786 <__d2b+0x2e>
 80067da:	6161      	str	r1, [r4, #20]
 80067dc:	e7e5      	b.n	80067aa <__d2b+0x52>
 80067de:	a801      	add	r0, sp, #4
 80067e0:	f7ff fd5a 	bl	8006298 <__lo0bits>
 80067e4:	9b01      	ldr	r3, [sp, #4]
 80067e6:	6163      	str	r3, [r4, #20]
 80067e8:	2201      	movs	r2, #1
 80067ea:	6122      	str	r2, [r4, #16]
 80067ec:	3020      	adds	r0, #32
 80067ee:	e7e3      	b.n	80067b8 <__d2b+0x60>
 80067f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067f8:	f8c9 0000 	str.w	r0, [r9]
 80067fc:	6918      	ldr	r0, [r3, #16]
 80067fe:	f7ff fd2b 	bl	8006258 <__hi0bits>
 8006802:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006806:	e7df      	b.n	80067c8 <__d2b+0x70>
 8006808:	080093d3 	.word	0x080093d3
 800680c:	08009377 	.word	0x08009377

08006810 <_mprec_log10>:
 8006810:	2817      	cmp	r0, #23
 8006812:	b5d0      	push	{r4, r6, r7, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	dc07      	bgt.n	8006828 <_mprec_log10+0x18>
 8006818:	4809      	ldr	r0, [pc, #36]	; (8006840 <_mprec_log10+0x30>)
 800681a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800681e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006822:	ec41 0b10 	vmov	d0, r0, r1
 8006826:	bdd0      	pop	{r4, r6, r7, pc}
 8006828:	4906      	ldr	r1, [pc, #24]	; (8006844 <_mprec_log10+0x34>)
 800682a:	4f07      	ldr	r7, [pc, #28]	; (8006848 <_mprec_log10+0x38>)
 800682c:	2000      	movs	r0, #0
 800682e:	2600      	movs	r6, #0
 8006830:	4632      	mov	r2, r6
 8006832:	463b      	mov	r3, r7
 8006834:	f7f9 fed8 	bl	80005e8 <__aeabi_dmul>
 8006838:	3c01      	subs	r4, #1
 800683a:	d1f9      	bne.n	8006830 <_mprec_log10+0x20>
 800683c:	e7f1      	b.n	8006822 <_mprec_log10+0x12>
 800683e:	bf00      	nop
 8006840:	08009410 	.word	0x08009410
 8006844:	3ff00000 	.word	0x3ff00000
 8006848:	40240000 	.word	0x40240000

0800684c <_calloc_r>:
 800684c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800684e:	fba1 2402 	umull	r2, r4, r1, r2
 8006852:	b94c      	cbnz	r4, 8006868 <_calloc_r+0x1c>
 8006854:	4611      	mov	r1, r2
 8006856:	9201      	str	r2, [sp, #4]
 8006858:	f000 f82e 	bl	80068b8 <_malloc_r>
 800685c:	9a01      	ldr	r2, [sp, #4]
 800685e:	4605      	mov	r5, r0
 8006860:	b930      	cbnz	r0, 8006870 <_calloc_r+0x24>
 8006862:	4628      	mov	r0, r5
 8006864:	b003      	add	sp, #12
 8006866:	bd30      	pop	{r4, r5, pc}
 8006868:	220c      	movs	r2, #12
 800686a:	6002      	str	r2, [r0, #0]
 800686c:	2500      	movs	r5, #0
 800686e:	e7f8      	b.n	8006862 <_calloc_r+0x16>
 8006870:	4621      	mov	r1, r4
 8006872:	f7ff fb07 	bl	8005e84 <memset>
 8006876:	e7f4      	b.n	8006862 <_calloc_r+0x16>

08006878 <sbrk_aligned>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4e0e      	ldr	r6, [pc, #56]	; (80068b4 <sbrk_aligned+0x3c>)
 800687c:	460c      	mov	r4, r1
 800687e:	6831      	ldr	r1, [r6, #0]
 8006880:	4605      	mov	r5, r0
 8006882:	b911      	cbnz	r1, 800688a <sbrk_aligned+0x12>
 8006884:	f000 f88c 	bl	80069a0 <_sbrk_r>
 8006888:	6030      	str	r0, [r6, #0]
 800688a:	4621      	mov	r1, r4
 800688c:	4628      	mov	r0, r5
 800688e:	f000 f887 	bl	80069a0 <_sbrk_r>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d00a      	beq.n	80068ac <sbrk_aligned+0x34>
 8006896:	1cc4      	adds	r4, r0, #3
 8006898:	f024 0403 	bic.w	r4, r4, #3
 800689c:	42a0      	cmp	r0, r4
 800689e:	d007      	beq.n	80068b0 <sbrk_aligned+0x38>
 80068a0:	1a21      	subs	r1, r4, r0
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 f87c 	bl	80069a0 <_sbrk_r>
 80068a8:	3001      	adds	r0, #1
 80068aa:	d101      	bne.n	80068b0 <sbrk_aligned+0x38>
 80068ac:	f04f 34ff 	mov.w	r4, #4294967295
 80068b0:	4620      	mov	r0, r4
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	200005e4 	.word	0x200005e4

080068b8 <_malloc_r>:
 80068b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068bc:	1ccd      	adds	r5, r1, #3
 80068be:	f025 0503 	bic.w	r5, r5, #3
 80068c2:	3508      	adds	r5, #8
 80068c4:	2d0c      	cmp	r5, #12
 80068c6:	bf38      	it	cc
 80068c8:	250c      	movcc	r5, #12
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	4607      	mov	r7, r0
 80068ce:	db01      	blt.n	80068d4 <_malloc_r+0x1c>
 80068d0:	42a9      	cmp	r1, r5
 80068d2:	d905      	bls.n	80068e0 <_malloc_r+0x28>
 80068d4:	230c      	movs	r3, #12
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	2600      	movs	r6, #0
 80068da:	4630      	mov	r0, r6
 80068dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e0:	4e2e      	ldr	r6, [pc, #184]	; (800699c <_malloc_r+0xe4>)
 80068e2:	f000 ff37 	bl	8007754 <__malloc_lock>
 80068e6:	6833      	ldr	r3, [r6, #0]
 80068e8:	461c      	mov	r4, r3
 80068ea:	bb34      	cbnz	r4, 800693a <_malloc_r+0x82>
 80068ec:	4629      	mov	r1, r5
 80068ee:	4638      	mov	r0, r7
 80068f0:	f7ff ffc2 	bl	8006878 <sbrk_aligned>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	4604      	mov	r4, r0
 80068f8:	d14d      	bne.n	8006996 <_malloc_r+0xde>
 80068fa:	6834      	ldr	r4, [r6, #0]
 80068fc:	4626      	mov	r6, r4
 80068fe:	2e00      	cmp	r6, #0
 8006900:	d140      	bne.n	8006984 <_malloc_r+0xcc>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	4631      	mov	r1, r6
 8006906:	4638      	mov	r0, r7
 8006908:	eb04 0803 	add.w	r8, r4, r3
 800690c:	f000 f848 	bl	80069a0 <_sbrk_r>
 8006910:	4580      	cmp	r8, r0
 8006912:	d13a      	bne.n	800698a <_malloc_r+0xd2>
 8006914:	6821      	ldr	r1, [r4, #0]
 8006916:	3503      	adds	r5, #3
 8006918:	1a6d      	subs	r5, r5, r1
 800691a:	f025 0503 	bic.w	r5, r5, #3
 800691e:	3508      	adds	r5, #8
 8006920:	2d0c      	cmp	r5, #12
 8006922:	bf38      	it	cc
 8006924:	250c      	movcc	r5, #12
 8006926:	4629      	mov	r1, r5
 8006928:	4638      	mov	r0, r7
 800692a:	f7ff ffa5 	bl	8006878 <sbrk_aligned>
 800692e:	3001      	adds	r0, #1
 8006930:	d02b      	beq.n	800698a <_malloc_r+0xd2>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	442b      	add	r3, r5
 8006936:	6023      	str	r3, [r4, #0]
 8006938:	e00e      	b.n	8006958 <_malloc_r+0xa0>
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	1b52      	subs	r2, r2, r5
 800693e:	d41e      	bmi.n	800697e <_malloc_r+0xc6>
 8006940:	2a0b      	cmp	r2, #11
 8006942:	d916      	bls.n	8006972 <_malloc_r+0xba>
 8006944:	1961      	adds	r1, r4, r5
 8006946:	42a3      	cmp	r3, r4
 8006948:	6025      	str	r5, [r4, #0]
 800694a:	bf18      	it	ne
 800694c:	6059      	strne	r1, [r3, #4]
 800694e:	6863      	ldr	r3, [r4, #4]
 8006950:	bf08      	it	eq
 8006952:	6031      	streq	r1, [r6, #0]
 8006954:	5162      	str	r2, [r4, r5]
 8006956:	604b      	str	r3, [r1, #4]
 8006958:	4638      	mov	r0, r7
 800695a:	f104 060b 	add.w	r6, r4, #11
 800695e:	f000 feff 	bl	8007760 <__malloc_unlock>
 8006962:	f026 0607 	bic.w	r6, r6, #7
 8006966:	1d23      	adds	r3, r4, #4
 8006968:	1af2      	subs	r2, r6, r3
 800696a:	d0b6      	beq.n	80068da <_malloc_r+0x22>
 800696c:	1b9b      	subs	r3, r3, r6
 800696e:	50a3      	str	r3, [r4, r2]
 8006970:	e7b3      	b.n	80068da <_malloc_r+0x22>
 8006972:	6862      	ldr	r2, [r4, #4]
 8006974:	42a3      	cmp	r3, r4
 8006976:	bf0c      	ite	eq
 8006978:	6032      	streq	r2, [r6, #0]
 800697a:	605a      	strne	r2, [r3, #4]
 800697c:	e7ec      	b.n	8006958 <_malloc_r+0xa0>
 800697e:	4623      	mov	r3, r4
 8006980:	6864      	ldr	r4, [r4, #4]
 8006982:	e7b2      	b.n	80068ea <_malloc_r+0x32>
 8006984:	4634      	mov	r4, r6
 8006986:	6876      	ldr	r6, [r6, #4]
 8006988:	e7b9      	b.n	80068fe <_malloc_r+0x46>
 800698a:	230c      	movs	r3, #12
 800698c:	603b      	str	r3, [r7, #0]
 800698e:	4638      	mov	r0, r7
 8006990:	f000 fee6 	bl	8007760 <__malloc_unlock>
 8006994:	e7a1      	b.n	80068da <_malloc_r+0x22>
 8006996:	6025      	str	r5, [r4, #0]
 8006998:	e7de      	b.n	8006958 <_malloc_r+0xa0>
 800699a:	bf00      	nop
 800699c:	200005e0 	.word	0x200005e0

080069a0 <_sbrk_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4d06      	ldr	r5, [pc, #24]	; (80069bc <_sbrk_r+0x1c>)
 80069a4:	2300      	movs	r3, #0
 80069a6:	4604      	mov	r4, r0
 80069a8:	4608      	mov	r0, r1
 80069aa:	602b      	str	r3, [r5, #0]
 80069ac:	f7fb f9d4 	bl	8001d58 <_sbrk>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_sbrk_r+0x1a>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_sbrk_r+0x1a>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	200005e8 	.word	0x200005e8

080069c0 <strcpy>:
 80069c0:	4603      	mov	r3, r0
 80069c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c6:	f803 2b01 	strb.w	r2, [r3], #1
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	d1f9      	bne.n	80069c2 <strcpy+0x2>
 80069ce:	4770      	bx	lr

080069d0 <__assert_func>:
 80069d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069d2:	4614      	mov	r4, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b09      	ldr	r3, [pc, #36]	; (80069fc <__assert_func+0x2c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4605      	mov	r5, r0
 80069dc:	68d8      	ldr	r0, [r3, #12]
 80069de:	b14c      	cbz	r4, 80069f4 <__assert_func+0x24>
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <__assert_func+0x30>)
 80069e2:	9100      	str	r1, [sp, #0]
 80069e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069e8:	4906      	ldr	r1, [pc, #24]	; (8006a04 <__assert_func+0x34>)
 80069ea:	462b      	mov	r3, r5
 80069ec:	f000 fe8a 	bl	8007704 <fiprintf>
 80069f0:	f001 fab6 	bl	8007f60 <abort>
 80069f4:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <__assert_func+0x38>)
 80069f6:	461c      	mov	r4, r3
 80069f8:	e7f3      	b.n	80069e2 <__assert_func+0x12>
 80069fa:	bf00      	nop
 80069fc:	20000014 	.word	0x20000014
 8006a00:	080094e4 	.word	0x080094e4
 8006a04:	080094f1 	.word	0x080094f1
 8006a08:	0800951f 	.word	0x0800951f

08006a0c <quorem>:
 8006a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a10:	6903      	ldr	r3, [r0, #16]
 8006a12:	690c      	ldr	r4, [r1, #16]
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	4607      	mov	r7, r0
 8006a18:	f2c0 8081 	blt.w	8006b1e <quorem+0x112>
 8006a1c:	3c01      	subs	r4, #1
 8006a1e:	f101 0814 	add.w	r8, r1, #20
 8006a22:	f100 0514 	add.w	r5, r0, #20
 8006a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a34:	3301      	adds	r3, #1
 8006a36:	429a      	cmp	r2, r3
 8006a38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a40:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a44:	d331      	bcc.n	8006aaa <quorem+0x9e>
 8006a46:	f04f 0e00 	mov.w	lr, #0
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	46ac      	mov	ip, r5
 8006a4e:	46f2      	mov	sl, lr
 8006a50:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a54:	b293      	uxth	r3, r2
 8006a56:	fb06 e303 	mla	r3, r6, r3, lr
 8006a5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ebaa 0303 	sub.w	r3, sl, r3
 8006a64:	f8dc a000 	ldr.w	sl, [ip]
 8006a68:	0c12      	lsrs	r2, r2, #16
 8006a6a:	fa13 f38a 	uxtah	r3, r3, sl
 8006a6e:	fb06 e202 	mla	r2, r6, r2, lr
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	9b00      	ldr	r3, [sp, #0]
 8006a76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a7a:	b292      	uxth	r2, r2
 8006a7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a84:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a88:	4581      	cmp	r9, r0
 8006a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a8e:	f84c 3b04 	str.w	r3, [ip], #4
 8006a92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a96:	d2db      	bcs.n	8006a50 <quorem+0x44>
 8006a98:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a9c:	b92b      	cbnz	r3, 8006aaa <quorem+0x9e>
 8006a9e:	9b01      	ldr	r3, [sp, #4]
 8006aa0:	3b04      	subs	r3, #4
 8006aa2:	429d      	cmp	r5, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	d32e      	bcc.n	8006b06 <quorem+0xfa>
 8006aa8:	613c      	str	r4, [r7, #16]
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f7ff fdae 	bl	800660c <__mcmp>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	db24      	blt.n	8006afe <quorem+0xf2>
 8006ab4:	3601      	adds	r6, #1
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f04f 0c00 	mov.w	ip, #0
 8006abc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ac0:	f8d0 e000 	ldr.w	lr, [r0]
 8006ac4:	b293      	uxth	r3, r2
 8006ac6:	ebac 0303 	sub.w	r3, ip, r3
 8006aca:	0c12      	lsrs	r2, r2, #16
 8006acc:	fa13 f38e 	uxtah	r3, r3, lr
 8006ad0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ade:	45c1      	cmp	r9, r8
 8006ae0:	f840 3b04 	str.w	r3, [r0], #4
 8006ae4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ae8:	d2e8      	bcs.n	8006abc <quorem+0xb0>
 8006aea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006af2:	b922      	cbnz	r2, 8006afe <quorem+0xf2>
 8006af4:	3b04      	subs	r3, #4
 8006af6:	429d      	cmp	r5, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	d30a      	bcc.n	8006b12 <quorem+0x106>
 8006afc:	613c      	str	r4, [r7, #16]
 8006afe:	4630      	mov	r0, r6
 8006b00:	b003      	add	sp, #12
 8006b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b06:	6812      	ldr	r2, [r2, #0]
 8006b08:	3b04      	subs	r3, #4
 8006b0a:	2a00      	cmp	r2, #0
 8006b0c:	d1cc      	bne.n	8006aa8 <quorem+0x9c>
 8006b0e:	3c01      	subs	r4, #1
 8006b10:	e7c7      	b.n	8006aa2 <quorem+0x96>
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	3b04      	subs	r3, #4
 8006b16:	2a00      	cmp	r2, #0
 8006b18:	d1f0      	bne.n	8006afc <quorem+0xf0>
 8006b1a:	3c01      	subs	r4, #1
 8006b1c:	e7eb      	b.n	8006af6 <quorem+0xea>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e7ee      	b.n	8006b00 <quorem+0xf4>
 8006b22:	0000      	movs	r0, r0
 8006b24:	0000      	movs	r0, r0
	...

08006b28 <_dtoa_r>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	ed2d 8b04 	vpush	{d8-d9}
 8006b30:	ec57 6b10 	vmov	r6, r7, d0
 8006b34:	b093      	sub	sp, #76	; 0x4c
 8006b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b3c:	9106      	str	r1, [sp, #24]
 8006b3e:	ee10 aa10 	vmov	sl, s0
 8006b42:	4604      	mov	r4, r0
 8006b44:	9209      	str	r2, [sp, #36]	; 0x24
 8006b46:	930c      	str	r3, [sp, #48]	; 0x30
 8006b48:	46bb      	mov	fp, r7
 8006b4a:	b975      	cbnz	r5, 8006b6a <_dtoa_r+0x42>
 8006b4c:	2010      	movs	r0, #16
 8006b4e:	f000 fdeb 	bl	8007728 <malloc>
 8006b52:	4602      	mov	r2, r0
 8006b54:	6260      	str	r0, [r4, #36]	; 0x24
 8006b56:	b920      	cbnz	r0, 8006b62 <_dtoa_r+0x3a>
 8006b58:	4ba7      	ldr	r3, [pc, #668]	; (8006df8 <_dtoa_r+0x2d0>)
 8006b5a:	21ea      	movs	r1, #234	; 0xea
 8006b5c:	48a7      	ldr	r0, [pc, #668]	; (8006dfc <_dtoa_r+0x2d4>)
 8006b5e:	f7ff ff37 	bl	80069d0 <__assert_func>
 8006b62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b66:	6005      	str	r5, [r0, #0]
 8006b68:	60c5      	str	r5, [r0, #12]
 8006b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	b151      	cbz	r1, 8006b86 <_dtoa_r+0x5e>
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	604a      	str	r2, [r1, #4]
 8006b74:	2301      	movs	r3, #1
 8006b76:	4093      	lsls	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f7ff fb04 	bl	8006188 <_Bfree>
 8006b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	1e3b      	subs	r3, r7, #0
 8006b88:	bfaa      	itet	ge
 8006b8a:	2300      	movge	r3, #0
 8006b8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b90:	f8c8 3000 	strge.w	r3, [r8]
 8006b94:	4b9a      	ldr	r3, [pc, #616]	; (8006e00 <_dtoa_r+0x2d8>)
 8006b96:	bfbc      	itt	lt
 8006b98:	2201      	movlt	r2, #1
 8006b9a:	f8c8 2000 	strlt.w	r2, [r8]
 8006b9e:	ea33 030b 	bics.w	r3, r3, fp
 8006ba2:	d11b      	bne.n	8006bdc <_dtoa_r+0xb4>
 8006ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ba6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bb0:	4333      	orrs	r3, r6
 8006bb2:	f000 8592 	beq.w	80076da <_dtoa_r+0xbb2>
 8006bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bb8:	b963      	cbnz	r3, 8006bd4 <_dtoa_r+0xac>
 8006bba:	4b92      	ldr	r3, [pc, #584]	; (8006e04 <_dtoa_r+0x2dc>)
 8006bbc:	e022      	b.n	8006c04 <_dtoa_r+0xdc>
 8006bbe:	4b92      	ldr	r3, [pc, #584]	; (8006e08 <_dtoa_r+0x2e0>)
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	9801      	ldr	r0, [sp, #4]
 8006bca:	b013      	add	sp, #76	; 0x4c
 8006bcc:	ecbd 8b04 	vpop	{d8-d9}
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	4b8b      	ldr	r3, [pc, #556]	; (8006e04 <_dtoa_r+0x2dc>)
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	3303      	adds	r3, #3
 8006bda:	e7f3      	b.n	8006bc4 <_dtoa_r+0x9c>
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2300      	movs	r3, #0
 8006be0:	4650      	mov	r0, sl
 8006be2:	4659      	mov	r1, fp
 8006be4:	f7f9 ff68 	bl	8000ab8 <__aeabi_dcmpeq>
 8006be8:	ec4b ab19 	vmov	d9, sl, fp
 8006bec:	4680      	mov	r8, r0
 8006bee:	b158      	cbz	r0, 8006c08 <_dtoa_r+0xe0>
 8006bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 856b 	beq.w	80076d4 <_dtoa_r+0xbac>
 8006bfe:	4883      	ldr	r0, [pc, #524]	; (8006e0c <_dtoa_r+0x2e4>)
 8006c00:	6018      	str	r0, [r3, #0]
 8006c02:	1e43      	subs	r3, r0, #1
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	e7df      	b.n	8006bc8 <_dtoa_r+0xa0>
 8006c08:	ec4b ab10 	vmov	d0, sl, fp
 8006c0c:	aa10      	add	r2, sp, #64	; 0x40
 8006c0e:	a911      	add	r1, sp, #68	; 0x44
 8006c10:	4620      	mov	r0, r4
 8006c12:	f7ff fda1 	bl	8006758 <__d2b>
 8006c16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c1a:	ee08 0a10 	vmov	s16, r0
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	f000 8084 	beq.w	8006d2c <_dtoa_r+0x204>
 8006c24:	ee19 3a90 	vmov	r3, s19
 8006c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c30:	4656      	mov	r6, sl
 8006c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c3e:	4b74      	ldr	r3, [pc, #464]	; (8006e10 <_dtoa_r+0x2e8>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	4630      	mov	r0, r6
 8006c44:	4639      	mov	r1, r7
 8006c46:	f7f9 fb17 	bl	8000278 <__aeabi_dsub>
 8006c4a:	a365      	add	r3, pc, #404	; (adr r3, 8006de0 <_dtoa_r+0x2b8>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f7f9 fcca 	bl	80005e8 <__aeabi_dmul>
 8006c54:	a364      	add	r3, pc, #400	; (adr r3, 8006de8 <_dtoa_r+0x2c0>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f7f9 fb0f 	bl	800027c <__adddf3>
 8006c5e:	4606      	mov	r6, r0
 8006c60:	4628      	mov	r0, r5
 8006c62:	460f      	mov	r7, r1
 8006c64:	f7f9 fc56 	bl	8000514 <__aeabi_i2d>
 8006c68:	a361      	add	r3, pc, #388	; (adr r3, 8006df0 <_dtoa_r+0x2c8>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f7f9 fcbb 	bl	80005e8 <__aeabi_dmul>
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 faff 	bl	800027c <__adddf3>
 8006c7e:	4606      	mov	r6, r0
 8006c80:	460f      	mov	r7, r1
 8006c82:	f7f9 ff4b 	bl	8000b1c <__aeabi_d2iz>
 8006c86:	2200      	movs	r2, #0
 8006c88:	9000      	str	r0, [sp, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f7f9 ff1c 	bl	8000acc <__aeabi_dcmplt>
 8006c94:	b150      	cbz	r0, 8006cac <_dtoa_r+0x184>
 8006c96:	9800      	ldr	r0, [sp, #0]
 8006c98:	f7f9 fc3c 	bl	8000514 <__aeabi_i2d>
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	463b      	mov	r3, r7
 8006ca0:	f7f9 ff0a 	bl	8000ab8 <__aeabi_dcmpeq>
 8006ca4:	b910      	cbnz	r0, 8006cac <_dtoa_r+0x184>
 8006ca6:	9b00      	ldr	r3, [sp, #0]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	9b00      	ldr	r3, [sp, #0]
 8006cae:	2b16      	cmp	r3, #22
 8006cb0:	d85a      	bhi.n	8006d68 <_dtoa_r+0x240>
 8006cb2:	9a00      	ldr	r2, [sp, #0]
 8006cb4:	4b57      	ldr	r3, [pc, #348]	; (8006e14 <_dtoa_r+0x2ec>)
 8006cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	ec51 0b19 	vmov	r0, r1, d9
 8006cc2:	f7f9 ff03 	bl	8000acc <__aeabi_dcmplt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d050      	beq.n	8006d6c <_dtoa_r+0x244>
 8006cca:	9b00      	ldr	r3, [sp, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cd6:	1b5d      	subs	r5, r3, r5
 8006cd8:	1e6b      	subs	r3, r5, #1
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	bf45      	ittet	mi
 8006cde:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ce2:	9304      	strmi	r3, [sp, #16]
 8006ce4:	2300      	movpl	r3, #0
 8006ce6:	2300      	movmi	r3, #0
 8006ce8:	bf4c      	ite	mi
 8006cea:	9305      	strmi	r3, [sp, #20]
 8006cec:	9304      	strpl	r3, [sp, #16]
 8006cee:	9b00      	ldr	r3, [sp, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	db3d      	blt.n	8006d70 <_dtoa_r+0x248>
 8006cf4:	9b05      	ldr	r3, [sp, #20]
 8006cf6:	9a00      	ldr	r2, [sp, #0]
 8006cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8006cfa:	4413      	add	r3, r2
 8006cfc:	9305      	str	r3, [sp, #20]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9307      	str	r3, [sp, #28]
 8006d02:	9b06      	ldr	r3, [sp, #24]
 8006d04:	2b09      	cmp	r3, #9
 8006d06:	f200 8089 	bhi.w	8006e1c <_dtoa_r+0x2f4>
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	bfc4      	itt	gt
 8006d0e:	3b04      	subgt	r3, #4
 8006d10:	9306      	strgt	r3, [sp, #24]
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	f1a3 0302 	sub.w	r3, r3, #2
 8006d18:	bfcc      	ite	gt
 8006d1a:	2500      	movgt	r5, #0
 8006d1c:	2501      	movle	r5, #1
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	f200 8087 	bhi.w	8006e32 <_dtoa_r+0x30a>
 8006d24:	e8df f003 	tbb	[pc, r3]
 8006d28:	59383a2d 	.word	0x59383a2d
 8006d2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d30:	441d      	add	r5, r3
 8006d32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	bfc1      	itttt	gt
 8006d3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d42:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d4a:	bfda      	itte	le
 8006d4c:	f1c3 0320 	rsble	r3, r3, #32
 8006d50:	fa06 f003 	lslle.w	r0, r6, r3
 8006d54:	4318      	orrgt	r0, r3
 8006d56:	f7f9 fbcd 	bl	80004f4 <__aeabi_ui2d>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d62:	3d01      	subs	r5, #1
 8006d64:	930e      	str	r3, [sp, #56]	; 0x38
 8006d66:	e76a      	b.n	8006c3e <_dtoa_r+0x116>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e7b2      	b.n	8006cd2 <_dtoa_r+0x1aa>
 8006d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d6e:	e7b1      	b.n	8006cd4 <_dtoa_r+0x1ac>
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	9a00      	ldr	r2, [sp, #0]
 8006d74:	1a9b      	subs	r3, r3, r2
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	4253      	negs	r3, r2
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d80:	e7bf      	b.n	8006d02 <_dtoa_r+0x1da>
 8006d82:	2300      	movs	r3, #0
 8006d84:	9308      	str	r3, [sp, #32]
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dc55      	bgt.n	8006e38 <_dtoa_r+0x310>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d92:	461a      	mov	r2, r3
 8006d94:	9209      	str	r2, [sp, #36]	; 0x24
 8006d96:	e00c      	b.n	8006db2 <_dtoa_r+0x28a>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e7f3      	b.n	8006d84 <_dtoa_r+0x25c>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da0:	9308      	str	r3, [sp, #32]
 8006da2:	9b00      	ldr	r3, [sp, #0]
 8006da4:	4413      	add	r3, r2
 8006da6:	9302      	str	r3, [sp, #8]
 8006da8:	3301      	adds	r3, #1
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	9303      	str	r3, [sp, #12]
 8006dae:	bfb8      	it	lt
 8006db0:	2301      	movlt	r3, #1
 8006db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006db4:	2200      	movs	r2, #0
 8006db6:	6042      	str	r2, [r0, #4]
 8006db8:	2204      	movs	r2, #4
 8006dba:	f102 0614 	add.w	r6, r2, #20
 8006dbe:	429e      	cmp	r6, r3
 8006dc0:	6841      	ldr	r1, [r0, #4]
 8006dc2:	d93d      	bls.n	8006e40 <_dtoa_r+0x318>
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f7ff f99f 	bl	8006108 <_Balloc>
 8006dca:	9001      	str	r0, [sp, #4]
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d13b      	bne.n	8006e48 <_dtoa_r+0x320>
 8006dd0:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <_dtoa_r+0x2f0>)
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006dd8:	e6c0      	b.n	8006b5c <_dtoa_r+0x34>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e7df      	b.n	8006d9e <_dtoa_r+0x276>
 8006dde:	bf00      	nop
 8006de0:	636f4361 	.word	0x636f4361
 8006de4:	3fd287a7 	.word	0x3fd287a7
 8006de8:	8b60c8b3 	.word	0x8b60c8b3
 8006dec:	3fc68a28 	.word	0x3fc68a28
 8006df0:	509f79fb 	.word	0x509f79fb
 8006df4:	3fd34413 	.word	0x3fd34413
 8006df8:	08009360 	.word	0x08009360
 8006dfc:	0800952f 	.word	0x0800952f
 8006e00:	7ff00000 	.word	0x7ff00000
 8006e04:	08009529 	.word	0x08009529
 8006e08:	08009520 	.word	0x08009520
 8006e0c:	0800952e 	.word	0x0800952e
 8006e10:	3ff80000 	.word	0x3ff80000
 8006e14:	08009410 	.word	0x08009410
 8006e18:	080093d3 	.word	0x080093d3
 8006e1c:	2501      	movs	r5, #1
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9306      	str	r3, [sp, #24]
 8006e22:	9508      	str	r5, [sp, #32]
 8006e24:	f04f 33ff 	mov.w	r3, #4294967295
 8006e28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2312      	movs	r3, #18
 8006e30:	e7b0      	b.n	8006d94 <_dtoa_r+0x26c>
 8006e32:	2301      	movs	r3, #1
 8006e34:	9308      	str	r3, [sp, #32]
 8006e36:	e7f5      	b.n	8006e24 <_dtoa_r+0x2fc>
 8006e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e3e:	e7b8      	b.n	8006db2 <_dtoa_r+0x28a>
 8006e40:	3101      	adds	r1, #1
 8006e42:	6041      	str	r1, [r0, #4]
 8006e44:	0052      	lsls	r2, r2, #1
 8006e46:	e7b8      	b.n	8006dba <_dtoa_r+0x292>
 8006e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e4a:	9a01      	ldr	r2, [sp, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	2b0e      	cmp	r3, #14
 8006e52:	f200 809d 	bhi.w	8006f90 <_dtoa_r+0x468>
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	f000 809a 	beq.w	8006f90 <_dtoa_r+0x468>
 8006e5c:	9b00      	ldr	r3, [sp, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd32      	ble.n	8006ec8 <_dtoa_r+0x3a0>
 8006e62:	4ab7      	ldr	r2, [pc, #732]	; (8007140 <_dtoa_r+0x618>)
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e70:	9b00      	ldr	r3, [sp, #0]
 8006e72:	05d8      	lsls	r0, r3, #23
 8006e74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e78:	d516      	bpl.n	8006ea8 <_dtoa_r+0x380>
 8006e7a:	4bb2      	ldr	r3, [pc, #712]	; (8007144 <_dtoa_r+0x61c>)
 8006e7c:	ec51 0b19 	vmov	r0, r1, d9
 8006e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e84:	f7f9 fcda 	bl	800083c <__aeabi_ddiv>
 8006e88:	f007 070f 	and.w	r7, r7, #15
 8006e8c:	4682      	mov	sl, r0
 8006e8e:	468b      	mov	fp, r1
 8006e90:	2503      	movs	r5, #3
 8006e92:	4eac      	ldr	r6, [pc, #688]	; (8007144 <_dtoa_r+0x61c>)
 8006e94:	b957      	cbnz	r7, 8006eac <_dtoa_r+0x384>
 8006e96:	4642      	mov	r2, r8
 8006e98:	464b      	mov	r3, r9
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	f7f9 fccd 	bl	800083c <__aeabi_ddiv>
 8006ea2:	4682      	mov	sl, r0
 8006ea4:	468b      	mov	fp, r1
 8006ea6:	e028      	b.n	8006efa <_dtoa_r+0x3d2>
 8006ea8:	2502      	movs	r5, #2
 8006eaa:	e7f2      	b.n	8006e92 <_dtoa_r+0x36a>
 8006eac:	07f9      	lsls	r1, r7, #31
 8006eae:	d508      	bpl.n	8006ec2 <_dtoa_r+0x39a>
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006eb8:	f7f9 fb96 	bl	80005e8 <__aeabi_dmul>
 8006ebc:	3501      	adds	r5, #1
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	4689      	mov	r9, r1
 8006ec2:	107f      	asrs	r7, r7, #1
 8006ec4:	3608      	adds	r6, #8
 8006ec6:	e7e5      	b.n	8006e94 <_dtoa_r+0x36c>
 8006ec8:	f000 809b 	beq.w	8007002 <_dtoa_r+0x4da>
 8006ecc:	9b00      	ldr	r3, [sp, #0]
 8006ece:	4f9d      	ldr	r7, [pc, #628]	; (8007144 <_dtoa_r+0x61c>)
 8006ed0:	425e      	negs	r6, r3
 8006ed2:	4b9b      	ldr	r3, [pc, #620]	; (8007140 <_dtoa_r+0x618>)
 8006ed4:	f006 020f 	and.w	r2, r6, #15
 8006ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	ec51 0b19 	vmov	r0, r1, d9
 8006ee4:	f7f9 fb80 	bl	80005e8 <__aeabi_dmul>
 8006ee8:	1136      	asrs	r6, r6, #4
 8006eea:	4682      	mov	sl, r0
 8006eec:	468b      	mov	fp, r1
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2502      	movs	r5, #2
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d17a      	bne.n	8006fec <_dtoa_r+0x4c4>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1d3      	bne.n	8006ea2 <_dtoa_r+0x37a>
 8006efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8082 	beq.w	8007006 <_dtoa_r+0x4de>
 8006f02:	4b91      	ldr	r3, [pc, #580]	; (8007148 <_dtoa_r+0x620>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	4650      	mov	r0, sl
 8006f08:	4659      	mov	r1, fp
 8006f0a:	f7f9 fddf 	bl	8000acc <__aeabi_dcmplt>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d079      	beq.n	8007006 <_dtoa_r+0x4de>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d076      	beq.n	8007006 <_dtoa_r+0x4de>
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dd36      	ble.n	8006f8c <_dtoa_r+0x464>
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	4650      	mov	r0, sl
 8006f22:	4659      	mov	r1, fp
 8006f24:	1e5f      	subs	r7, r3, #1
 8006f26:	2200      	movs	r2, #0
 8006f28:	4b88      	ldr	r3, [pc, #544]	; (800714c <_dtoa_r+0x624>)
 8006f2a:	f7f9 fb5d 	bl	80005e8 <__aeabi_dmul>
 8006f2e:	9e02      	ldr	r6, [sp, #8]
 8006f30:	4682      	mov	sl, r0
 8006f32:	468b      	mov	fp, r1
 8006f34:	3501      	adds	r5, #1
 8006f36:	4628      	mov	r0, r5
 8006f38:	f7f9 faec 	bl	8000514 <__aeabi_i2d>
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	465b      	mov	r3, fp
 8006f40:	f7f9 fb52 	bl	80005e8 <__aeabi_dmul>
 8006f44:	4b82      	ldr	r3, [pc, #520]	; (8007150 <_dtoa_r+0x628>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	f7f9 f998 	bl	800027c <__adddf3>
 8006f4c:	46d0      	mov	r8, sl
 8006f4e:	46d9      	mov	r9, fp
 8006f50:	4682      	mov	sl, r0
 8006f52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f56:	2e00      	cmp	r6, #0
 8006f58:	d158      	bne.n	800700c <_dtoa_r+0x4e4>
 8006f5a:	4b7e      	ldr	r3, [pc, #504]	; (8007154 <_dtoa_r+0x62c>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4640      	mov	r0, r8
 8006f60:	4649      	mov	r1, r9
 8006f62:	f7f9 f989 	bl	8000278 <__aeabi_dsub>
 8006f66:	4652      	mov	r2, sl
 8006f68:	465b      	mov	r3, fp
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	f7f9 fdcb 	bl	8000b08 <__aeabi_dcmpgt>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f040 8295 	bne.w	80074a2 <_dtoa_r+0x97a>
 8006f78:	4652      	mov	r2, sl
 8006f7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	f7f9 fda3 	bl	8000acc <__aeabi_dcmplt>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f040 8289 	bne.w	800749e <_dtoa_r+0x976>
 8006f8c:	ec5b ab19 	vmov	sl, fp, d9
 8006f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f2c0 8148 	blt.w	8007228 <_dtoa_r+0x700>
 8006f98:	9a00      	ldr	r2, [sp, #0]
 8006f9a:	2a0e      	cmp	r2, #14
 8006f9c:	f300 8144 	bgt.w	8007228 <_dtoa_r+0x700>
 8006fa0:	4b67      	ldr	r3, [pc, #412]	; (8007140 <_dtoa_r+0x618>)
 8006fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f280 80d5 	bge.w	800715c <_dtoa_r+0x634>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f300 80d1 	bgt.w	800715c <_dtoa_r+0x634>
 8006fba:	f040 826f 	bne.w	800749c <_dtoa_r+0x974>
 8006fbe:	4b65      	ldr	r3, [pc, #404]	; (8007154 <_dtoa_r+0x62c>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	f7f9 fb0f 	bl	80005e8 <__aeabi_dmul>
 8006fca:	4652      	mov	r2, sl
 8006fcc:	465b      	mov	r3, fp
 8006fce:	f7f9 fd91 	bl	8000af4 <__aeabi_dcmpge>
 8006fd2:	9e03      	ldr	r6, [sp, #12]
 8006fd4:	4637      	mov	r7, r6
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f040 8245 	bne.w	8007466 <_dtoa_r+0x93e>
 8006fdc:	9d01      	ldr	r5, [sp, #4]
 8006fde:	2331      	movs	r3, #49	; 0x31
 8006fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8006fe4:	9b00      	ldr	r3, [sp, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	e240      	b.n	800746e <_dtoa_r+0x946>
 8006fec:	07f2      	lsls	r2, r6, #31
 8006fee:	d505      	bpl.n	8006ffc <_dtoa_r+0x4d4>
 8006ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff4:	f7f9 faf8 	bl	80005e8 <__aeabi_dmul>
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	1076      	asrs	r6, r6, #1
 8006ffe:	3708      	adds	r7, #8
 8007000:	e777      	b.n	8006ef2 <_dtoa_r+0x3ca>
 8007002:	2502      	movs	r5, #2
 8007004:	e779      	b.n	8006efa <_dtoa_r+0x3d2>
 8007006:	9f00      	ldr	r7, [sp, #0]
 8007008:	9e03      	ldr	r6, [sp, #12]
 800700a:	e794      	b.n	8006f36 <_dtoa_r+0x40e>
 800700c:	9901      	ldr	r1, [sp, #4]
 800700e:	4b4c      	ldr	r3, [pc, #304]	; (8007140 <_dtoa_r+0x618>)
 8007010:	4431      	add	r1, r6
 8007012:	910d      	str	r1, [sp, #52]	; 0x34
 8007014:	9908      	ldr	r1, [sp, #32]
 8007016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800701a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800701e:	2900      	cmp	r1, #0
 8007020:	d043      	beq.n	80070aa <_dtoa_r+0x582>
 8007022:	494d      	ldr	r1, [pc, #308]	; (8007158 <_dtoa_r+0x630>)
 8007024:	2000      	movs	r0, #0
 8007026:	f7f9 fc09 	bl	800083c <__aeabi_ddiv>
 800702a:	4652      	mov	r2, sl
 800702c:	465b      	mov	r3, fp
 800702e:	f7f9 f923 	bl	8000278 <__aeabi_dsub>
 8007032:	9d01      	ldr	r5, [sp, #4]
 8007034:	4682      	mov	sl, r0
 8007036:	468b      	mov	fp, r1
 8007038:	4649      	mov	r1, r9
 800703a:	4640      	mov	r0, r8
 800703c:	f7f9 fd6e 	bl	8000b1c <__aeabi_d2iz>
 8007040:	4606      	mov	r6, r0
 8007042:	f7f9 fa67 	bl	8000514 <__aeabi_i2d>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 f913 	bl	8000278 <__aeabi_dsub>
 8007052:	3630      	adds	r6, #48	; 0x30
 8007054:	f805 6b01 	strb.w	r6, [r5], #1
 8007058:	4652      	mov	r2, sl
 800705a:	465b      	mov	r3, fp
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	f7f9 fd34 	bl	8000acc <__aeabi_dcmplt>
 8007064:	2800      	cmp	r0, #0
 8007066:	d163      	bne.n	8007130 <_dtoa_r+0x608>
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	4936      	ldr	r1, [pc, #216]	; (8007148 <_dtoa_r+0x620>)
 800706e:	2000      	movs	r0, #0
 8007070:	f7f9 f902 	bl	8000278 <__aeabi_dsub>
 8007074:	4652      	mov	r2, sl
 8007076:	465b      	mov	r3, fp
 8007078:	f7f9 fd28 	bl	8000acc <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 80b5 	bne.w	80071ec <_dtoa_r+0x6c4>
 8007082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007084:	429d      	cmp	r5, r3
 8007086:	d081      	beq.n	8006f8c <_dtoa_r+0x464>
 8007088:	4b30      	ldr	r3, [pc, #192]	; (800714c <_dtoa_r+0x624>)
 800708a:	2200      	movs	r2, #0
 800708c:	4650      	mov	r0, sl
 800708e:	4659      	mov	r1, fp
 8007090:	f7f9 faaa 	bl	80005e8 <__aeabi_dmul>
 8007094:	4b2d      	ldr	r3, [pc, #180]	; (800714c <_dtoa_r+0x624>)
 8007096:	4682      	mov	sl, r0
 8007098:	468b      	mov	fp, r1
 800709a:	4640      	mov	r0, r8
 800709c:	4649      	mov	r1, r9
 800709e:	2200      	movs	r2, #0
 80070a0:	f7f9 faa2 	bl	80005e8 <__aeabi_dmul>
 80070a4:	4680      	mov	r8, r0
 80070a6:	4689      	mov	r9, r1
 80070a8:	e7c6      	b.n	8007038 <_dtoa_r+0x510>
 80070aa:	4650      	mov	r0, sl
 80070ac:	4659      	mov	r1, fp
 80070ae:	f7f9 fa9b 	bl	80005e8 <__aeabi_dmul>
 80070b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070b4:	9d01      	ldr	r5, [sp, #4]
 80070b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070b8:	4682      	mov	sl, r0
 80070ba:	468b      	mov	fp, r1
 80070bc:	4649      	mov	r1, r9
 80070be:	4640      	mov	r0, r8
 80070c0:	f7f9 fd2c 	bl	8000b1c <__aeabi_d2iz>
 80070c4:	4606      	mov	r6, r0
 80070c6:	f7f9 fa25 	bl	8000514 <__aeabi_i2d>
 80070ca:	3630      	adds	r6, #48	; 0x30
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4640      	mov	r0, r8
 80070d2:	4649      	mov	r1, r9
 80070d4:	f7f9 f8d0 	bl	8000278 <__aeabi_dsub>
 80070d8:	f805 6b01 	strb.w	r6, [r5], #1
 80070dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070de:	429d      	cmp	r5, r3
 80070e0:	4680      	mov	r8, r0
 80070e2:	4689      	mov	r9, r1
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	d124      	bne.n	8007134 <_dtoa_r+0x60c>
 80070ea:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <_dtoa_r+0x630>)
 80070ec:	4650      	mov	r0, sl
 80070ee:	4659      	mov	r1, fp
 80070f0:	f7f9 f8c4 	bl	800027c <__adddf3>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4640      	mov	r0, r8
 80070fa:	4649      	mov	r1, r9
 80070fc:	f7f9 fd04 	bl	8000b08 <__aeabi_dcmpgt>
 8007100:	2800      	cmp	r0, #0
 8007102:	d173      	bne.n	80071ec <_dtoa_r+0x6c4>
 8007104:	4652      	mov	r2, sl
 8007106:	465b      	mov	r3, fp
 8007108:	4913      	ldr	r1, [pc, #76]	; (8007158 <_dtoa_r+0x630>)
 800710a:	2000      	movs	r0, #0
 800710c:	f7f9 f8b4 	bl	8000278 <__aeabi_dsub>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4640      	mov	r0, r8
 8007116:	4649      	mov	r1, r9
 8007118:	f7f9 fcd8 	bl	8000acc <__aeabi_dcmplt>
 800711c:	2800      	cmp	r0, #0
 800711e:	f43f af35 	beq.w	8006f8c <_dtoa_r+0x464>
 8007122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007124:	1e6b      	subs	r3, r5, #1
 8007126:	930f      	str	r3, [sp, #60]	; 0x3c
 8007128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800712c:	2b30      	cmp	r3, #48	; 0x30
 800712e:	d0f8      	beq.n	8007122 <_dtoa_r+0x5fa>
 8007130:	9700      	str	r7, [sp, #0]
 8007132:	e049      	b.n	80071c8 <_dtoa_r+0x6a0>
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <_dtoa_r+0x624>)
 8007136:	f7f9 fa57 	bl	80005e8 <__aeabi_dmul>
 800713a:	4680      	mov	r8, r0
 800713c:	4689      	mov	r9, r1
 800713e:	e7bd      	b.n	80070bc <_dtoa_r+0x594>
 8007140:	08009410 	.word	0x08009410
 8007144:	080093e8 	.word	0x080093e8
 8007148:	3ff00000 	.word	0x3ff00000
 800714c:	40240000 	.word	0x40240000
 8007150:	401c0000 	.word	0x401c0000
 8007154:	40140000 	.word	0x40140000
 8007158:	3fe00000 	.word	0x3fe00000
 800715c:	9d01      	ldr	r5, [sp, #4]
 800715e:	4656      	mov	r6, sl
 8007160:	465f      	mov	r7, fp
 8007162:	4642      	mov	r2, r8
 8007164:	464b      	mov	r3, r9
 8007166:	4630      	mov	r0, r6
 8007168:	4639      	mov	r1, r7
 800716a:	f7f9 fb67 	bl	800083c <__aeabi_ddiv>
 800716e:	f7f9 fcd5 	bl	8000b1c <__aeabi_d2iz>
 8007172:	4682      	mov	sl, r0
 8007174:	f7f9 f9ce 	bl	8000514 <__aeabi_i2d>
 8007178:	4642      	mov	r2, r8
 800717a:	464b      	mov	r3, r9
 800717c:	f7f9 fa34 	bl	80005e8 <__aeabi_dmul>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4630      	mov	r0, r6
 8007186:	4639      	mov	r1, r7
 8007188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800718c:	f7f9 f874 	bl	8000278 <__aeabi_dsub>
 8007190:	f805 6b01 	strb.w	r6, [r5], #1
 8007194:	9e01      	ldr	r6, [sp, #4]
 8007196:	9f03      	ldr	r7, [sp, #12]
 8007198:	1bae      	subs	r6, r5, r6
 800719a:	42b7      	cmp	r7, r6
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	d135      	bne.n	800720e <_dtoa_r+0x6e6>
 80071a2:	f7f9 f86b 	bl	800027c <__adddf3>
 80071a6:	4642      	mov	r2, r8
 80071a8:	464b      	mov	r3, r9
 80071aa:	4606      	mov	r6, r0
 80071ac:	460f      	mov	r7, r1
 80071ae:	f7f9 fcab 	bl	8000b08 <__aeabi_dcmpgt>
 80071b2:	b9d0      	cbnz	r0, 80071ea <_dtoa_r+0x6c2>
 80071b4:	4642      	mov	r2, r8
 80071b6:	464b      	mov	r3, r9
 80071b8:	4630      	mov	r0, r6
 80071ba:	4639      	mov	r1, r7
 80071bc:	f7f9 fc7c 	bl	8000ab8 <__aeabi_dcmpeq>
 80071c0:	b110      	cbz	r0, 80071c8 <_dtoa_r+0x6a0>
 80071c2:	f01a 0f01 	tst.w	sl, #1
 80071c6:	d110      	bne.n	80071ea <_dtoa_r+0x6c2>
 80071c8:	4620      	mov	r0, r4
 80071ca:	ee18 1a10 	vmov	r1, s16
 80071ce:	f7fe ffdb 	bl	8006188 <_Bfree>
 80071d2:	2300      	movs	r3, #0
 80071d4:	9800      	ldr	r0, [sp, #0]
 80071d6:	702b      	strb	r3, [r5, #0]
 80071d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071da:	3001      	adds	r0, #1
 80071dc:	6018      	str	r0, [r3, #0]
 80071de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f43f acf1 	beq.w	8006bc8 <_dtoa_r+0xa0>
 80071e6:	601d      	str	r5, [r3, #0]
 80071e8:	e4ee      	b.n	8006bc8 <_dtoa_r+0xa0>
 80071ea:	9f00      	ldr	r7, [sp, #0]
 80071ec:	462b      	mov	r3, r5
 80071ee:	461d      	mov	r5, r3
 80071f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071f4:	2a39      	cmp	r2, #57	; 0x39
 80071f6:	d106      	bne.n	8007206 <_dtoa_r+0x6de>
 80071f8:	9a01      	ldr	r2, [sp, #4]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d1f7      	bne.n	80071ee <_dtoa_r+0x6c6>
 80071fe:	9901      	ldr	r1, [sp, #4]
 8007200:	2230      	movs	r2, #48	; 0x30
 8007202:	3701      	adds	r7, #1
 8007204:	700a      	strb	r2, [r1, #0]
 8007206:	781a      	ldrb	r2, [r3, #0]
 8007208:	3201      	adds	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e790      	b.n	8007130 <_dtoa_r+0x608>
 800720e:	4ba6      	ldr	r3, [pc, #664]	; (80074a8 <_dtoa_r+0x980>)
 8007210:	2200      	movs	r2, #0
 8007212:	f7f9 f9e9 	bl	80005e8 <__aeabi_dmul>
 8007216:	2200      	movs	r2, #0
 8007218:	2300      	movs	r3, #0
 800721a:	4606      	mov	r6, r0
 800721c:	460f      	mov	r7, r1
 800721e:	f7f9 fc4b 	bl	8000ab8 <__aeabi_dcmpeq>
 8007222:	2800      	cmp	r0, #0
 8007224:	d09d      	beq.n	8007162 <_dtoa_r+0x63a>
 8007226:	e7cf      	b.n	80071c8 <_dtoa_r+0x6a0>
 8007228:	9a08      	ldr	r2, [sp, #32]
 800722a:	2a00      	cmp	r2, #0
 800722c:	f000 80d7 	beq.w	80073de <_dtoa_r+0x8b6>
 8007230:	9a06      	ldr	r2, [sp, #24]
 8007232:	2a01      	cmp	r2, #1
 8007234:	f300 80ba 	bgt.w	80073ac <_dtoa_r+0x884>
 8007238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800723a:	2a00      	cmp	r2, #0
 800723c:	f000 80b2 	beq.w	80073a4 <_dtoa_r+0x87c>
 8007240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007244:	9e07      	ldr	r6, [sp, #28]
 8007246:	9d04      	ldr	r5, [sp, #16]
 8007248:	9a04      	ldr	r2, [sp, #16]
 800724a:	441a      	add	r2, r3
 800724c:	9204      	str	r2, [sp, #16]
 800724e:	9a05      	ldr	r2, [sp, #20]
 8007250:	2101      	movs	r1, #1
 8007252:	441a      	add	r2, r3
 8007254:	4620      	mov	r0, r4
 8007256:	9205      	str	r2, [sp, #20]
 8007258:	f7ff f84e 	bl	80062f8 <__i2b>
 800725c:	4607      	mov	r7, r0
 800725e:	2d00      	cmp	r5, #0
 8007260:	dd0c      	ble.n	800727c <_dtoa_r+0x754>
 8007262:	9b05      	ldr	r3, [sp, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dd09      	ble.n	800727c <_dtoa_r+0x754>
 8007268:	42ab      	cmp	r3, r5
 800726a:	9a04      	ldr	r2, [sp, #16]
 800726c:	bfa8      	it	ge
 800726e:	462b      	movge	r3, r5
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	9204      	str	r2, [sp, #16]
 8007274:	9a05      	ldr	r2, [sp, #20]
 8007276:	1aed      	subs	r5, r5, r3
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	9305      	str	r3, [sp, #20]
 800727c:	9b07      	ldr	r3, [sp, #28]
 800727e:	b31b      	cbz	r3, 80072c8 <_dtoa_r+0x7a0>
 8007280:	9b08      	ldr	r3, [sp, #32]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80af 	beq.w	80073e6 <_dtoa_r+0x8be>
 8007288:	2e00      	cmp	r6, #0
 800728a:	dd13      	ble.n	80072b4 <_dtoa_r+0x78c>
 800728c:	4639      	mov	r1, r7
 800728e:	4632      	mov	r2, r6
 8007290:	4620      	mov	r0, r4
 8007292:	f7ff f8f1 	bl	8006478 <__pow5mult>
 8007296:	ee18 2a10 	vmov	r2, s16
 800729a:	4601      	mov	r1, r0
 800729c:	4607      	mov	r7, r0
 800729e:	4620      	mov	r0, r4
 80072a0:	f7ff f840 	bl	8006324 <__multiply>
 80072a4:	ee18 1a10 	vmov	r1, s16
 80072a8:	4680      	mov	r8, r0
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7fe ff6c 	bl	8006188 <_Bfree>
 80072b0:	ee08 8a10 	vmov	s16, r8
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	1b9a      	subs	r2, r3, r6
 80072b8:	d006      	beq.n	80072c8 <_dtoa_r+0x7a0>
 80072ba:	ee18 1a10 	vmov	r1, s16
 80072be:	4620      	mov	r0, r4
 80072c0:	f7ff f8da 	bl	8006478 <__pow5mult>
 80072c4:	ee08 0a10 	vmov	s16, r0
 80072c8:	2101      	movs	r1, #1
 80072ca:	4620      	mov	r0, r4
 80072cc:	f7ff f814 	bl	80062f8 <__i2b>
 80072d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	4606      	mov	r6, r0
 80072d6:	f340 8088 	ble.w	80073ea <_dtoa_r+0x8c2>
 80072da:	461a      	mov	r2, r3
 80072dc:	4601      	mov	r1, r0
 80072de:	4620      	mov	r0, r4
 80072e0:	f7ff f8ca 	bl	8006478 <__pow5mult>
 80072e4:	9b06      	ldr	r3, [sp, #24]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	4606      	mov	r6, r0
 80072ea:	f340 8081 	ble.w	80073f0 <_dtoa_r+0x8c8>
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	6933      	ldr	r3, [r6, #16]
 80072f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072f8:	6918      	ldr	r0, [r3, #16]
 80072fa:	f7fe ffad 	bl	8006258 <__hi0bits>
 80072fe:	f1c0 0020 	rsb	r0, r0, #32
 8007302:	9b05      	ldr	r3, [sp, #20]
 8007304:	4418      	add	r0, r3
 8007306:	f010 001f 	ands.w	r0, r0, #31
 800730a:	f000 8092 	beq.w	8007432 <_dtoa_r+0x90a>
 800730e:	f1c0 0320 	rsb	r3, r0, #32
 8007312:	2b04      	cmp	r3, #4
 8007314:	f340 808a 	ble.w	800742c <_dtoa_r+0x904>
 8007318:	f1c0 001c 	rsb	r0, r0, #28
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	4403      	add	r3, r0
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	9b05      	ldr	r3, [sp, #20]
 8007324:	4403      	add	r3, r0
 8007326:	4405      	add	r5, r0
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dd07      	ble.n	8007340 <_dtoa_r+0x818>
 8007330:	ee18 1a10 	vmov	r1, s16
 8007334:	461a      	mov	r2, r3
 8007336:	4620      	mov	r0, r4
 8007338:	f7ff f8f8 	bl	800652c <__lshift>
 800733c:	ee08 0a10 	vmov	s16, r0
 8007340:	9b05      	ldr	r3, [sp, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd05      	ble.n	8007352 <_dtoa_r+0x82a>
 8007346:	4631      	mov	r1, r6
 8007348:	461a      	mov	r2, r3
 800734a:	4620      	mov	r0, r4
 800734c:	f7ff f8ee 	bl	800652c <__lshift>
 8007350:	4606      	mov	r6, r0
 8007352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	d06e      	beq.n	8007436 <_dtoa_r+0x90e>
 8007358:	ee18 0a10 	vmov	r0, s16
 800735c:	4631      	mov	r1, r6
 800735e:	f7ff f955 	bl	800660c <__mcmp>
 8007362:	2800      	cmp	r0, #0
 8007364:	da67      	bge.n	8007436 <_dtoa_r+0x90e>
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	3b01      	subs	r3, #1
 800736a:	ee18 1a10 	vmov	r1, s16
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	220a      	movs	r2, #10
 8007372:	2300      	movs	r3, #0
 8007374:	4620      	mov	r0, r4
 8007376:	f7fe ff29 	bl	80061cc <__multadd>
 800737a:	9b08      	ldr	r3, [sp, #32]
 800737c:	ee08 0a10 	vmov	s16, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 81b1 	beq.w	80076e8 <_dtoa_r+0xbc0>
 8007386:	2300      	movs	r3, #0
 8007388:	4639      	mov	r1, r7
 800738a:	220a      	movs	r2, #10
 800738c:	4620      	mov	r0, r4
 800738e:	f7fe ff1d 	bl	80061cc <__multadd>
 8007392:	9b02      	ldr	r3, [sp, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	4607      	mov	r7, r0
 8007398:	f300 808e 	bgt.w	80074b8 <_dtoa_r+0x990>
 800739c:	9b06      	ldr	r3, [sp, #24]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	dc51      	bgt.n	8007446 <_dtoa_r+0x91e>
 80073a2:	e089      	b.n	80074b8 <_dtoa_r+0x990>
 80073a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073aa:	e74b      	b.n	8007244 <_dtoa_r+0x71c>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	1e5e      	subs	r6, r3, #1
 80073b0:	9b07      	ldr	r3, [sp, #28]
 80073b2:	42b3      	cmp	r3, r6
 80073b4:	bfbf      	itttt	lt
 80073b6:	9b07      	ldrlt	r3, [sp, #28]
 80073b8:	9607      	strlt	r6, [sp, #28]
 80073ba:	1af2      	sublt	r2, r6, r3
 80073bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073be:	bfb6      	itet	lt
 80073c0:	189b      	addlt	r3, r3, r2
 80073c2:	1b9e      	subge	r6, r3, r6
 80073c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	bfb8      	it	lt
 80073ca:	2600      	movlt	r6, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bfb7      	itett	lt
 80073d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80073d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80073d8:	1a9d      	sublt	r5, r3, r2
 80073da:	2300      	movlt	r3, #0
 80073dc:	e734      	b.n	8007248 <_dtoa_r+0x720>
 80073de:	9e07      	ldr	r6, [sp, #28]
 80073e0:	9d04      	ldr	r5, [sp, #16]
 80073e2:	9f08      	ldr	r7, [sp, #32]
 80073e4:	e73b      	b.n	800725e <_dtoa_r+0x736>
 80073e6:	9a07      	ldr	r2, [sp, #28]
 80073e8:	e767      	b.n	80072ba <_dtoa_r+0x792>
 80073ea:	9b06      	ldr	r3, [sp, #24]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	dc18      	bgt.n	8007422 <_dtoa_r+0x8fa>
 80073f0:	f1ba 0f00 	cmp.w	sl, #0
 80073f4:	d115      	bne.n	8007422 <_dtoa_r+0x8fa>
 80073f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073fa:	b993      	cbnz	r3, 8007422 <_dtoa_r+0x8fa>
 80073fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007400:	0d1b      	lsrs	r3, r3, #20
 8007402:	051b      	lsls	r3, r3, #20
 8007404:	b183      	cbz	r3, 8007428 <_dtoa_r+0x900>
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	3301      	adds	r3, #1
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	3301      	adds	r3, #1
 8007410:	9305      	str	r3, [sp, #20]
 8007412:	f04f 0801 	mov.w	r8, #1
 8007416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007418:	2b00      	cmp	r3, #0
 800741a:	f47f af6a 	bne.w	80072f2 <_dtoa_r+0x7ca>
 800741e:	2001      	movs	r0, #1
 8007420:	e76f      	b.n	8007302 <_dtoa_r+0x7da>
 8007422:	f04f 0800 	mov.w	r8, #0
 8007426:	e7f6      	b.n	8007416 <_dtoa_r+0x8ee>
 8007428:	4698      	mov	r8, r3
 800742a:	e7f4      	b.n	8007416 <_dtoa_r+0x8ee>
 800742c:	f43f af7d 	beq.w	800732a <_dtoa_r+0x802>
 8007430:	4618      	mov	r0, r3
 8007432:	301c      	adds	r0, #28
 8007434:	e772      	b.n	800731c <_dtoa_r+0x7f4>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	dc37      	bgt.n	80074ac <_dtoa_r+0x984>
 800743c:	9b06      	ldr	r3, [sp, #24]
 800743e:	2b02      	cmp	r3, #2
 8007440:	dd34      	ble.n	80074ac <_dtoa_r+0x984>
 8007442:	9b03      	ldr	r3, [sp, #12]
 8007444:	9302      	str	r3, [sp, #8]
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	b96b      	cbnz	r3, 8007466 <_dtoa_r+0x93e>
 800744a:	4631      	mov	r1, r6
 800744c:	2205      	movs	r2, #5
 800744e:	4620      	mov	r0, r4
 8007450:	f7fe febc 	bl	80061cc <__multadd>
 8007454:	4601      	mov	r1, r0
 8007456:	4606      	mov	r6, r0
 8007458:	ee18 0a10 	vmov	r0, s16
 800745c:	f7ff f8d6 	bl	800660c <__mcmp>
 8007460:	2800      	cmp	r0, #0
 8007462:	f73f adbb 	bgt.w	8006fdc <_dtoa_r+0x4b4>
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	9d01      	ldr	r5, [sp, #4]
 800746a:	43db      	mvns	r3, r3
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	f04f 0800 	mov.w	r8, #0
 8007472:	4631      	mov	r1, r6
 8007474:	4620      	mov	r0, r4
 8007476:	f7fe fe87 	bl	8006188 <_Bfree>
 800747a:	2f00      	cmp	r7, #0
 800747c:	f43f aea4 	beq.w	80071c8 <_dtoa_r+0x6a0>
 8007480:	f1b8 0f00 	cmp.w	r8, #0
 8007484:	d005      	beq.n	8007492 <_dtoa_r+0x96a>
 8007486:	45b8      	cmp	r8, r7
 8007488:	d003      	beq.n	8007492 <_dtoa_r+0x96a>
 800748a:	4641      	mov	r1, r8
 800748c:	4620      	mov	r0, r4
 800748e:	f7fe fe7b 	bl	8006188 <_Bfree>
 8007492:	4639      	mov	r1, r7
 8007494:	4620      	mov	r0, r4
 8007496:	f7fe fe77 	bl	8006188 <_Bfree>
 800749a:	e695      	b.n	80071c8 <_dtoa_r+0x6a0>
 800749c:	2600      	movs	r6, #0
 800749e:	4637      	mov	r7, r6
 80074a0:	e7e1      	b.n	8007466 <_dtoa_r+0x93e>
 80074a2:	9700      	str	r7, [sp, #0]
 80074a4:	4637      	mov	r7, r6
 80074a6:	e599      	b.n	8006fdc <_dtoa_r+0x4b4>
 80074a8:	40240000 	.word	0x40240000
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 80ca 	beq.w	8007648 <_dtoa_r+0xb20>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	9302      	str	r3, [sp, #8]
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	dd05      	ble.n	80074c8 <_dtoa_r+0x9a0>
 80074bc:	4639      	mov	r1, r7
 80074be:	462a      	mov	r2, r5
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7ff f833 	bl	800652c <__lshift>
 80074c6:	4607      	mov	r7, r0
 80074c8:	f1b8 0f00 	cmp.w	r8, #0
 80074cc:	d05b      	beq.n	8007586 <_dtoa_r+0xa5e>
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	4620      	mov	r0, r4
 80074d2:	f7fe fe19 	bl	8006108 <_Balloc>
 80074d6:	4605      	mov	r5, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <_dtoa_r+0x9be>
 80074da:	4b87      	ldr	r3, [pc, #540]	; (80076f8 <_dtoa_r+0xbd0>)
 80074dc:	4602      	mov	r2, r0
 80074de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80074e2:	f7ff bb3b 	b.w	8006b5c <_dtoa_r+0x34>
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	3202      	adds	r2, #2
 80074ea:	0092      	lsls	r2, r2, #2
 80074ec:	f107 010c 	add.w	r1, r7, #12
 80074f0:	300c      	adds	r0, #12
 80074f2:	f000 f921 	bl	8007738 <memcpy>
 80074f6:	2201      	movs	r2, #1
 80074f8:	4629      	mov	r1, r5
 80074fa:	4620      	mov	r0, r4
 80074fc:	f7ff f816 	bl	800652c <__lshift>
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	f103 0901 	add.w	r9, r3, #1
 8007506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800750a:	4413      	add	r3, r2
 800750c:	9305      	str	r3, [sp, #20]
 800750e:	f00a 0301 	and.w	r3, sl, #1
 8007512:	46b8      	mov	r8, r7
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	4607      	mov	r7, r0
 8007518:	4631      	mov	r1, r6
 800751a:	ee18 0a10 	vmov	r0, s16
 800751e:	f7ff fa75 	bl	8006a0c <quorem>
 8007522:	4641      	mov	r1, r8
 8007524:	9002      	str	r0, [sp, #8]
 8007526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800752a:	ee18 0a10 	vmov	r0, s16
 800752e:	f7ff f86d 	bl	800660c <__mcmp>
 8007532:	463a      	mov	r2, r7
 8007534:	9003      	str	r0, [sp, #12]
 8007536:	4631      	mov	r1, r6
 8007538:	4620      	mov	r0, r4
 800753a:	f7ff f883 	bl	8006644 <__mdiff>
 800753e:	68c2      	ldr	r2, [r0, #12]
 8007540:	f109 3bff 	add.w	fp, r9, #4294967295
 8007544:	4605      	mov	r5, r0
 8007546:	bb02      	cbnz	r2, 800758a <_dtoa_r+0xa62>
 8007548:	4601      	mov	r1, r0
 800754a:	ee18 0a10 	vmov	r0, s16
 800754e:	f7ff f85d 	bl	800660c <__mcmp>
 8007552:	4602      	mov	r2, r0
 8007554:	4629      	mov	r1, r5
 8007556:	4620      	mov	r0, r4
 8007558:	9207      	str	r2, [sp, #28]
 800755a:	f7fe fe15 	bl	8006188 <_Bfree>
 800755e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007562:	ea43 0102 	orr.w	r1, r3, r2
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	430b      	orrs	r3, r1
 800756a:	464d      	mov	r5, r9
 800756c:	d10f      	bne.n	800758e <_dtoa_r+0xa66>
 800756e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007572:	d02a      	beq.n	80075ca <_dtoa_r+0xaa2>
 8007574:	9b03      	ldr	r3, [sp, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	dd02      	ble.n	8007580 <_dtoa_r+0xa58>
 800757a:	9b02      	ldr	r3, [sp, #8]
 800757c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007580:	f88b a000 	strb.w	sl, [fp]
 8007584:	e775      	b.n	8007472 <_dtoa_r+0x94a>
 8007586:	4638      	mov	r0, r7
 8007588:	e7ba      	b.n	8007500 <_dtoa_r+0x9d8>
 800758a:	2201      	movs	r2, #1
 800758c:	e7e2      	b.n	8007554 <_dtoa_r+0xa2c>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	db04      	blt.n	800759e <_dtoa_r+0xa76>
 8007594:	9906      	ldr	r1, [sp, #24]
 8007596:	430b      	orrs	r3, r1
 8007598:	9904      	ldr	r1, [sp, #16]
 800759a:	430b      	orrs	r3, r1
 800759c:	d122      	bne.n	80075e4 <_dtoa_r+0xabc>
 800759e:	2a00      	cmp	r2, #0
 80075a0:	ddee      	ble.n	8007580 <_dtoa_r+0xa58>
 80075a2:	ee18 1a10 	vmov	r1, s16
 80075a6:	2201      	movs	r2, #1
 80075a8:	4620      	mov	r0, r4
 80075aa:	f7fe ffbf 	bl	800652c <__lshift>
 80075ae:	4631      	mov	r1, r6
 80075b0:	ee08 0a10 	vmov	s16, r0
 80075b4:	f7ff f82a 	bl	800660c <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	dc03      	bgt.n	80075c4 <_dtoa_r+0xa9c>
 80075bc:	d1e0      	bne.n	8007580 <_dtoa_r+0xa58>
 80075be:	f01a 0f01 	tst.w	sl, #1
 80075c2:	d0dd      	beq.n	8007580 <_dtoa_r+0xa58>
 80075c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075c8:	d1d7      	bne.n	800757a <_dtoa_r+0xa52>
 80075ca:	2339      	movs	r3, #57	; 0x39
 80075cc:	f88b 3000 	strb.w	r3, [fp]
 80075d0:	462b      	mov	r3, r5
 80075d2:	461d      	mov	r5, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075da:	2a39      	cmp	r2, #57	; 0x39
 80075dc:	d071      	beq.n	80076c2 <_dtoa_r+0xb9a>
 80075de:	3201      	adds	r2, #1
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	e746      	b.n	8007472 <_dtoa_r+0x94a>
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	dd07      	ble.n	80075f8 <_dtoa_r+0xad0>
 80075e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075ec:	d0ed      	beq.n	80075ca <_dtoa_r+0xaa2>
 80075ee:	f10a 0301 	add.w	r3, sl, #1
 80075f2:	f88b 3000 	strb.w	r3, [fp]
 80075f6:	e73c      	b.n	8007472 <_dtoa_r+0x94a>
 80075f8:	9b05      	ldr	r3, [sp, #20]
 80075fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80075fe:	4599      	cmp	r9, r3
 8007600:	d047      	beq.n	8007692 <_dtoa_r+0xb6a>
 8007602:	ee18 1a10 	vmov	r1, s16
 8007606:	2300      	movs	r3, #0
 8007608:	220a      	movs	r2, #10
 800760a:	4620      	mov	r0, r4
 800760c:	f7fe fdde 	bl	80061cc <__multadd>
 8007610:	45b8      	cmp	r8, r7
 8007612:	ee08 0a10 	vmov	s16, r0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	f04f 020a 	mov.w	r2, #10
 800761e:	4641      	mov	r1, r8
 8007620:	4620      	mov	r0, r4
 8007622:	d106      	bne.n	8007632 <_dtoa_r+0xb0a>
 8007624:	f7fe fdd2 	bl	80061cc <__multadd>
 8007628:	4680      	mov	r8, r0
 800762a:	4607      	mov	r7, r0
 800762c:	f109 0901 	add.w	r9, r9, #1
 8007630:	e772      	b.n	8007518 <_dtoa_r+0x9f0>
 8007632:	f7fe fdcb 	bl	80061cc <__multadd>
 8007636:	4639      	mov	r1, r7
 8007638:	4680      	mov	r8, r0
 800763a:	2300      	movs	r3, #0
 800763c:	220a      	movs	r2, #10
 800763e:	4620      	mov	r0, r4
 8007640:	f7fe fdc4 	bl	80061cc <__multadd>
 8007644:	4607      	mov	r7, r0
 8007646:	e7f1      	b.n	800762c <_dtoa_r+0xb04>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	9302      	str	r3, [sp, #8]
 800764c:	9d01      	ldr	r5, [sp, #4]
 800764e:	ee18 0a10 	vmov	r0, s16
 8007652:	4631      	mov	r1, r6
 8007654:	f7ff f9da 	bl	8006a0c <quorem>
 8007658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	f805 ab01 	strb.w	sl, [r5], #1
 8007662:	1aea      	subs	r2, r5, r3
 8007664:	9b02      	ldr	r3, [sp, #8]
 8007666:	4293      	cmp	r3, r2
 8007668:	dd09      	ble.n	800767e <_dtoa_r+0xb56>
 800766a:	ee18 1a10 	vmov	r1, s16
 800766e:	2300      	movs	r3, #0
 8007670:	220a      	movs	r2, #10
 8007672:	4620      	mov	r0, r4
 8007674:	f7fe fdaa 	bl	80061cc <__multadd>
 8007678:	ee08 0a10 	vmov	s16, r0
 800767c:	e7e7      	b.n	800764e <_dtoa_r+0xb26>
 800767e:	9b02      	ldr	r3, [sp, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfc8      	it	gt
 8007684:	461d      	movgt	r5, r3
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	bfd8      	it	le
 800768a:	2501      	movle	r5, #1
 800768c:	441d      	add	r5, r3
 800768e:	f04f 0800 	mov.w	r8, #0
 8007692:	ee18 1a10 	vmov	r1, s16
 8007696:	2201      	movs	r2, #1
 8007698:	4620      	mov	r0, r4
 800769a:	f7fe ff47 	bl	800652c <__lshift>
 800769e:	4631      	mov	r1, r6
 80076a0:	ee08 0a10 	vmov	s16, r0
 80076a4:	f7fe ffb2 	bl	800660c <__mcmp>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	dc91      	bgt.n	80075d0 <_dtoa_r+0xaa8>
 80076ac:	d102      	bne.n	80076b4 <_dtoa_r+0xb8c>
 80076ae:	f01a 0f01 	tst.w	sl, #1
 80076b2:	d18d      	bne.n	80075d0 <_dtoa_r+0xaa8>
 80076b4:	462b      	mov	r3, r5
 80076b6:	461d      	mov	r5, r3
 80076b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076bc:	2a30      	cmp	r2, #48	; 0x30
 80076be:	d0fa      	beq.n	80076b6 <_dtoa_r+0xb8e>
 80076c0:	e6d7      	b.n	8007472 <_dtoa_r+0x94a>
 80076c2:	9a01      	ldr	r2, [sp, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d184      	bne.n	80075d2 <_dtoa_r+0xaaa>
 80076c8:	9b00      	ldr	r3, [sp, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2331      	movs	r3, #49	; 0x31
 80076d0:	7013      	strb	r3, [r2, #0]
 80076d2:	e6ce      	b.n	8007472 <_dtoa_r+0x94a>
 80076d4:	4b09      	ldr	r3, [pc, #36]	; (80076fc <_dtoa_r+0xbd4>)
 80076d6:	f7ff ba95 	b.w	8006c04 <_dtoa_r+0xdc>
 80076da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f47f aa6e 	bne.w	8006bbe <_dtoa_r+0x96>
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <_dtoa_r+0xbd8>)
 80076e4:	f7ff ba8e 	b.w	8006c04 <_dtoa_r+0xdc>
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dcae      	bgt.n	800764c <_dtoa_r+0xb24>
 80076ee:	9b06      	ldr	r3, [sp, #24]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	f73f aea8 	bgt.w	8007446 <_dtoa_r+0x91e>
 80076f6:	e7a9      	b.n	800764c <_dtoa_r+0xb24>
 80076f8:	080093d3 	.word	0x080093d3
 80076fc:	0800952d 	.word	0x0800952d
 8007700:	08009520 	.word	0x08009520

08007704 <fiprintf>:
 8007704:	b40e      	push	{r1, r2, r3}
 8007706:	b503      	push	{r0, r1, lr}
 8007708:	4601      	mov	r1, r0
 800770a:	ab03      	add	r3, sp, #12
 800770c:	4805      	ldr	r0, [pc, #20]	; (8007724 <fiprintf+0x20>)
 800770e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007712:	6800      	ldr	r0, [r0, #0]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	f000 f89f 	bl	8007858 <_vfiprintf_r>
 800771a:	b002      	add	sp, #8
 800771c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007720:	b003      	add	sp, #12
 8007722:	4770      	bx	lr
 8007724:	20000014 	.word	0x20000014

08007728 <malloc>:
 8007728:	4b02      	ldr	r3, [pc, #8]	; (8007734 <malloc+0xc>)
 800772a:	4601      	mov	r1, r0
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	f7ff b8c3 	b.w	80068b8 <_malloc_r>
 8007732:	bf00      	nop
 8007734:	20000014 	.word	0x20000014

08007738 <memcpy>:
 8007738:	440a      	add	r2, r1
 800773a:	4291      	cmp	r1, r2
 800773c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007740:	d100      	bne.n	8007744 <memcpy+0xc>
 8007742:	4770      	bx	lr
 8007744:	b510      	push	{r4, lr}
 8007746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800774a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800774e:	4291      	cmp	r1, r2
 8007750:	d1f9      	bne.n	8007746 <memcpy+0xe>
 8007752:	bd10      	pop	{r4, pc}

08007754 <__malloc_lock>:
 8007754:	4801      	ldr	r0, [pc, #4]	; (800775c <__malloc_lock+0x8>)
 8007756:	f000 bdc3 	b.w	80082e0 <__retarget_lock_acquire_recursive>
 800775a:	bf00      	nop
 800775c:	200005ec 	.word	0x200005ec

08007760 <__malloc_unlock>:
 8007760:	4801      	ldr	r0, [pc, #4]	; (8007768 <__malloc_unlock+0x8>)
 8007762:	f000 bdbe 	b.w	80082e2 <__retarget_lock_release_recursive>
 8007766:	bf00      	nop
 8007768:	200005ec 	.word	0x200005ec

0800776c <_free_r>:
 800776c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800776e:	2900      	cmp	r1, #0
 8007770:	d044      	beq.n	80077fc <_free_r+0x90>
 8007772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007776:	9001      	str	r0, [sp, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f1a1 0404 	sub.w	r4, r1, #4
 800777e:	bfb8      	it	lt
 8007780:	18e4      	addlt	r4, r4, r3
 8007782:	f7ff ffe7 	bl	8007754 <__malloc_lock>
 8007786:	4a1e      	ldr	r2, [pc, #120]	; (8007800 <_free_r+0x94>)
 8007788:	9801      	ldr	r0, [sp, #4]
 800778a:	6813      	ldr	r3, [r2, #0]
 800778c:	b933      	cbnz	r3, 800779c <_free_r+0x30>
 800778e:	6063      	str	r3, [r4, #4]
 8007790:	6014      	str	r4, [r2, #0]
 8007792:	b003      	add	sp, #12
 8007794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007798:	f7ff bfe2 	b.w	8007760 <__malloc_unlock>
 800779c:	42a3      	cmp	r3, r4
 800779e:	d908      	bls.n	80077b2 <_free_r+0x46>
 80077a0:	6825      	ldr	r5, [r4, #0]
 80077a2:	1961      	adds	r1, r4, r5
 80077a4:	428b      	cmp	r3, r1
 80077a6:	bf01      	itttt	eq
 80077a8:	6819      	ldreq	r1, [r3, #0]
 80077aa:	685b      	ldreq	r3, [r3, #4]
 80077ac:	1949      	addeq	r1, r1, r5
 80077ae:	6021      	streq	r1, [r4, #0]
 80077b0:	e7ed      	b.n	800778e <_free_r+0x22>
 80077b2:	461a      	mov	r2, r3
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	b10b      	cbz	r3, 80077bc <_free_r+0x50>
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d9fa      	bls.n	80077b2 <_free_r+0x46>
 80077bc:	6811      	ldr	r1, [r2, #0]
 80077be:	1855      	adds	r5, r2, r1
 80077c0:	42a5      	cmp	r5, r4
 80077c2:	d10b      	bne.n	80077dc <_free_r+0x70>
 80077c4:	6824      	ldr	r4, [r4, #0]
 80077c6:	4421      	add	r1, r4
 80077c8:	1854      	adds	r4, r2, r1
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	6011      	str	r1, [r2, #0]
 80077ce:	d1e0      	bne.n	8007792 <_free_r+0x26>
 80077d0:	681c      	ldr	r4, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	6053      	str	r3, [r2, #4]
 80077d6:	4421      	add	r1, r4
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	e7da      	b.n	8007792 <_free_r+0x26>
 80077dc:	d902      	bls.n	80077e4 <_free_r+0x78>
 80077de:	230c      	movs	r3, #12
 80077e0:	6003      	str	r3, [r0, #0]
 80077e2:	e7d6      	b.n	8007792 <_free_r+0x26>
 80077e4:	6825      	ldr	r5, [r4, #0]
 80077e6:	1961      	adds	r1, r4, r5
 80077e8:	428b      	cmp	r3, r1
 80077ea:	bf04      	itt	eq
 80077ec:	6819      	ldreq	r1, [r3, #0]
 80077ee:	685b      	ldreq	r3, [r3, #4]
 80077f0:	6063      	str	r3, [r4, #4]
 80077f2:	bf04      	itt	eq
 80077f4:	1949      	addeq	r1, r1, r5
 80077f6:	6021      	streq	r1, [r4, #0]
 80077f8:	6054      	str	r4, [r2, #4]
 80077fa:	e7ca      	b.n	8007792 <_free_r+0x26>
 80077fc:	b003      	add	sp, #12
 80077fe:	bd30      	pop	{r4, r5, pc}
 8007800:	200005e0 	.word	0x200005e0

08007804 <__sfputc_r>:
 8007804:	6893      	ldr	r3, [r2, #8]
 8007806:	3b01      	subs	r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	b410      	push	{r4}
 800780c:	6093      	str	r3, [r2, #8]
 800780e:	da08      	bge.n	8007822 <__sfputc_r+0x1e>
 8007810:	6994      	ldr	r4, [r2, #24]
 8007812:	42a3      	cmp	r3, r4
 8007814:	db01      	blt.n	800781a <__sfputc_r+0x16>
 8007816:	290a      	cmp	r1, #10
 8007818:	d103      	bne.n	8007822 <__sfputc_r+0x1e>
 800781a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781e:	f000 badf 	b.w	8007de0 <__swbuf_r>
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	1c58      	adds	r0, r3, #1
 8007826:	6010      	str	r0, [r2, #0]
 8007828:	7019      	strb	r1, [r3, #0]
 800782a:	4608      	mov	r0, r1
 800782c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007830:	4770      	bx	lr

08007832 <__sfputs_r>:
 8007832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007834:	4606      	mov	r6, r0
 8007836:	460f      	mov	r7, r1
 8007838:	4614      	mov	r4, r2
 800783a:	18d5      	adds	r5, r2, r3
 800783c:	42ac      	cmp	r4, r5
 800783e:	d101      	bne.n	8007844 <__sfputs_r+0x12>
 8007840:	2000      	movs	r0, #0
 8007842:	e007      	b.n	8007854 <__sfputs_r+0x22>
 8007844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007848:	463a      	mov	r2, r7
 800784a:	4630      	mov	r0, r6
 800784c:	f7ff ffda 	bl	8007804 <__sfputc_r>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d1f3      	bne.n	800783c <__sfputs_r+0xa>
 8007854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007858 <_vfiprintf_r>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	460d      	mov	r5, r1
 800785e:	b09d      	sub	sp, #116	; 0x74
 8007860:	4614      	mov	r4, r2
 8007862:	4698      	mov	r8, r3
 8007864:	4606      	mov	r6, r0
 8007866:	b118      	cbz	r0, 8007870 <_vfiprintf_r+0x18>
 8007868:	6983      	ldr	r3, [r0, #24]
 800786a:	b90b      	cbnz	r3, 8007870 <_vfiprintf_r+0x18>
 800786c:	f000 fc9a 	bl	80081a4 <__sinit>
 8007870:	4b89      	ldr	r3, [pc, #548]	; (8007a98 <_vfiprintf_r+0x240>)
 8007872:	429d      	cmp	r5, r3
 8007874:	d11b      	bne.n	80078ae <_vfiprintf_r+0x56>
 8007876:	6875      	ldr	r5, [r6, #4]
 8007878:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800787a:	07d9      	lsls	r1, r3, #31
 800787c:	d405      	bmi.n	800788a <_vfiprintf_r+0x32>
 800787e:	89ab      	ldrh	r3, [r5, #12]
 8007880:	059a      	lsls	r2, r3, #22
 8007882:	d402      	bmi.n	800788a <_vfiprintf_r+0x32>
 8007884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007886:	f000 fd2b 	bl	80082e0 <__retarget_lock_acquire_recursive>
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	071b      	lsls	r3, r3, #28
 800788e:	d501      	bpl.n	8007894 <_vfiprintf_r+0x3c>
 8007890:	692b      	ldr	r3, [r5, #16]
 8007892:	b9eb      	cbnz	r3, 80078d0 <_vfiprintf_r+0x78>
 8007894:	4629      	mov	r1, r5
 8007896:	4630      	mov	r0, r6
 8007898:	f000 faf4 	bl	8007e84 <__swsetup_r>
 800789c:	b1c0      	cbz	r0, 80078d0 <_vfiprintf_r+0x78>
 800789e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a0:	07dc      	lsls	r4, r3, #31
 80078a2:	d50e      	bpl.n	80078c2 <_vfiprintf_r+0x6a>
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	b01d      	add	sp, #116	; 0x74
 80078aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ae:	4b7b      	ldr	r3, [pc, #492]	; (8007a9c <_vfiprintf_r+0x244>)
 80078b0:	429d      	cmp	r5, r3
 80078b2:	d101      	bne.n	80078b8 <_vfiprintf_r+0x60>
 80078b4:	68b5      	ldr	r5, [r6, #8]
 80078b6:	e7df      	b.n	8007878 <_vfiprintf_r+0x20>
 80078b8:	4b79      	ldr	r3, [pc, #484]	; (8007aa0 <_vfiprintf_r+0x248>)
 80078ba:	429d      	cmp	r5, r3
 80078bc:	bf08      	it	eq
 80078be:	68f5      	ldreq	r5, [r6, #12]
 80078c0:	e7da      	b.n	8007878 <_vfiprintf_r+0x20>
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	0598      	lsls	r0, r3, #22
 80078c6:	d4ed      	bmi.n	80078a4 <_vfiprintf_r+0x4c>
 80078c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ca:	f000 fd0a 	bl	80082e2 <__retarget_lock_release_recursive>
 80078ce:	e7e9      	b.n	80078a4 <_vfiprintf_r+0x4c>
 80078d0:	2300      	movs	r3, #0
 80078d2:	9309      	str	r3, [sp, #36]	; 0x24
 80078d4:	2320      	movs	r3, #32
 80078d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078da:	f8cd 800c 	str.w	r8, [sp, #12]
 80078de:	2330      	movs	r3, #48	; 0x30
 80078e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007aa4 <_vfiprintf_r+0x24c>
 80078e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078e8:	f04f 0901 	mov.w	r9, #1
 80078ec:	4623      	mov	r3, r4
 80078ee:	469a      	mov	sl, r3
 80078f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078f4:	b10a      	cbz	r2, 80078fa <_vfiprintf_r+0xa2>
 80078f6:	2a25      	cmp	r2, #37	; 0x25
 80078f8:	d1f9      	bne.n	80078ee <_vfiprintf_r+0x96>
 80078fa:	ebba 0b04 	subs.w	fp, sl, r4
 80078fe:	d00b      	beq.n	8007918 <_vfiprintf_r+0xc0>
 8007900:	465b      	mov	r3, fp
 8007902:	4622      	mov	r2, r4
 8007904:	4629      	mov	r1, r5
 8007906:	4630      	mov	r0, r6
 8007908:	f7ff ff93 	bl	8007832 <__sfputs_r>
 800790c:	3001      	adds	r0, #1
 800790e:	f000 80aa 	beq.w	8007a66 <_vfiprintf_r+0x20e>
 8007912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007914:	445a      	add	r2, fp
 8007916:	9209      	str	r2, [sp, #36]	; 0x24
 8007918:	f89a 3000 	ldrb.w	r3, [sl]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80a2 	beq.w	8007a66 <_vfiprintf_r+0x20e>
 8007922:	2300      	movs	r3, #0
 8007924:	f04f 32ff 	mov.w	r2, #4294967295
 8007928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800792c:	f10a 0a01 	add.w	sl, sl, #1
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	9307      	str	r3, [sp, #28]
 8007934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007938:	931a      	str	r3, [sp, #104]	; 0x68
 800793a:	4654      	mov	r4, sl
 800793c:	2205      	movs	r2, #5
 800793e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007942:	4858      	ldr	r0, [pc, #352]	; (8007aa4 <_vfiprintf_r+0x24c>)
 8007944:	f7f8 fc44 	bl	80001d0 <memchr>
 8007948:	9a04      	ldr	r2, [sp, #16]
 800794a:	b9d8      	cbnz	r0, 8007984 <_vfiprintf_r+0x12c>
 800794c:	06d1      	lsls	r1, r2, #27
 800794e:	bf44      	itt	mi
 8007950:	2320      	movmi	r3, #32
 8007952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007956:	0713      	lsls	r3, r2, #28
 8007958:	bf44      	itt	mi
 800795a:	232b      	movmi	r3, #43	; 0x2b
 800795c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007960:	f89a 3000 	ldrb.w	r3, [sl]
 8007964:	2b2a      	cmp	r3, #42	; 0x2a
 8007966:	d015      	beq.n	8007994 <_vfiprintf_r+0x13c>
 8007968:	9a07      	ldr	r2, [sp, #28]
 800796a:	4654      	mov	r4, sl
 800796c:	2000      	movs	r0, #0
 800796e:	f04f 0c0a 	mov.w	ip, #10
 8007972:	4621      	mov	r1, r4
 8007974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007978:	3b30      	subs	r3, #48	; 0x30
 800797a:	2b09      	cmp	r3, #9
 800797c:	d94e      	bls.n	8007a1c <_vfiprintf_r+0x1c4>
 800797e:	b1b0      	cbz	r0, 80079ae <_vfiprintf_r+0x156>
 8007980:	9207      	str	r2, [sp, #28]
 8007982:	e014      	b.n	80079ae <_vfiprintf_r+0x156>
 8007984:	eba0 0308 	sub.w	r3, r0, r8
 8007988:	fa09 f303 	lsl.w	r3, r9, r3
 800798c:	4313      	orrs	r3, r2
 800798e:	9304      	str	r3, [sp, #16]
 8007990:	46a2      	mov	sl, r4
 8007992:	e7d2      	b.n	800793a <_vfiprintf_r+0xe2>
 8007994:	9b03      	ldr	r3, [sp, #12]
 8007996:	1d19      	adds	r1, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	9103      	str	r1, [sp, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	bfbb      	ittet	lt
 80079a0:	425b      	neglt	r3, r3
 80079a2:	f042 0202 	orrlt.w	r2, r2, #2
 80079a6:	9307      	strge	r3, [sp, #28]
 80079a8:	9307      	strlt	r3, [sp, #28]
 80079aa:	bfb8      	it	lt
 80079ac:	9204      	strlt	r2, [sp, #16]
 80079ae:	7823      	ldrb	r3, [r4, #0]
 80079b0:	2b2e      	cmp	r3, #46	; 0x2e
 80079b2:	d10c      	bne.n	80079ce <_vfiprintf_r+0x176>
 80079b4:	7863      	ldrb	r3, [r4, #1]
 80079b6:	2b2a      	cmp	r3, #42	; 0x2a
 80079b8:	d135      	bne.n	8007a26 <_vfiprintf_r+0x1ce>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	1d1a      	adds	r2, r3, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	9203      	str	r2, [sp, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bfb8      	it	lt
 80079c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80079ca:	3402      	adds	r4, #2
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ab4 <_vfiprintf_r+0x25c>
 80079d2:	7821      	ldrb	r1, [r4, #0]
 80079d4:	2203      	movs	r2, #3
 80079d6:	4650      	mov	r0, sl
 80079d8:	f7f8 fbfa 	bl	80001d0 <memchr>
 80079dc:	b140      	cbz	r0, 80079f0 <_vfiprintf_r+0x198>
 80079de:	2340      	movs	r3, #64	; 0x40
 80079e0:	eba0 000a 	sub.w	r0, r0, sl
 80079e4:	fa03 f000 	lsl.w	r0, r3, r0
 80079e8:	9b04      	ldr	r3, [sp, #16]
 80079ea:	4303      	orrs	r3, r0
 80079ec:	3401      	adds	r4, #1
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f4:	482c      	ldr	r0, [pc, #176]	; (8007aa8 <_vfiprintf_r+0x250>)
 80079f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079fa:	2206      	movs	r2, #6
 80079fc:	f7f8 fbe8 	bl	80001d0 <memchr>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d03f      	beq.n	8007a84 <_vfiprintf_r+0x22c>
 8007a04:	4b29      	ldr	r3, [pc, #164]	; (8007aac <_vfiprintf_r+0x254>)
 8007a06:	bb1b      	cbnz	r3, 8007a50 <_vfiprintf_r+0x1f8>
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	3307      	adds	r3, #7
 8007a0c:	f023 0307 	bic.w	r3, r3, #7
 8007a10:	3308      	adds	r3, #8
 8007a12:	9303      	str	r3, [sp, #12]
 8007a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a16:	443b      	add	r3, r7
 8007a18:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1a:	e767      	b.n	80078ec <_vfiprintf_r+0x94>
 8007a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a20:	460c      	mov	r4, r1
 8007a22:	2001      	movs	r0, #1
 8007a24:	e7a5      	b.n	8007972 <_vfiprintf_r+0x11a>
 8007a26:	2300      	movs	r3, #0
 8007a28:	3401      	adds	r4, #1
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	f04f 0c0a 	mov.w	ip, #10
 8007a32:	4620      	mov	r0, r4
 8007a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a38:	3a30      	subs	r2, #48	; 0x30
 8007a3a:	2a09      	cmp	r2, #9
 8007a3c:	d903      	bls.n	8007a46 <_vfiprintf_r+0x1ee>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0c5      	beq.n	80079ce <_vfiprintf_r+0x176>
 8007a42:	9105      	str	r1, [sp, #20]
 8007a44:	e7c3      	b.n	80079ce <_vfiprintf_r+0x176>
 8007a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e7f0      	b.n	8007a32 <_vfiprintf_r+0x1da>
 8007a50:	ab03      	add	r3, sp, #12
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	462a      	mov	r2, r5
 8007a56:	4b16      	ldr	r3, [pc, #88]	; (8007ab0 <_vfiprintf_r+0x258>)
 8007a58:	a904      	add	r1, sp, #16
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f3af 8000 	nop.w
 8007a60:	4607      	mov	r7, r0
 8007a62:	1c78      	adds	r0, r7, #1
 8007a64:	d1d6      	bne.n	8007a14 <_vfiprintf_r+0x1bc>
 8007a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a68:	07d9      	lsls	r1, r3, #31
 8007a6a:	d405      	bmi.n	8007a78 <_vfiprintf_r+0x220>
 8007a6c:	89ab      	ldrh	r3, [r5, #12]
 8007a6e:	059a      	lsls	r2, r3, #22
 8007a70:	d402      	bmi.n	8007a78 <_vfiprintf_r+0x220>
 8007a72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a74:	f000 fc35 	bl	80082e2 <__retarget_lock_release_recursive>
 8007a78:	89ab      	ldrh	r3, [r5, #12]
 8007a7a:	065b      	lsls	r3, r3, #25
 8007a7c:	f53f af12 	bmi.w	80078a4 <_vfiprintf_r+0x4c>
 8007a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a82:	e711      	b.n	80078a8 <_vfiprintf_r+0x50>
 8007a84:	ab03      	add	r3, sp, #12
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	462a      	mov	r2, r5
 8007a8a:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <_vfiprintf_r+0x258>)
 8007a8c:	a904      	add	r1, sp, #16
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f000 f880 	bl	8007b94 <_printf_i>
 8007a94:	e7e4      	b.n	8007a60 <_vfiprintf_r+0x208>
 8007a96:	bf00      	nop
 8007a98:	080095e0 	.word	0x080095e0
 8007a9c:	08009600 	.word	0x08009600
 8007aa0:	080095c0 	.word	0x080095c0
 8007aa4:	0800958a 	.word	0x0800958a
 8007aa8:	08009594 	.word	0x08009594
 8007aac:	00000000 	.word	0x00000000
 8007ab0:	08007833 	.word	0x08007833
 8007ab4:	08009590 	.word	0x08009590

08007ab8 <_printf_common>:
 8007ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abc:	4616      	mov	r6, r2
 8007abe:	4699      	mov	r9, r3
 8007ac0:	688a      	ldr	r2, [r1, #8]
 8007ac2:	690b      	ldr	r3, [r1, #16]
 8007ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	bfb8      	it	lt
 8007acc:	4613      	movlt	r3, r2
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b10a      	cbz	r2, 8007ade <_printf_common+0x26>
 8007ada:	3301      	adds	r3, #1
 8007adc:	6033      	str	r3, [r6, #0]
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	0699      	lsls	r1, r3, #26
 8007ae2:	bf42      	ittt	mi
 8007ae4:	6833      	ldrmi	r3, [r6, #0]
 8007ae6:	3302      	addmi	r3, #2
 8007ae8:	6033      	strmi	r3, [r6, #0]
 8007aea:	6825      	ldr	r5, [r4, #0]
 8007aec:	f015 0506 	ands.w	r5, r5, #6
 8007af0:	d106      	bne.n	8007b00 <_printf_common+0x48>
 8007af2:	f104 0a19 	add.w	sl, r4, #25
 8007af6:	68e3      	ldr	r3, [r4, #12]
 8007af8:	6832      	ldr	r2, [r6, #0]
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	42ab      	cmp	r3, r5
 8007afe:	dc26      	bgt.n	8007b4e <_printf_common+0x96>
 8007b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b04:	1e13      	subs	r3, r2, #0
 8007b06:	6822      	ldr	r2, [r4, #0]
 8007b08:	bf18      	it	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	0692      	lsls	r2, r2, #26
 8007b0e:	d42b      	bmi.n	8007b68 <_printf_common+0xb0>
 8007b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b14:	4649      	mov	r1, r9
 8007b16:	4638      	mov	r0, r7
 8007b18:	47c0      	blx	r8
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d01e      	beq.n	8007b5c <_printf_common+0xa4>
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	68e5      	ldr	r5, [r4, #12]
 8007b22:	6832      	ldr	r2, [r6, #0]
 8007b24:	f003 0306 	and.w	r3, r3, #6
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	bf08      	it	eq
 8007b2c:	1aad      	subeq	r5, r5, r2
 8007b2e:	68a3      	ldr	r3, [r4, #8]
 8007b30:	6922      	ldr	r2, [r4, #16]
 8007b32:	bf0c      	ite	eq
 8007b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b38:	2500      	movne	r5, #0
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	bfc4      	itt	gt
 8007b3e:	1a9b      	subgt	r3, r3, r2
 8007b40:	18ed      	addgt	r5, r5, r3
 8007b42:	2600      	movs	r6, #0
 8007b44:	341a      	adds	r4, #26
 8007b46:	42b5      	cmp	r5, r6
 8007b48:	d11a      	bne.n	8007b80 <_printf_common+0xc8>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e008      	b.n	8007b60 <_printf_common+0xa8>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4652      	mov	r2, sl
 8007b52:	4649      	mov	r1, r9
 8007b54:	4638      	mov	r0, r7
 8007b56:	47c0      	blx	r8
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d103      	bne.n	8007b64 <_printf_common+0xac>
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b64:	3501      	adds	r5, #1
 8007b66:	e7c6      	b.n	8007af6 <_printf_common+0x3e>
 8007b68:	18e1      	adds	r1, r4, r3
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	2030      	movs	r0, #48	; 0x30
 8007b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b72:	4422      	add	r2, r4
 8007b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	e7c7      	b.n	8007b10 <_printf_common+0x58>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4622      	mov	r2, r4
 8007b84:	4649      	mov	r1, r9
 8007b86:	4638      	mov	r0, r7
 8007b88:	47c0      	blx	r8
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d0e6      	beq.n	8007b5c <_printf_common+0xa4>
 8007b8e:	3601      	adds	r6, #1
 8007b90:	e7d9      	b.n	8007b46 <_printf_common+0x8e>
	...

08007b94 <_printf_i>:
 8007b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	7e0f      	ldrb	r7, [r1, #24]
 8007b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b9c:	2f78      	cmp	r7, #120	; 0x78
 8007b9e:	4691      	mov	r9, r2
 8007ba0:	4680      	mov	r8, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	469a      	mov	sl, r3
 8007ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007baa:	d807      	bhi.n	8007bbc <_printf_i+0x28>
 8007bac:	2f62      	cmp	r7, #98	; 0x62
 8007bae:	d80a      	bhi.n	8007bc6 <_printf_i+0x32>
 8007bb0:	2f00      	cmp	r7, #0
 8007bb2:	f000 80d8 	beq.w	8007d66 <_printf_i+0x1d2>
 8007bb6:	2f58      	cmp	r7, #88	; 0x58
 8007bb8:	f000 80a3 	beq.w	8007d02 <_printf_i+0x16e>
 8007bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bc4:	e03a      	b.n	8007c3c <_printf_i+0xa8>
 8007bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bca:	2b15      	cmp	r3, #21
 8007bcc:	d8f6      	bhi.n	8007bbc <_printf_i+0x28>
 8007bce:	a101      	add	r1, pc, #4	; (adr r1, 8007bd4 <_printf_i+0x40>)
 8007bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bd4:	08007c2d 	.word	0x08007c2d
 8007bd8:	08007c41 	.word	0x08007c41
 8007bdc:	08007bbd 	.word	0x08007bbd
 8007be0:	08007bbd 	.word	0x08007bbd
 8007be4:	08007bbd 	.word	0x08007bbd
 8007be8:	08007bbd 	.word	0x08007bbd
 8007bec:	08007c41 	.word	0x08007c41
 8007bf0:	08007bbd 	.word	0x08007bbd
 8007bf4:	08007bbd 	.word	0x08007bbd
 8007bf8:	08007bbd 	.word	0x08007bbd
 8007bfc:	08007bbd 	.word	0x08007bbd
 8007c00:	08007d4d 	.word	0x08007d4d
 8007c04:	08007c71 	.word	0x08007c71
 8007c08:	08007d2f 	.word	0x08007d2f
 8007c0c:	08007bbd 	.word	0x08007bbd
 8007c10:	08007bbd 	.word	0x08007bbd
 8007c14:	08007d6f 	.word	0x08007d6f
 8007c18:	08007bbd 	.word	0x08007bbd
 8007c1c:	08007c71 	.word	0x08007c71
 8007c20:	08007bbd 	.word	0x08007bbd
 8007c24:	08007bbd 	.word	0x08007bbd
 8007c28:	08007d37 	.word	0x08007d37
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	602a      	str	r2, [r5, #0]
 8007c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e0a3      	b.n	8007d88 <_printf_i+0x1f4>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	6829      	ldr	r1, [r5, #0]
 8007c44:	0606      	lsls	r6, r0, #24
 8007c46:	f101 0304 	add.w	r3, r1, #4
 8007c4a:	d50a      	bpl.n	8007c62 <_printf_i+0xce>
 8007c4c:	680e      	ldr	r6, [r1, #0]
 8007c4e:	602b      	str	r3, [r5, #0]
 8007c50:	2e00      	cmp	r6, #0
 8007c52:	da03      	bge.n	8007c5c <_printf_i+0xc8>
 8007c54:	232d      	movs	r3, #45	; 0x2d
 8007c56:	4276      	negs	r6, r6
 8007c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5c:	485e      	ldr	r0, [pc, #376]	; (8007dd8 <_printf_i+0x244>)
 8007c5e:	230a      	movs	r3, #10
 8007c60:	e019      	b.n	8007c96 <_printf_i+0x102>
 8007c62:	680e      	ldr	r6, [r1, #0]
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c6a:	bf18      	it	ne
 8007c6c:	b236      	sxthne	r6, r6
 8007c6e:	e7ef      	b.n	8007c50 <_printf_i+0xbc>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	6820      	ldr	r0, [r4, #0]
 8007c74:	1d19      	adds	r1, r3, #4
 8007c76:	6029      	str	r1, [r5, #0]
 8007c78:	0601      	lsls	r1, r0, #24
 8007c7a:	d501      	bpl.n	8007c80 <_printf_i+0xec>
 8007c7c:	681e      	ldr	r6, [r3, #0]
 8007c7e:	e002      	b.n	8007c86 <_printf_i+0xf2>
 8007c80:	0646      	lsls	r6, r0, #25
 8007c82:	d5fb      	bpl.n	8007c7c <_printf_i+0xe8>
 8007c84:	881e      	ldrh	r6, [r3, #0]
 8007c86:	4854      	ldr	r0, [pc, #336]	; (8007dd8 <_printf_i+0x244>)
 8007c88:	2f6f      	cmp	r7, #111	; 0x6f
 8007c8a:	bf0c      	ite	eq
 8007c8c:	2308      	moveq	r3, #8
 8007c8e:	230a      	movne	r3, #10
 8007c90:	2100      	movs	r1, #0
 8007c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c96:	6865      	ldr	r5, [r4, #4]
 8007c98:	60a5      	str	r5, [r4, #8]
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	bfa2      	ittt	ge
 8007c9e:	6821      	ldrge	r1, [r4, #0]
 8007ca0:	f021 0104 	bicge.w	r1, r1, #4
 8007ca4:	6021      	strge	r1, [r4, #0]
 8007ca6:	b90e      	cbnz	r6, 8007cac <_printf_i+0x118>
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	d04d      	beq.n	8007d48 <_printf_i+0x1b4>
 8007cac:	4615      	mov	r5, r2
 8007cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8007cb6:	5dc7      	ldrb	r7, [r0, r7]
 8007cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cbc:	4637      	mov	r7, r6
 8007cbe:	42bb      	cmp	r3, r7
 8007cc0:	460e      	mov	r6, r1
 8007cc2:	d9f4      	bls.n	8007cae <_printf_i+0x11a>
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d10b      	bne.n	8007ce0 <_printf_i+0x14c>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	07de      	lsls	r6, r3, #31
 8007ccc:	d508      	bpl.n	8007ce0 <_printf_i+0x14c>
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	6861      	ldr	r1, [r4, #4]
 8007cd2:	4299      	cmp	r1, r3
 8007cd4:	bfde      	ittt	le
 8007cd6:	2330      	movle	r3, #48	; 0x30
 8007cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ce0:	1b52      	subs	r2, r2, r5
 8007ce2:	6122      	str	r2, [r4, #16]
 8007ce4:	f8cd a000 	str.w	sl, [sp]
 8007ce8:	464b      	mov	r3, r9
 8007cea:	aa03      	add	r2, sp, #12
 8007cec:	4621      	mov	r1, r4
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f7ff fee2 	bl	8007ab8 <_printf_common>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d14c      	bne.n	8007d92 <_printf_i+0x1fe>
 8007cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfc:	b004      	add	sp, #16
 8007cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d02:	4835      	ldr	r0, [pc, #212]	; (8007dd8 <_printf_i+0x244>)
 8007d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d08:	6829      	ldr	r1, [r5, #0]
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d10:	6029      	str	r1, [r5, #0]
 8007d12:	061d      	lsls	r5, r3, #24
 8007d14:	d514      	bpl.n	8007d40 <_printf_i+0x1ac>
 8007d16:	07df      	lsls	r7, r3, #31
 8007d18:	bf44      	itt	mi
 8007d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d1e:	6023      	strmi	r3, [r4, #0]
 8007d20:	b91e      	cbnz	r6, 8007d2a <_printf_i+0x196>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	f023 0320 	bic.w	r3, r3, #32
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	2310      	movs	r3, #16
 8007d2c:	e7b0      	b.n	8007c90 <_printf_i+0xfc>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	f043 0320 	orr.w	r3, r3, #32
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	2378      	movs	r3, #120	; 0x78
 8007d38:	4828      	ldr	r0, [pc, #160]	; (8007ddc <_printf_i+0x248>)
 8007d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d3e:	e7e3      	b.n	8007d08 <_printf_i+0x174>
 8007d40:	0659      	lsls	r1, r3, #25
 8007d42:	bf48      	it	mi
 8007d44:	b2b6      	uxthmi	r6, r6
 8007d46:	e7e6      	b.n	8007d16 <_printf_i+0x182>
 8007d48:	4615      	mov	r5, r2
 8007d4a:	e7bb      	b.n	8007cc4 <_printf_i+0x130>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	6826      	ldr	r6, [r4, #0]
 8007d50:	6961      	ldr	r1, [r4, #20]
 8007d52:	1d18      	adds	r0, r3, #4
 8007d54:	6028      	str	r0, [r5, #0]
 8007d56:	0635      	lsls	r5, r6, #24
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	d501      	bpl.n	8007d60 <_printf_i+0x1cc>
 8007d5c:	6019      	str	r1, [r3, #0]
 8007d5e:	e002      	b.n	8007d66 <_printf_i+0x1d2>
 8007d60:	0670      	lsls	r0, r6, #25
 8007d62:	d5fb      	bpl.n	8007d5c <_printf_i+0x1c8>
 8007d64:	8019      	strh	r1, [r3, #0]
 8007d66:	2300      	movs	r3, #0
 8007d68:	6123      	str	r3, [r4, #16]
 8007d6a:	4615      	mov	r5, r2
 8007d6c:	e7ba      	b.n	8007ce4 <_printf_i+0x150>
 8007d6e:	682b      	ldr	r3, [r5, #0]
 8007d70:	1d1a      	adds	r2, r3, #4
 8007d72:	602a      	str	r2, [r5, #0]
 8007d74:	681d      	ldr	r5, [r3, #0]
 8007d76:	6862      	ldr	r2, [r4, #4]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f7f8 fa28 	bl	80001d0 <memchr>
 8007d80:	b108      	cbz	r0, 8007d86 <_printf_i+0x1f2>
 8007d82:	1b40      	subs	r0, r0, r5
 8007d84:	6060      	str	r0, [r4, #4]
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d90:	e7a8      	b.n	8007ce4 <_printf_i+0x150>
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	462a      	mov	r2, r5
 8007d96:	4649      	mov	r1, r9
 8007d98:	4640      	mov	r0, r8
 8007d9a:	47d0      	blx	sl
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d0ab      	beq.n	8007cf8 <_printf_i+0x164>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	079b      	lsls	r3, r3, #30
 8007da4:	d413      	bmi.n	8007dce <_printf_i+0x23a>
 8007da6:	68e0      	ldr	r0, [r4, #12]
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	4298      	cmp	r0, r3
 8007dac:	bfb8      	it	lt
 8007dae:	4618      	movlt	r0, r3
 8007db0:	e7a4      	b.n	8007cfc <_printf_i+0x168>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4632      	mov	r2, r6
 8007db6:	4649      	mov	r1, r9
 8007db8:	4640      	mov	r0, r8
 8007dba:	47d0      	blx	sl
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d09b      	beq.n	8007cf8 <_printf_i+0x164>
 8007dc0:	3501      	adds	r5, #1
 8007dc2:	68e3      	ldr	r3, [r4, #12]
 8007dc4:	9903      	ldr	r1, [sp, #12]
 8007dc6:	1a5b      	subs	r3, r3, r1
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	dcf2      	bgt.n	8007db2 <_printf_i+0x21e>
 8007dcc:	e7eb      	b.n	8007da6 <_printf_i+0x212>
 8007dce:	2500      	movs	r5, #0
 8007dd0:	f104 0619 	add.w	r6, r4, #25
 8007dd4:	e7f5      	b.n	8007dc2 <_printf_i+0x22e>
 8007dd6:	bf00      	nop
 8007dd8:	0800959b 	.word	0x0800959b
 8007ddc:	080095ac 	.word	0x080095ac

08007de0 <__swbuf_r>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	460e      	mov	r6, r1
 8007de4:	4614      	mov	r4, r2
 8007de6:	4605      	mov	r5, r0
 8007de8:	b118      	cbz	r0, 8007df2 <__swbuf_r+0x12>
 8007dea:	6983      	ldr	r3, [r0, #24]
 8007dec:	b90b      	cbnz	r3, 8007df2 <__swbuf_r+0x12>
 8007dee:	f000 f9d9 	bl	80081a4 <__sinit>
 8007df2:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <__swbuf_r+0x98>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d12b      	bne.n	8007e50 <__swbuf_r+0x70>
 8007df8:	686c      	ldr	r4, [r5, #4]
 8007dfa:	69a3      	ldr	r3, [r4, #24]
 8007dfc:	60a3      	str	r3, [r4, #8]
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	071a      	lsls	r2, r3, #28
 8007e02:	d52f      	bpl.n	8007e64 <__swbuf_r+0x84>
 8007e04:	6923      	ldr	r3, [r4, #16]
 8007e06:	b36b      	cbz	r3, 8007e64 <__swbuf_r+0x84>
 8007e08:	6923      	ldr	r3, [r4, #16]
 8007e0a:	6820      	ldr	r0, [r4, #0]
 8007e0c:	1ac0      	subs	r0, r0, r3
 8007e0e:	6963      	ldr	r3, [r4, #20]
 8007e10:	b2f6      	uxtb	r6, r6
 8007e12:	4283      	cmp	r3, r0
 8007e14:	4637      	mov	r7, r6
 8007e16:	dc04      	bgt.n	8007e22 <__swbuf_r+0x42>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f000 f92e 	bl	800807c <_fflush_r>
 8007e20:	bb30      	cbnz	r0, 8007e70 <__swbuf_r+0x90>
 8007e22:	68a3      	ldr	r3, [r4, #8]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	60a3      	str	r3, [r4, #8]
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	6022      	str	r2, [r4, #0]
 8007e2e:	701e      	strb	r6, [r3, #0]
 8007e30:	6963      	ldr	r3, [r4, #20]
 8007e32:	3001      	adds	r0, #1
 8007e34:	4283      	cmp	r3, r0
 8007e36:	d004      	beq.n	8007e42 <__swbuf_r+0x62>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	07db      	lsls	r3, r3, #31
 8007e3c:	d506      	bpl.n	8007e4c <__swbuf_r+0x6c>
 8007e3e:	2e0a      	cmp	r6, #10
 8007e40:	d104      	bne.n	8007e4c <__swbuf_r+0x6c>
 8007e42:	4621      	mov	r1, r4
 8007e44:	4628      	mov	r0, r5
 8007e46:	f000 f919 	bl	800807c <_fflush_r>
 8007e4a:	b988      	cbnz	r0, 8007e70 <__swbuf_r+0x90>
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e50:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <__swbuf_r+0x9c>)
 8007e52:	429c      	cmp	r4, r3
 8007e54:	d101      	bne.n	8007e5a <__swbuf_r+0x7a>
 8007e56:	68ac      	ldr	r4, [r5, #8]
 8007e58:	e7cf      	b.n	8007dfa <__swbuf_r+0x1a>
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <__swbuf_r+0xa0>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	bf08      	it	eq
 8007e60:	68ec      	ldreq	r4, [r5, #12]
 8007e62:	e7ca      	b.n	8007dfa <__swbuf_r+0x1a>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4628      	mov	r0, r5
 8007e68:	f000 f80c 	bl	8007e84 <__swsetup_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d0cb      	beq.n	8007e08 <__swbuf_r+0x28>
 8007e70:	f04f 37ff 	mov.w	r7, #4294967295
 8007e74:	e7ea      	b.n	8007e4c <__swbuf_r+0x6c>
 8007e76:	bf00      	nop
 8007e78:	080095e0 	.word	0x080095e0
 8007e7c:	08009600 	.word	0x08009600
 8007e80:	080095c0 	.word	0x080095c0

08007e84 <__swsetup_r>:
 8007e84:	4b32      	ldr	r3, [pc, #200]	; (8007f50 <__swsetup_r+0xcc>)
 8007e86:	b570      	push	{r4, r5, r6, lr}
 8007e88:	681d      	ldr	r5, [r3, #0]
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	b125      	cbz	r5, 8007e9a <__swsetup_r+0x16>
 8007e90:	69ab      	ldr	r3, [r5, #24]
 8007e92:	b913      	cbnz	r3, 8007e9a <__swsetup_r+0x16>
 8007e94:	4628      	mov	r0, r5
 8007e96:	f000 f985 	bl	80081a4 <__sinit>
 8007e9a:	4b2e      	ldr	r3, [pc, #184]	; (8007f54 <__swsetup_r+0xd0>)
 8007e9c:	429c      	cmp	r4, r3
 8007e9e:	d10f      	bne.n	8007ec0 <__swsetup_r+0x3c>
 8007ea0:	686c      	ldr	r4, [r5, #4]
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ea8:	0719      	lsls	r1, r3, #28
 8007eaa:	d42c      	bmi.n	8007f06 <__swsetup_r+0x82>
 8007eac:	06dd      	lsls	r5, r3, #27
 8007eae:	d411      	bmi.n	8007ed4 <__swsetup_r+0x50>
 8007eb0:	2309      	movs	r3, #9
 8007eb2:	6033      	str	r3, [r6, #0]
 8007eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebe:	e03e      	b.n	8007f3e <__swsetup_r+0xba>
 8007ec0:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <__swsetup_r+0xd4>)
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	d101      	bne.n	8007eca <__swsetup_r+0x46>
 8007ec6:	68ac      	ldr	r4, [r5, #8]
 8007ec8:	e7eb      	b.n	8007ea2 <__swsetup_r+0x1e>
 8007eca:	4b24      	ldr	r3, [pc, #144]	; (8007f5c <__swsetup_r+0xd8>)
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	bf08      	it	eq
 8007ed0:	68ec      	ldreq	r4, [r5, #12]
 8007ed2:	e7e6      	b.n	8007ea2 <__swsetup_r+0x1e>
 8007ed4:	0758      	lsls	r0, r3, #29
 8007ed6:	d512      	bpl.n	8007efe <__swsetup_r+0x7a>
 8007ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eda:	b141      	cbz	r1, 8007eee <__swsetup_r+0x6a>
 8007edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ee0:	4299      	cmp	r1, r3
 8007ee2:	d002      	beq.n	8007eea <__swsetup_r+0x66>
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f7ff fc41 	bl	800776c <_free_r>
 8007eea:	2300      	movs	r3, #0
 8007eec:	6363      	str	r3, [r4, #52]	; 0x34
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6063      	str	r3, [r4, #4]
 8007efa:	6923      	ldr	r3, [r4, #16]
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	f043 0308 	orr.w	r3, r3, #8
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	b94b      	cbnz	r3, 8007f1e <__swsetup_r+0x9a>
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f14:	d003      	beq.n	8007f1e <__swsetup_r+0x9a>
 8007f16:	4621      	mov	r1, r4
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f000 fa09 	bl	8008330 <__smakebuf_r>
 8007f1e:	89a0      	ldrh	r0, [r4, #12]
 8007f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f24:	f010 0301 	ands.w	r3, r0, #1
 8007f28:	d00a      	beq.n	8007f40 <__swsetup_r+0xbc>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60a3      	str	r3, [r4, #8]
 8007f2e:	6963      	ldr	r3, [r4, #20]
 8007f30:	425b      	negs	r3, r3
 8007f32:	61a3      	str	r3, [r4, #24]
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	b943      	cbnz	r3, 8007f4a <__swsetup_r+0xc6>
 8007f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f3c:	d1ba      	bne.n	8007eb4 <__swsetup_r+0x30>
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	0781      	lsls	r1, r0, #30
 8007f42:	bf58      	it	pl
 8007f44:	6963      	ldrpl	r3, [r4, #20]
 8007f46:	60a3      	str	r3, [r4, #8]
 8007f48:	e7f4      	b.n	8007f34 <__swsetup_r+0xb0>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e7f7      	b.n	8007f3e <__swsetup_r+0xba>
 8007f4e:	bf00      	nop
 8007f50:	20000014 	.word	0x20000014
 8007f54:	080095e0 	.word	0x080095e0
 8007f58:	08009600 	.word	0x08009600
 8007f5c:	080095c0 	.word	0x080095c0

08007f60 <abort>:
 8007f60:	b508      	push	{r3, lr}
 8007f62:	2006      	movs	r0, #6
 8007f64:	f000 fa4c 	bl	8008400 <raise>
 8007f68:	2001      	movs	r0, #1
 8007f6a:	f7f9 fe7d 	bl	8001c68 <_exit>
	...

08007f70 <__sflush_r>:
 8007f70:	898a      	ldrh	r2, [r1, #12]
 8007f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f76:	4605      	mov	r5, r0
 8007f78:	0710      	lsls	r0, r2, #28
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	d458      	bmi.n	8008030 <__sflush_r+0xc0>
 8007f7e:	684b      	ldr	r3, [r1, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	dc05      	bgt.n	8007f90 <__sflush_r+0x20>
 8007f84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	dc02      	bgt.n	8007f90 <__sflush_r+0x20>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f92:	2e00      	cmp	r6, #0
 8007f94:	d0f9      	beq.n	8007f8a <__sflush_r+0x1a>
 8007f96:	2300      	movs	r3, #0
 8007f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f9c:	682f      	ldr	r7, [r5, #0]
 8007f9e:	602b      	str	r3, [r5, #0]
 8007fa0:	d032      	beq.n	8008008 <__sflush_r+0x98>
 8007fa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	075a      	lsls	r2, r3, #29
 8007fa8:	d505      	bpl.n	8007fb6 <__sflush_r+0x46>
 8007faa:	6863      	ldr	r3, [r4, #4]
 8007fac:	1ac0      	subs	r0, r0, r3
 8007fae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fb0:	b10b      	cbz	r3, 8007fb6 <__sflush_r+0x46>
 8007fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fb4:	1ac0      	subs	r0, r0, r3
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fbc:	6a21      	ldr	r1, [r4, #32]
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b0      	blx	r6
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	d106      	bne.n	8007fd6 <__sflush_r+0x66>
 8007fc8:	6829      	ldr	r1, [r5, #0]
 8007fca:	291d      	cmp	r1, #29
 8007fcc:	d82c      	bhi.n	8008028 <__sflush_r+0xb8>
 8007fce:	4a2a      	ldr	r2, [pc, #168]	; (8008078 <__sflush_r+0x108>)
 8007fd0:	40ca      	lsrs	r2, r1
 8007fd2:	07d6      	lsls	r6, r2, #31
 8007fd4:	d528      	bpl.n	8008028 <__sflush_r+0xb8>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	6062      	str	r2, [r4, #4]
 8007fda:	04d9      	lsls	r1, r3, #19
 8007fdc:	6922      	ldr	r2, [r4, #16]
 8007fde:	6022      	str	r2, [r4, #0]
 8007fe0:	d504      	bpl.n	8007fec <__sflush_r+0x7c>
 8007fe2:	1c42      	adds	r2, r0, #1
 8007fe4:	d101      	bne.n	8007fea <__sflush_r+0x7a>
 8007fe6:	682b      	ldr	r3, [r5, #0]
 8007fe8:	b903      	cbnz	r3, 8007fec <__sflush_r+0x7c>
 8007fea:	6560      	str	r0, [r4, #84]	; 0x54
 8007fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fee:	602f      	str	r7, [r5, #0]
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	d0ca      	beq.n	8007f8a <__sflush_r+0x1a>
 8007ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ff8:	4299      	cmp	r1, r3
 8007ffa:	d002      	beq.n	8008002 <__sflush_r+0x92>
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f7ff fbb5 	bl	800776c <_free_r>
 8008002:	2000      	movs	r0, #0
 8008004:	6360      	str	r0, [r4, #52]	; 0x34
 8008006:	e7c1      	b.n	8007f8c <__sflush_r+0x1c>
 8008008:	6a21      	ldr	r1, [r4, #32]
 800800a:	2301      	movs	r3, #1
 800800c:	4628      	mov	r0, r5
 800800e:	47b0      	blx	r6
 8008010:	1c41      	adds	r1, r0, #1
 8008012:	d1c7      	bne.n	8007fa4 <__sflush_r+0x34>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0c4      	beq.n	8007fa4 <__sflush_r+0x34>
 800801a:	2b1d      	cmp	r3, #29
 800801c:	d001      	beq.n	8008022 <__sflush_r+0xb2>
 800801e:	2b16      	cmp	r3, #22
 8008020:	d101      	bne.n	8008026 <__sflush_r+0xb6>
 8008022:	602f      	str	r7, [r5, #0]
 8008024:	e7b1      	b.n	8007f8a <__sflush_r+0x1a>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	e7ad      	b.n	8007f8c <__sflush_r+0x1c>
 8008030:	690f      	ldr	r7, [r1, #16]
 8008032:	2f00      	cmp	r7, #0
 8008034:	d0a9      	beq.n	8007f8a <__sflush_r+0x1a>
 8008036:	0793      	lsls	r3, r2, #30
 8008038:	680e      	ldr	r6, [r1, #0]
 800803a:	bf08      	it	eq
 800803c:	694b      	ldreq	r3, [r1, #20]
 800803e:	600f      	str	r7, [r1, #0]
 8008040:	bf18      	it	ne
 8008042:	2300      	movne	r3, #0
 8008044:	eba6 0807 	sub.w	r8, r6, r7
 8008048:	608b      	str	r3, [r1, #8]
 800804a:	f1b8 0f00 	cmp.w	r8, #0
 800804e:	dd9c      	ble.n	8007f8a <__sflush_r+0x1a>
 8008050:	6a21      	ldr	r1, [r4, #32]
 8008052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008054:	4643      	mov	r3, r8
 8008056:	463a      	mov	r2, r7
 8008058:	4628      	mov	r0, r5
 800805a:	47b0      	blx	r6
 800805c:	2800      	cmp	r0, #0
 800805e:	dc06      	bgt.n	800806e <__sflush_r+0xfe>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	e78e      	b.n	8007f8c <__sflush_r+0x1c>
 800806e:	4407      	add	r7, r0
 8008070:	eba8 0800 	sub.w	r8, r8, r0
 8008074:	e7e9      	b.n	800804a <__sflush_r+0xda>
 8008076:	bf00      	nop
 8008078:	20400001 	.word	0x20400001

0800807c <_fflush_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	690b      	ldr	r3, [r1, #16]
 8008080:	4605      	mov	r5, r0
 8008082:	460c      	mov	r4, r1
 8008084:	b913      	cbnz	r3, 800808c <_fflush_r+0x10>
 8008086:	2500      	movs	r5, #0
 8008088:	4628      	mov	r0, r5
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	b118      	cbz	r0, 8008096 <_fflush_r+0x1a>
 800808e:	6983      	ldr	r3, [r0, #24]
 8008090:	b90b      	cbnz	r3, 8008096 <_fflush_r+0x1a>
 8008092:	f000 f887 	bl	80081a4 <__sinit>
 8008096:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <_fflush_r+0x6c>)
 8008098:	429c      	cmp	r4, r3
 800809a:	d11b      	bne.n	80080d4 <_fflush_r+0x58>
 800809c:	686c      	ldr	r4, [r5, #4]
 800809e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0ef      	beq.n	8008086 <_fflush_r+0xa>
 80080a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080a8:	07d0      	lsls	r0, r2, #31
 80080aa:	d404      	bmi.n	80080b6 <_fflush_r+0x3a>
 80080ac:	0599      	lsls	r1, r3, #22
 80080ae:	d402      	bmi.n	80080b6 <_fflush_r+0x3a>
 80080b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080b2:	f000 f915 	bl	80082e0 <__retarget_lock_acquire_recursive>
 80080b6:	4628      	mov	r0, r5
 80080b8:	4621      	mov	r1, r4
 80080ba:	f7ff ff59 	bl	8007f70 <__sflush_r>
 80080be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080c0:	07da      	lsls	r2, r3, #31
 80080c2:	4605      	mov	r5, r0
 80080c4:	d4e0      	bmi.n	8008088 <_fflush_r+0xc>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	059b      	lsls	r3, r3, #22
 80080ca:	d4dd      	bmi.n	8008088 <_fflush_r+0xc>
 80080cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ce:	f000 f908 	bl	80082e2 <__retarget_lock_release_recursive>
 80080d2:	e7d9      	b.n	8008088 <_fflush_r+0xc>
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <_fflush_r+0x70>)
 80080d6:	429c      	cmp	r4, r3
 80080d8:	d101      	bne.n	80080de <_fflush_r+0x62>
 80080da:	68ac      	ldr	r4, [r5, #8]
 80080dc:	e7df      	b.n	800809e <_fflush_r+0x22>
 80080de:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <_fflush_r+0x74>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	bf08      	it	eq
 80080e4:	68ec      	ldreq	r4, [r5, #12]
 80080e6:	e7da      	b.n	800809e <_fflush_r+0x22>
 80080e8:	080095e0 	.word	0x080095e0
 80080ec:	08009600 	.word	0x08009600
 80080f0:	080095c0 	.word	0x080095c0

080080f4 <std>:
 80080f4:	2300      	movs	r3, #0
 80080f6:	b510      	push	{r4, lr}
 80080f8:	4604      	mov	r4, r0
 80080fa:	e9c0 3300 	strd	r3, r3, [r0]
 80080fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008102:	6083      	str	r3, [r0, #8]
 8008104:	8181      	strh	r1, [r0, #12]
 8008106:	6643      	str	r3, [r0, #100]	; 0x64
 8008108:	81c2      	strh	r2, [r0, #14]
 800810a:	6183      	str	r3, [r0, #24]
 800810c:	4619      	mov	r1, r3
 800810e:	2208      	movs	r2, #8
 8008110:	305c      	adds	r0, #92	; 0x5c
 8008112:	f7fd feb7 	bl	8005e84 <memset>
 8008116:	4b05      	ldr	r3, [pc, #20]	; (800812c <std+0x38>)
 8008118:	6263      	str	r3, [r4, #36]	; 0x24
 800811a:	4b05      	ldr	r3, [pc, #20]	; (8008130 <std+0x3c>)
 800811c:	62a3      	str	r3, [r4, #40]	; 0x28
 800811e:	4b05      	ldr	r3, [pc, #20]	; (8008134 <std+0x40>)
 8008120:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008122:	4b05      	ldr	r3, [pc, #20]	; (8008138 <std+0x44>)
 8008124:	6224      	str	r4, [r4, #32]
 8008126:	6323      	str	r3, [r4, #48]	; 0x30
 8008128:	bd10      	pop	{r4, pc}
 800812a:	bf00      	nop
 800812c:	08008439 	.word	0x08008439
 8008130:	0800845b 	.word	0x0800845b
 8008134:	08008493 	.word	0x08008493
 8008138:	080084b7 	.word	0x080084b7

0800813c <_cleanup_r>:
 800813c:	4901      	ldr	r1, [pc, #4]	; (8008144 <_cleanup_r+0x8>)
 800813e:	f000 b8af 	b.w	80082a0 <_fwalk_reent>
 8008142:	bf00      	nop
 8008144:	0800807d 	.word	0x0800807d

08008148 <__sfmoreglue>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	2268      	movs	r2, #104	; 0x68
 800814c:	1e4d      	subs	r5, r1, #1
 800814e:	4355      	muls	r5, r2
 8008150:	460e      	mov	r6, r1
 8008152:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008156:	f7fe fbaf 	bl	80068b8 <_malloc_r>
 800815a:	4604      	mov	r4, r0
 800815c:	b140      	cbz	r0, 8008170 <__sfmoreglue+0x28>
 800815e:	2100      	movs	r1, #0
 8008160:	e9c0 1600 	strd	r1, r6, [r0]
 8008164:	300c      	adds	r0, #12
 8008166:	60a0      	str	r0, [r4, #8]
 8008168:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800816c:	f7fd fe8a 	bl	8005e84 <memset>
 8008170:	4620      	mov	r0, r4
 8008172:	bd70      	pop	{r4, r5, r6, pc}

08008174 <__sfp_lock_acquire>:
 8008174:	4801      	ldr	r0, [pc, #4]	; (800817c <__sfp_lock_acquire+0x8>)
 8008176:	f000 b8b3 	b.w	80082e0 <__retarget_lock_acquire_recursive>
 800817a:	bf00      	nop
 800817c:	200005ed 	.word	0x200005ed

08008180 <__sfp_lock_release>:
 8008180:	4801      	ldr	r0, [pc, #4]	; (8008188 <__sfp_lock_release+0x8>)
 8008182:	f000 b8ae 	b.w	80082e2 <__retarget_lock_release_recursive>
 8008186:	bf00      	nop
 8008188:	200005ed 	.word	0x200005ed

0800818c <__sinit_lock_acquire>:
 800818c:	4801      	ldr	r0, [pc, #4]	; (8008194 <__sinit_lock_acquire+0x8>)
 800818e:	f000 b8a7 	b.w	80082e0 <__retarget_lock_acquire_recursive>
 8008192:	bf00      	nop
 8008194:	200005ee 	.word	0x200005ee

08008198 <__sinit_lock_release>:
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <__sinit_lock_release+0x8>)
 800819a:	f000 b8a2 	b.w	80082e2 <__retarget_lock_release_recursive>
 800819e:	bf00      	nop
 80081a0:	200005ee 	.word	0x200005ee

080081a4 <__sinit>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	f7ff fff0 	bl	800818c <__sinit_lock_acquire>
 80081ac:	69a3      	ldr	r3, [r4, #24]
 80081ae:	b11b      	cbz	r3, 80081b8 <__sinit+0x14>
 80081b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b4:	f7ff bff0 	b.w	8008198 <__sinit_lock_release>
 80081b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081bc:	6523      	str	r3, [r4, #80]	; 0x50
 80081be:	4b13      	ldr	r3, [pc, #76]	; (800820c <__sinit+0x68>)
 80081c0:	4a13      	ldr	r2, [pc, #76]	; (8008210 <__sinit+0x6c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	bf04      	itt	eq
 80081ca:	2301      	moveq	r3, #1
 80081cc:	61a3      	streq	r3, [r4, #24]
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 f820 	bl	8008214 <__sfp>
 80081d4:	6060      	str	r0, [r4, #4]
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 f81c 	bl	8008214 <__sfp>
 80081dc:	60a0      	str	r0, [r4, #8]
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 f818 	bl	8008214 <__sfp>
 80081e4:	2200      	movs	r2, #0
 80081e6:	60e0      	str	r0, [r4, #12]
 80081e8:	2104      	movs	r1, #4
 80081ea:	6860      	ldr	r0, [r4, #4]
 80081ec:	f7ff ff82 	bl	80080f4 <std>
 80081f0:	68a0      	ldr	r0, [r4, #8]
 80081f2:	2201      	movs	r2, #1
 80081f4:	2109      	movs	r1, #9
 80081f6:	f7ff ff7d 	bl	80080f4 <std>
 80081fa:	68e0      	ldr	r0, [r4, #12]
 80081fc:	2202      	movs	r2, #2
 80081fe:	2112      	movs	r1, #18
 8008200:	f7ff ff78 	bl	80080f4 <std>
 8008204:	2301      	movs	r3, #1
 8008206:	61a3      	str	r3, [r4, #24]
 8008208:	e7d2      	b.n	80081b0 <__sinit+0xc>
 800820a:	bf00      	nop
 800820c:	0800935c 	.word	0x0800935c
 8008210:	0800813d 	.word	0x0800813d

08008214 <__sfp>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	4607      	mov	r7, r0
 8008218:	f7ff ffac 	bl	8008174 <__sfp_lock_acquire>
 800821c:	4b1e      	ldr	r3, [pc, #120]	; (8008298 <__sfp+0x84>)
 800821e:	681e      	ldr	r6, [r3, #0]
 8008220:	69b3      	ldr	r3, [r6, #24]
 8008222:	b913      	cbnz	r3, 800822a <__sfp+0x16>
 8008224:	4630      	mov	r0, r6
 8008226:	f7ff ffbd 	bl	80081a4 <__sinit>
 800822a:	3648      	adds	r6, #72	; 0x48
 800822c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008230:	3b01      	subs	r3, #1
 8008232:	d503      	bpl.n	800823c <__sfp+0x28>
 8008234:	6833      	ldr	r3, [r6, #0]
 8008236:	b30b      	cbz	r3, 800827c <__sfp+0x68>
 8008238:	6836      	ldr	r6, [r6, #0]
 800823a:	e7f7      	b.n	800822c <__sfp+0x18>
 800823c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008240:	b9d5      	cbnz	r5, 8008278 <__sfp+0x64>
 8008242:	4b16      	ldr	r3, [pc, #88]	; (800829c <__sfp+0x88>)
 8008244:	60e3      	str	r3, [r4, #12]
 8008246:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800824a:	6665      	str	r5, [r4, #100]	; 0x64
 800824c:	f000 f847 	bl	80082de <__retarget_lock_init_recursive>
 8008250:	f7ff ff96 	bl	8008180 <__sfp_lock_release>
 8008254:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008258:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800825c:	6025      	str	r5, [r4, #0]
 800825e:	61a5      	str	r5, [r4, #24]
 8008260:	2208      	movs	r2, #8
 8008262:	4629      	mov	r1, r5
 8008264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008268:	f7fd fe0c 	bl	8005e84 <memset>
 800826c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008274:	4620      	mov	r0, r4
 8008276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008278:	3468      	adds	r4, #104	; 0x68
 800827a:	e7d9      	b.n	8008230 <__sfp+0x1c>
 800827c:	2104      	movs	r1, #4
 800827e:	4638      	mov	r0, r7
 8008280:	f7ff ff62 	bl	8008148 <__sfmoreglue>
 8008284:	4604      	mov	r4, r0
 8008286:	6030      	str	r0, [r6, #0]
 8008288:	2800      	cmp	r0, #0
 800828a:	d1d5      	bne.n	8008238 <__sfp+0x24>
 800828c:	f7ff ff78 	bl	8008180 <__sfp_lock_release>
 8008290:	230c      	movs	r3, #12
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	e7ee      	b.n	8008274 <__sfp+0x60>
 8008296:	bf00      	nop
 8008298:	0800935c 	.word	0x0800935c
 800829c:	ffff0001 	.word	0xffff0001

080082a0 <_fwalk_reent>:
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	4606      	mov	r6, r0
 80082a6:	4688      	mov	r8, r1
 80082a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082ac:	2700      	movs	r7, #0
 80082ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082b2:	f1b9 0901 	subs.w	r9, r9, #1
 80082b6:	d505      	bpl.n	80082c4 <_fwalk_reent+0x24>
 80082b8:	6824      	ldr	r4, [r4, #0]
 80082ba:	2c00      	cmp	r4, #0
 80082bc:	d1f7      	bne.n	80082ae <_fwalk_reent+0xe>
 80082be:	4638      	mov	r0, r7
 80082c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c4:	89ab      	ldrh	r3, [r5, #12]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d907      	bls.n	80082da <_fwalk_reent+0x3a>
 80082ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082ce:	3301      	adds	r3, #1
 80082d0:	d003      	beq.n	80082da <_fwalk_reent+0x3a>
 80082d2:	4629      	mov	r1, r5
 80082d4:	4630      	mov	r0, r6
 80082d6:	47c0      	blx	r8
 80082d8:	4307      	orrs	r7, r0
 80082da:	3568      	adds	r5, #104	; 0x68
 80082dc:	e7e9      	b.n	80082b2 <_fwalk_reent+0x12>

080082de <__retarget_lock_init_recursive>:
 80082de:	4770      	bx	lr

080082e0 <__retarget_lock_acquire_recursive>:
 80082e0:	4770      	bx	lr

080082e2 <__retarget_lock_release_recursive>:
 80082e2:	4770      	bx	lr

080082e4 <__swhatbuf_r>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	460e      	mov	r6, r1
 80082e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ec:	2900      	cmp	r1, #0
 80082ee:	b096      	sub	sp, #88	; 0x58
 80082f0:	4614      	mov	r4, r2
 80082f2:	461d      	mov	r5, r3
 80082f4:	da08      	bge.n	8008308 <__swhatbuf_r+0x24>
 80082f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	061a      	lsls	r2, r3, #24
 8008300:	d410      	bmi.n	8008324 <__swhatbuf_r+0x40>
 8008302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008306:	e00e      	b.n	8008326 <__swhatbuf_r+0x42>
 8008308:	466a      	mov	r2, sp
 800830a:	f000 f8fb 	bl	8008504 <_fstat_r>
 800830e:	2800      	cmp	r0, #0
 8008310:	dbf1      	blt.n	80082f6 <__swhatbuf_r+0x12>
 8008312:	9a01      	ldr	r2, [sp, #4]
 8008314:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008318:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800831c:	425a      	negs	r2, r3
 800831e:	415a      	adcs	r2, r3
 8008320:	602a      	str	r2, [r5, #0]
 8008322:	e7ee      	b.n	8008302 <__swhatbuf_r+0x1e>
 8008324:	2340      	movs	r3, #64	; 0x40
 8008326:	2000      	movs	r0, #0
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	b016      	add	sp, #88	; 0x58
 800832c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008330 <__smakebuf_r>:
 8008330:	898b      	ldrh	r3, [r1, #12]
 8008332:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008334:	079d      	lsls	r5, r3, #30
 8008336:	4606      	mov	r6, r0
 8008338:	460c      	mov	r4, r1
 800833a:	d507      	bpl.n	800834c <__smakebuf_r+0x1c>
 800833c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	6123      	str	r3, [r4, #16]
 8008344:	2301      	movs	r3, #1
 8008346:	6163      	str	r3, [r4, #20]
 8008348:	b002      	add	sp, #8
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	ab01      	add	r3, sp, #4
 800834e:	466a      	mov	r2, sp
 8008350:	f7ff ffc8 	bl	80082e4 <__swhatbuf_r>
 8008354:	9900      	ldr	r1, [sp, #0]
 8008356:	4605      	mov	r5, r0
 8008358:	4630      	mov	r0, r6
 800835a:	f7fe faad 	bl	80068b8 <_malloc_r>
 800835e:	b948      	cbnz	r0, 8008374 <__smakebuf_r+0x44>
 8008360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008364:	059a      	lsls	r2, r3, #22
 8008366:	d4ef      	bmi.n	8008348 <__smakebuf_r+0x18>
 8008368:	f023 0303 	bic.w	r3, r3, #3
 800836c:	f043 0302 	orr.w	r3, r3, #2
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	e7e3      	b.n	800833c <__smakebuf_r+0xc>
 8008374:	4b0d      	ldr	r3, [pc, #52]	; (80083ac <__smakebuf_r+0x7c>)
 8008376:	62b3      	str	r3, [r6, #40]	; 0x28
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	6020      	str	r0, [r4, #0]
 800837c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008380:	81a3      	strh	r3, [r4, #12]
 8008382:	9b00      	ldr	r3, [sp, #0]
 8008384:	6163      	str	r3, [r4, #20]
 8008386:	9b01      	ldr	r3, [sp, #4]
 8008388:	6120      	str	r0, [r4, #16]
 800838a:	b15b      	cbz	r3, 80083a4 <__smakebuf_r+0x74>
 800838c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008390:	4630      	mov	r0, r6
 8008392:	f000 f8c9 	bl	8008528 <_isatty_r>
 8008396:	b128      	cbz	r0, 80083a4 <__smakebuf_r+0x74>
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	f023 0303 	bic.w	r3, r3, #3
 800839e:	f043 0301 	orr.w	r3, r3, #1
 80083a2:	81a3      	strh	r3, [r4, #12]
 80083a4:	89a0      	ldrh	r0, [r4, #12]
 80083a6:	4305      	orrs	r5, r0
 80083a8:	81a5      	strh	r5, [r4, #12]
 80083aa:	e7cd      	b.n	8008348 <__smakebuf_r+0x18>
 80083ac:	0800813d 	.word	0x0800813d

080083b0 <_raise_r>:
 80083b0:	291f      	cmp	r1, #31
 80083b2:	b538      	push	{r3, r4, r5, lr}
 80083b4:	4604      	mov	r4, r0
 80083b6:	460d      	mov	r5, r1
 80083b8:	d904      	bls.n	80083c4 <_raise_r+0x14>
 80083ba:	2316      	movs	r3, #22
 80083bc:	6003      	str	r3, [r0, #0]
 80083be:	f04f 30ff 	mov.w	r0, #4294967295
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083c6:	b112      	cbz	r2, 80083ce <_raise_r+0x1e>
 80083c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083cc:	b94b      	cbnz	r3, 80083e2 <_raise_r+0x32>
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 f830 	bl	8008434 <_getpid_r>
 80083d4:	462a      	mov	r2, r5
 80083d6:	4601      	mov	r1, r0
 80083d8:	4620      	mov	r0, r4
 80083da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083de:	f000 b817 	b.w	8008410 <_kill_r>
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d00a      	beq.n	80083fc <_raise_r+0x4c>
 80083e6:	1c59      	adds	r1, r3, #1
 80083e8:	d103      	bne.n	80083f2 <_raise_r+0x42>
 80083ea:	2316      	movs	r3, #22
 80083ec:	6003      	str	r3, [r0, #0]
 80083ee:	2001      	movs	r0, #1
 80083f0:	e7e7      	b.n	80083c2 <_raise_r+0x12>
 80083f2:	2400      	movs	r4, #0
 80083f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083f8:	4628      	mov	r0, r5
 80083fa:	4798      	blx	r3
 80083fc:	2000      	movs	r0, #0
 80083fe:	e7e0      	b.n	80083c2 <_raise_r+0x12>

08008400 <raise>:
 8008400:	4b02      	ldr	r3, [pc, #8]	; (800840c <raise+0xc>)
 8008402:	4601      	mov	r1, r0
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	f7ff bfd3 	b.w	80083b0 <_raise_r>
 800840a:	bf00      	nop
 800840c:	20000014 	.word	0x20000014

08008410 <_kill_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	; (8008430 <_kill_r+0x20>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	4611      	mov	r1, r2
 800841c:	602b      	str	r3, [r5, #0]
 800841e:	f7f9 fc13 	bl	8001c48 <_kill>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	d102      	bne.n	800842c <_kill_r+0x1c>
 8008426:	682b      	ldr	r3, [r5, #0]
 8008428:	b103      	cbz	r3, 800842c <_kill_r+0x1c>
 800842a:	6023      	str	r3, [r4, #0]
 800842c:	bd38      	pop	{r3, r4, r5, pc}
 800842e:	bf00      	nop
 8008430:	200005e8 	.word	0x200005e8

08008434 <_getpid_r>:
 8008434:	f7f9 bc00 	b.w	8001c38 <_getpid>

08008438 <__sread>:
 8008438:	b510      	push	{r4, lr}
 800843a:	460c      	mov	r4, r1
 800843c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008440:	f000 f894 	bl	800856c <_read_r>
 8008444:	2800      	cmp	r0, #0
 8008446:	bfab      	itete	ge
 8008448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800844a:	89a3      	ldrhlt	r3, [r4, #12]
 800844c:	181b      	addge	r3, r3, r0
 800844e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008452:	bfac      	ite	ge
 8008454:	6563      	strge	r3, [r4, #84]	; 0x54
 8008456:	81a3      	strhlt	r3, [r4, #12]
 8008458:	bd10      	pop	{r4, pc}

0800845a <__swrite>:
 800845a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845e:	461f      	mov	r7, r3
 8008460:	898b      	ldrh	r3, [r1, #12]
 8008462:	05db      	lsls	r3, r3, #23
 8008464:	4605      	mov	r5, r0
 8008466:	460c      	mov	r4, r1
 8008468:	4616      	mov	r6, r2
 800846a:	d505      	bpl.n	8008478 <__swrite+0x1e>
 800846c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008470:	2302      	movs	r3, #2
 8008472:	2200      	movs	r2, #0
 8008474:	f000 f868 	bl	8008548 <_lseek_r>
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800847e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	4632      	mov	r2, r6
 8008486:	463b      	mov	r3, r7
 8008488:	4628      	mov	r0, r5
 800848a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800848e:	f000 b817 	b.w	80084c0 <_write_r>

08008492 <__sseek>:
 8008492:	b510      	push	{r4, lr}
 8008494:	460c      	mov	r4, r1
 8008496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849a:	f000 f855 	bl	8008548 <_lseek_r>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	bf15      	itete	ne
 80084a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80084a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084ae:	81a3      	strheq	r3, [r4, #12]
 80084b0:	bf18      	it	ne
 80084b2:	81a3      	strhne	r3, [r4, #12]
 80084b4:	bd10      	pop	{r4, pc}

080084b6 <__sclose>:
 80084b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ba:	f000 b813 	b.w	80084e4 <_close_r>
	...

080084c0 <_write_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d07      	ldr	r5, [pc, #28]	; (80084e0 <_write_r+0x20>)
 80084c4:	4604      	mov	r4, r0
 80084c6:	4608      	mov	r0, r1
 80084c8:	4611      	mov	r1, r2
 80084ca:	2200      	movs	r2, #0
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f7f9 fbf1 	bl	8001cb6 <_write>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_write_r+0x1e>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_write_r+0x1e>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	200005e8 	.word	0x200005e8

080084e4 <_close_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d06      	ldr	r5, [pc, #24]	; (8008500 <_close_r+0x1c>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	f7f9 fbfd 	bl	8001cee <_close>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_close_r+0x1a>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_close_r+0x1a>
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	200005e8 	.word	0x200005e8

08008504 <_fstat_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d07      	ldr	r5, [pc, #28]	; (8008524 <_fstat_r+0x20>)
 8008508:	2300      	movs	r3, #0
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	f7f9 fbf8 	bl	8001d06 <_fstat>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	d102      	bne.n	8008520 <_fstat_r+0x1c>
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	b103      	cbz	r3, 8008520 <_fstat_r+0x1c>
 800851e:	6023      	str	r3, [r4, #0]
 8008520:	bd38      	pop	{r3, r4, r5, pc}
 8008522:	bf00      	nop
 8008524:	200005e8 	.word	0x200005e8

08008528 <_isatty_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4d06      	ldr	r5, [pc, #24]	; (8008544 <_isatty_r+0x1c>)
 800852c:	2300      	movs	r3, #0
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	f7f9 fbf7 	bl	8001d26 <_isatty>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_isatty_r+0x1a>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_isatty_r+0x1a>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	200005e8 	.word	0x200005e8

08008548 <_lseek_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d07      	ldr	r5, [pc, #28]	; (8008568 <_lseek_r+0x20>)
 800854c:	4604      	mov	r4, r0
 800854e:	4608      	mov	r0, r1
 8008550:	4611      	mov	r1, r2
 8008552:	2200      	movs	r2, #0
 8008554:	602a      	str	r2, [r5, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	f7f9 fbf0 	bl	8001d3c <_lseek>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_lseek_r+0x1e>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_lseek_r+0x1e>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	200005e8 	.word	0x200005e8

0800856c <_read_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d07      	ldr	r5, [pc, #28]	; (800858c <_read_r+0x20>)
 8008570:	4604      	mov	r4, r0
 8008572:	4608      	mov	r0, r1
 8008574:	4611      	mov	r1, r2
 8008576:	2200      	movs	r2, #0
 8008578:	602a      	str	r2, [r5, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	f7f9 fb7e 	bl	8001c7c <_read>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_read_r+0x1e>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b103      	cbz	r3, 800858a <_read_r+0x1e>
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	200005e8 	.word	0x200005e8

08008590 <_init>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr

0800859c <_fini>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr
