
KHood_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a5c  08004a5c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a64  08004a64  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000014  08004a80  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08004a80  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4f5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002101  00000000  00000000  0002f539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00031640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00032358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204b2  00000000  00000000  00032f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001013e  00000000  00000000  0005344a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c15be  00000000  00000000  00063588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124b46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003594  00000000  00000000  00124b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003c80 	.word	0x08003c80

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08003c80 	.word	0x08003c80

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd9f 	bl	8001016 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f864 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f934 	bl	8000748 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f902 	bl	80006e8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8c0 	bl	8000668 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 80004e8:	f000 f98a 	bl	8000800 <SSD1306_Init>

  SSD1306_GotoXY (10,10); // goto 10, 10
 80004ec:	210a      	movs	r1, #10
 80004ee:	200a      	movs	r0, #10
 80004f0:	f000 faf0 	bl	8000ad4 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 80004f4:	2201      	movs	r2, #1
 80004f6:	4926      	ldr	r1, [pc, #152]	; (8000590 <main+0xc0>)
 80004f8:	4826      	ldr	r0, [pc, #152]	; (8000594 <main+0xc4>)
 80004fa:	f000 fb81 	bl	8000c00 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 80004fe:	211e      	movs	r1, #30
 8000500:	200a      	movs	r0, #10
 8000502:	f000 fae7 	bl	8000ad4 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 8000506:	2201      	movs	r2, #1
 8000508:	4921      	ldr	r1, [pc, #132]	; (8000590 <main+0xc0>)
 800050a:	4823      	ldr	r0, [pc, #140]	; (8000598 <main+0xc8>)
 800050c:	f000 fb78 	bl	8000c00 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000510:	f000 fa3a 	bl	8000988 <SSD1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(button_input_GPIO_Port, button_input_Pin))
 8000514:	2108      	movs	r1, #8
 8000516:	4821      	ldr	r0, [pc, #132]	; (800059c <main+0xcc>)
 8000518:	f001 f866 	bl	80015e8 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d019      	beq.n	8000556 <main+0x86>
	  	  {
		  HAL_GPIO_WritePin(led_output_GPIO_Port, led_output_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	481d      	ldr	r0, [pc, #116]	; (800059c <main+0xcc>)
 8000528:	f001 f876 	bl	8001618 <HAL_GPIO_WritePin>

		  SSD1306_GotoXY (10, 30);
 800052c:	211e      	movs	r1, #30
 800052e:	200a      	movs	r0, #10
 8000530:	f000 fad0 	bl	8000ad4 <SSD1306_GotoXY>
		  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	4916      	ldr	r1, [pc, #88]	; (8000590 <main+0xc0>)
 8000538:	4817      	ldr	r0, [pc, #92]	; (8000598 <main+0xc8>)
 800053a:	f000 fb61 	bl	8000c00 <SSD1306_Puts>
		  SSD1306_GotoXY (10,10); // goto 10, 10
 800053e:	210a      	movs	r1, #10
 8000540:	200a      	movs	r0, #10
 8000542:	f000 fac7 	bl	8000ad4 <SSD1306_GotoXY>
		  SSD1306_Puts ("        ", &Font_11x18, 1); // print Hello
 8000546:	2201      	movs	r2, #1
 8000548:	4911      	ldr	r1, [pc, #68]	; (8000590 <main+0xc0>)
 800054a:	4815      	ldr	r0, [pc, #84]	; (80005a0 <main+0xd0>)
 800054c:	f000 fb58 	bl	8000c00 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen
 8000550:	f000 fa1a 	bl	8000988 <SSD1306_UpdateScreen>
 8000554:	e018      	b.n	8000588 <main+0xb8>

	  	  }
	  else
		  {
		  HAL_GPIO_WritePin(led_output_GPIO_Port, led_output_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2110      	movs	r1, #16
 800055a:	4810      	ldr	r0, [pc, #64]	; (800059c <main+0xcc>)
 800055c:	f001 f85c 	bl	8001618 <HAL_GPIO_WritePin>

		  SSD1306_GotoXY (10, 30);
 8000560:	211e      	movs	r1, #30
 8000562:	200a      	movs	r0, #10
 8000564:	f000 fab6 	bl	8000ad4 <SSD1306_GotoXY>
		  SSD1306_Puts ("        ", &Font_11x18, 1); // print Hello
 8000568:	2201      	movs	r2, #1
 800056a:	4909      	ldr	r1, [pc, #36]	; (8000590 <main+0xc0>)
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <main+0xd0>)
 800056e:	f000 fb47 	bl	8000c00 <SSD1306_Puts>
		  SSD1306_GotoXY (10,10); // goto 10, 10
 8000572:	210a      	movs	r1, #10
 8000574:	200a      	movs	r0, #10
 8000576:	f000 faad 	bl	8000ad4 <SSD1306_GotoXY>
		  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 800057a:	2201      	movs	r2, #1
 800057c:	4904      	ldr	r1, [pc, #16]	; (8000590 <main+0xc0>)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <main+0xc4>)
 8000580:	f000 fb3e 	bl	8000c00 <SSD1306_Puts>
		  SSD1306_UpdateScreen(); // update screen
 8000584:	f000 fa00 	bl	8000988 <SSD1306_UpdateScreen>
		  }

	  HAL_Delay(100);
 8000588:	2064      	movs	r0, #100	; 0x64
 800058a:	f000 fdb9 	bl	8001100 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(button_input_GPIO_Port, button_input_Pin))
 800058e:	e7c1      	b.n	8000514 <main+0x44>
 8000590:	20000000 	.word	0x20000000
 8000594:	08003c98 	.word	0x08003c98
 8000598:	08003ca0 	.word	0x08003ca0
 800059c:	48000400 	.word	0x48000400
 80005a0:	08003cac 	.word	0x08003cac

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fb5c 	bl	8003c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ca:	f001 fd7d 	bl	80020c8 <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 f90e 	bl	80007f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f001 fd58 	bl	800208c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <SystemClock_Config+0xc0>)
 80005de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e2:	4a20      	ldr	r2, [pc, #128]	; (8000664 <SystemClock_Config+0xc0>)
 80005e4:	f023 0318 	bic.w	r3, r3, #24
 80005e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005ec:	2314      	movs	r3, #20
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005fc:	2360      	movs	r3, #96	; 0x60
 80005fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000604:	2301      	movs	r3, #1
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800060c:	2310      	movs	r3, #16
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000610:	2307      	movs	r3, #7
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fda7 	bl	8002174 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800062c:	f000 f8e2 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2303      	movs	r3, #3
 8000636:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	2101      	movs	r1, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f9a7 	bl	800299c <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000654:	f000 f8ce 	bl	80007f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000658:	f002 fdba 	bl	80031d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	; 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_I2C1_Init+0x74>)
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_I2C1_Init+0x78>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_I2C1_Init+0x74>)
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <MX_I2C1_Init+0x7c>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_I2C1_Init+0x74>)
 8000680:	2201      	movs	r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a2:	480e      	ldr	r0, [pc, #56]	; (80006dc <MX_I2C1_Init+0x74>)
 80006a4:	f000 ffd0 	bl	8001648 <HAL_I2C_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ae:	f000 f8a1 	bl	80007f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <MX_I2C1_Init+0x74>)
 80006b6:	f001 fc51 	bl	8001f5c <HAL_I2CEx_ConfigAnalogFilter>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c0:	f000 f898 	bl	80007f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c4:	2100      	movs	r1, #0
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_I2C1_Init+0x74>)
 80006c8:	f001 fc93 	bl	8001ff2 <HAL_I2CEx_ConfigDigitalFilter>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 f88f 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000030 	.word	0x20000030
 80006e0:	40005400 	.word	0x40005400
 80006e4:	00702681 	.word	0x00702681

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <MX_USART2_UART_Init+0x5c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART2_UART_Init+0x58>)
 800072c:	f002 fe52 	bl	80033d4 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f000 f85d 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000084 	.word	0x20000084
 8000744:	40004400 	.word	0x40004400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0xa4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_GPIO_Init+0xa4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_GPIO_Init+0xa4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_GPIO_Init+0xa4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_output_GPIO_Port, led_output_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2110      	movs	r1, #16
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <MX_GPIO_Init+0xa8>)
 80007ac:	f000 ff34 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_input_Pin */
  GPIO_InitStruct.Pin = button_input_Pin;
 80007b0:	2308      	movs	r3, #8
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_input_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0xa8>)
 80007c4:	f000 fda6 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_output_Pin */
  GPIO_InitStruct.Pin = led_output_Pin;
 80007c8:	2310      	movs	r3, #16
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_output_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_GPIO_Init+0xa8>)
 80007e0:	f000 fd98 	bl	8001314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000400 	.word	0x48000400

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000806:	f000 fa21 	bl	8000c4c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800080a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800080e:	2201      	movs	r2, #1
 8000810:	2178      	movs	r1, #120	; 0x78
 8000812:	485b      	ldr	r0, [pc, #364]	; (8000980 <SSD1306_Init+0x180>)
 8000814:	f001 f89c 	bl	8001950 <HAL_I2C_IsDeviceReady>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800081e:	2300      	movs	r3, #0
 8000820:	e0a9      	b.n	8000976 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000822:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000826:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000828:	e002      	b.n	8000830 <SSD1306_Init+0x30>
		p--;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3b01      	subs	r3, #1
 800082e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1f9      	bne.n	800082a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000836:	22ae      	movs	r2, #174	; 0xae
 8000838:	2100      	movs	r1, #0
 800083a:	2078      	movs	r0, #120	; 0x78
 800083c:	f000 fa82 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000840:	2220      	movs	r2, #32
 8000842:	2100      	movs	r1, #0
 8000844:	2078      	movs	r0, #120	; 0x78
 8000846:	f000 fa7d 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800084a:	2210      	movs	r2, #16
 800084c:	2100      	movs	r1, #0
 800084e:	2078      	movs	r0, #120	; 0x78
 8000850:	f000 fa78 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000854:	22b0      	movs	r2, #176	; 0xb0
 8000856:	2100      	movs	r1, #0
 8000858:	2078      	movs	r0, #120	; 0x78
 800085a:	f000 fa73 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800085e:	22c8      	movs	r2, #200	; 0xc8
 8000860:	2100      	movs	r1, #0
 8000862:	2078      	movs	r0, #120	; 0x78
 8000864:	f000 fa6e 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2078      	movs	r0, #120	; 0x78
 800086e:	f000 fa69 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000872:	2210      	movs	r2, #16
 8000874:	2100      	movs	r1, #0
 8000876:	2078      	movs	r0, #120	; 0x78
 8000878:	f000 fa64 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800087c:	2240      	movs	r2, #64	; 0x40
 800087e:	2100      	movs	r1, #0
 8000880:	2078      	movs	r0, #120	; 0x78
 8000882:	f000 fa5f 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000886:	2281      	movs	r2, #129	; 0x81
 8000888:	2100      	movs	r1, #0
 800088a:	2078      	movs	r0, #120	; 0x78
 800088c:	f000 fa5a 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000890:	22ff      	movs	r2, #255	; 0xff
 8000892:	2100      	movs	r1, #0
 8000894:	2078      	movs	r0, #120	; 0x78
 8000896:	f000 fa55 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800089a:	22a1      	movs	r2, #161	; 0xa1
 800089c:	2100      	movs	r1, #0
 800089e:	2078      	movs	r0, #120	; 0x78
 80008a0:	f000 fa50 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80008a4:	22a6      	movs	r2, #166	; 0xa6
 80008a6:	2100      	movs	r1, #0
 80008a8:	2078      	movs	r0, #120	; 0x78
 80008aa:	f000 fa4b 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80008ae:	22a8      	movs	r2, #168	; 0xa8
 80008b0:	2100      	movs	r1, #0
 80008b2:	2078      	movs	r0, #120	; 0x78
 80008b4:	f000 fa46 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80008b8:	223f      	movs	r2, #63	; 0x3f
 80008ba:	2100      	movs	r1, #0
 80008bc:	2078      	movs	r0, #120	; 0x78
 80008be:	f000 fa41 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008c2:	22a4      	movs	r2, #164	; 0xa4
 80008c4:	2100      	movs	r1, #0
 80008c6:	2078      	movs	r0, #120	; 0x78
 80008c8:	f000 fa3c 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80008cc:	22d3      	movs	r2, #211	; 0xd3
 80008ce:	2100      	movs	r1, #0
 80008d0:	2078      	movs	r0, #120	; 0x78
 80008d2:	f000 fa37 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2078      	movs	r0, #120	; 0x78
 80008dc:	f000 fa32 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80008e0:	22d5      	movs	r2, #213	; 0xd5
 80008e2:	2100      	movs	r1, #0
 80008e4:	2078      	movs	r0, #120	; 0x78
 80008e6:	f000 fa2d 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80008ea:	22f0      	movs	r2, #240	; 0xf0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2078      	movs	r0, #120	; 0x78
 80008f0:	f000 fa28 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80008f4:	22d9      	movs	r2, #217	; 0xd9
 80008f6:	2100      	movs	r1, #0
 80008f8:	2078      	movs	r0, #120	; 0x78
 80008fa:	f000 fa23 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80008fe:	2222      	movs	r2, #34	; 0x22
 8000900:	2100      	movs	r1, #0
 8000902:	2078      	movs	r0, #120	; 0x78
 8000904:	f000 fa1e 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000908:	22da      	movs	r2, #218	; 0xda
 800090a:	2100      	movs	r1, #0
 800090c:	2078      	movs	r0, #120	; 0x78
 800090e:	f000 fa19 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000912:	2212      	movs	r2, #18
 8000914:	2100      	movs	r1, #0
 8000916:	2078      	movs	r0, #120	; 0x78
 8000918:	f000 fa14 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800091c:	22db      	movs	r2, #219	; 0xdb
 800091e:	2100      	movs	r1, #0
 8000920:	2078      	movs	r0, #120	; 0x78
 8000922:	f000 fa0f 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	2078      	movs	r0, #120	; 0x78
 800092c:	f000 fa0a 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000930:	228d      	movs	r2, #141	; 0x8d
 8000932:	2100      	movs	r1, #0
 8000934:	2078      	movs	r0, #120	; 0x78
 8000936:	f000 fa05 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800093a:	2214      	movs	r2, #20
 800093c:	2100      	movs	r1, #0
 800093e:	2078      	movs	r0, #120	; 0x78
 8000940:	f000 fa00 	bl	8000d44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000944:	22af      	movs	r2, #175	; 0xaf
 8000946:	2100      	movs	r1, #0
 8000948:	2078      	movs	r0, #120	; 0x78
 800094a:	f000 f9fb 	bl	8000d44 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800094e:	222e      	movs	r2, #46	; 0x2e
 8000950:	2100      	movs	r1, #0
 8000952:	2078      	movs	r0, #120	; 0x78
 8000954:	f000 f9f6 	bl	8000d44 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000958:	2000      	movs	r0, #0
 800095a:	f000 f843 	bl	80009e4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800095e:	f000 f813 	bl	8000988 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <SSD1306_Init+0x184>)
 8000964:	2200      	movs	r2, #0
 8000966:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SSD1306_Init+0x184>)
 800096a:	2200      	movs	r2, #0
 800096c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SSD1306_Init+0x184>)
 8000970:	2201      	movs	r2, #1
 8000972:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000030 	.word	0x20000030
 8000984:	20000508 	.word	0x20000508

08000988 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800098e:	2300      	movs	r3, #0
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	e01d      	b.n	80009d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	3b50      	subs	r3, #80	; 0x50
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	2078      	movs	r0, #120	; 0x78
 80009a0:	f000 f9d0 	bl	8000d44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2078      	movs	r0, #120	; 0x78
 80009aa:	f000 f9cb 	bl	8000d44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80009ae:	2210      	movs	r2, #16
 80009b0:	2100      	movs	r1, #0
 80009b2:	2078      	movs	r0, #120	; 0x78
 80009b4:	f000 f9c6 	bl	8000d44 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	01db      	lsls	r3, r3, #7
 80009bc:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <SSD1306_UpdateScreen+0x58>)
 80009be:	441a      	add	r2, r3
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	2078      	movs	r0, #120	; 0x78
 80009c6:	f000 f957 	bl	8000c78 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3301      	adds	r3, #1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b07      	cmp	r3, #7
 80009d4:	d9de      	bls.n	8000994 <SSD1306_UpdateScreen+0xc>
	}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000108 	.word	0x20000108

080009e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <SSD1306_Fill+0x14>
 80009f4:	2300      	movs	r3, #0
 80009f6:	e000      	b.n	80009fa <SSD1306_Fill+0x16>
 80009f8:	23ff      	movs	r3, #255	; 0xff
 80009fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fe:	4619      	mov	r1, r3
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <SSD1306_Fill+0x2c>)
 8000a02:	f003 f935 	bl	8003c70 <memset>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000108 	.word	0x20000108

08000a14 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	80bb      	strh	r3, [r7, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	70fb      	strb	r3, [r7, #3]
	if (
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	2b7f      	cmp	r3, #127	; 0x7f
 8000a2a:	d848      	bhi.n	8000abe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a30:	d845      	bhi.n	8000abe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <SSD1306_DrawPixel+0xb8>)
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000a3a:	78fb      	ldrb	r3, [r7, #3]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf0c      	ite	eq
 8000a40:	2301      	moveq	r3, #1
 8000a42:	2300      	movne	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d11a      	bne.n	8000a84 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	b298      	uxth	r0, r3
 8000a56:	4603      	mov	r3, r0
 8000a58:	01db      	lsls	r3, r3, #7
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <SSD1306_DrawPixel+0xbc>)
 8000a5e:	5cd3      	ldrb	r3, [r2, r3]
 8000a60:	b25a      	sxtb	r2, r3
 8000a62:	88bb      	ldrh	r3, [r7, #4]
 8000a64:	f003 0307 	and.w	r3, r3, #7
 8000a68:	2101      	movs	r1, #1
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b259      	sxtb	r1, r3
 8000a74:	88fa      	ldrh	r2, [r7, #6]
 8000a76:	4603      	mov	r3, r0
 8000a78:	01db      	lsls	r3, r3, #7
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2c9      	uxtb	r1, r1
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <SSD1306_DrawPixel+0xbc>)
 8000a80:	54d1      	strb	r1, [r2, r3]
 8000a82:	e01d      	b.n	8000ac0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a84:	88fa      	ldrh	r2, [r7, #6]
 8000a86:	88bb      	ldrh	r3, [r7, #4]
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	b298      	uxth	r0, r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	01db      	lsls	r3, r3, #7
 8000a90:	4413      	add	r3, r2
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <SSD1306_DrawPixel+0xbc>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	b25a      	sxtb	r2, r3
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	4013      	ands	r3, r2
 8000aac:	b259      	sxtb	r1, r3
 8000aae:	88fa      	ldrh	r2, [r7, #6]
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	01db      	lsls	r3, r3, #7
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b2c9      	uxtb	r1, r1
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SSD1306_DrawPixel+0xbc>)
 8000aba:	54d1      	strb	r1, [r2, r3]
 8000abc:	e000      	b.n	8000ac0 <SSD1306_DrawPixel+0xac>
		return;
 8000abe:	bf00      	nop
	}
}
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000508 	.word	0x20000508
 8000ad0:	20000108 	.word	0x20000108

08000ad4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	80fb      	strh	r3, [r7, #6]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ae4:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SSD1306_GotoXY+0x28>)
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <SSD1306_GotoXY+0x28>)
 8000aec:	88bb      	ldrh	r3, [r7, #4]
 8000aee:	8053      	strh	r3, [r2, #2]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	20000508 	.word	0x20000508

08000b00 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b10:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <SSD1306_Putc+0xfc>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
	if (
 8000b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b1e:	dc07      	bgt.n	8000b30 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <SSD1306_Putc+0xfc>)
 8000b22:	885b      	ldrh	r3, [r3, #2]
 8000b24:	461a      	mov	r2, r3
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	785b      	ldrb	r3, [r3, #1]
 8000b2a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b2c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b2e:	dd01      	ble.n	8000b34 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e05e      	b.n	8000bf2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e04b      	b.n	8000bd2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	3b20      	subs	r3, #32
 8000b42:	6839      	ldr	r1, [r7, #0]
 8000b44:	7849      	ldrb	r1, [r1, #1]
 8000b46:	fb01 f303 	mul.w	r3, r1, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	440b      	add	r3, r1
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	e030      	b.n	8000bc0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d010      	beq.n	8000b90 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <SSD1306_Putc+0xfc>)
 8000b70:	881a      	ldrh	r2, [r3, #0]
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	4413      	add	r3, r2
 8000b78:	b298      	uxth	r0, r3
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <SSD1306_Putc+0xfc>)
 8000b7c:	885a      	ldrh	r2, [r3, #2]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	79ba      	ldrb	r2, [r7, #6]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f7ff ff43 	bl	8000a14 <SSD1306_DrawPixel>
 8000b8e:	e014      	b.n	8000bba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <SSD1306_Putc+0xfc>)
 8000b92:	881a      	ldrh	r2, [r3, #0]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4413      	add	r3, r2
 8000b9a:	b298      	uxth	r0, r3
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <SSD1306_Putc+0xfc>)
 8000b9e:	885a      	ldrh	r2, [r3, #2]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b299      	uxth	r1, r3
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f7ff ff2d 	bl	8000a14 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d3c8      	bcc.n	8000b5e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d3ad      	bcc.n	8000b3a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <SSD1306_Putc+0xfc>)
 8000be0:	881a      	ldrh	r2, [r3, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <SSD1306_Putc+0xfc>)
 8000bee:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000508 	.word	0x20000508

08000c00 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000c0e:	e012      	b.n	8000c36 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	79fa      	ldrb	r2, [r7, #7]
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff71 	bl	8000b00 <SSD1306_Putc>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d002      	beq.n	8000c30 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	e008      	b.n	8000c42 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1e8      	bne.n	8000c10 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	781b      	ldrb	r3, [r3, #0]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <ssd1306_I2C_Init+0x28>)
 8000c54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c56:	e002      	b.n	8000c5e <ssd1306_I2C_Init+0x12>
		p--;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1f9      	bne.n	8000c58 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	0003d090 	.word	0x0003d090

08000c78 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b0c7      	sub	sp, #284	; 0x11c
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4608      	mov	r0, r1
 8000c82:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000c86:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000c8a:	600a      	str	r2, [r1, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c92:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000c96:	4622      	mov	r2, r4
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c9e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000caa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cae:	460a      	mov	r2, r1
 8000cb0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000cb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cbe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000cc2:	7812      	ldrb	r2, [r2, #0]
 8000cc4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ccc:	e015      	b.n	8000cfa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000cce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cd2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cd6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	441a      	add	r2, r3
 8000cde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	7811      	ldrb	r1, [r2, #0]
 8000ce6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000cee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000cf0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000cfa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d04:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d08:	8812      	ldrh	r2, [r2, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d8df      	bhi.n	8000cce <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000d0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d12:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b299      	uxth	r1, r3
 8000d1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	f107 020c 	add.w	r2, r7, #12
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	9000      	str	r0, [sp, #0]
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d32:	f000 fd19 	bl	8001768 <HAL_I2C_Master_Transmit>
}
 8000d36:	bf00      	nop
 8000d38:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	20000030 	.word	0x20000030

08000d44 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	71bb      	strb	r3, [r7, #6]
 8000d52:	4613      	mov	r3, r2
 8000d54:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d5a:	797b      	ldrb	r3, [r7, #5]
 8000d5c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	b299      	uxth	r1, r3
 8000d62:	f107 020c 	add.w	r2, r7, #12
 8000d66:	230a      	movs	r3, #10
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <ssd1306_I2C_Write+0x38>)
 8000d6e:	f000 fcfb 	bl	8001768 <HAL_I2C_Master_Transmit>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000030 	.word	0x20000030

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09e      	sub	sp, #120	; 0x78
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2254      	movs	r2, #84	; 0x54
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 ff41 	bl	8003c70 <memset>
  if(hi2c->Instance==I2C1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <HAL_I2C_MspInit+0xa4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d135      	bne.n	8000e64 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 ffed 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e10:	f7ff fcf0 	bl	80007f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <HAL_I2C_MspInit+0xac>)
 8000e48:	f000 fa64 	bl	8001314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e56:	6593      	str	r3, [r2, #88]	; 0x58
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_I2C_MspInit+0xa8>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3778      	adds	r7, #120	; 0x78
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48000400 	.word	0x48000400

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09e      	sub	sp, #120	; 0x78
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2254      	movs	r2, #84	; 0x54
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fee9 	bl	8003c70 <memset>
  if(huart->Instance==USART2)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a28      	ldr	r2, [pc, #160]	; (8000f44 <HAL_UART_MspInit+0xcc>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d148      	bne.n	8000f3a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 ff95 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec0:	f7ff fc98 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_UART_MspInit+0xd0>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_UART_MspInit+0xd0>)
 8000eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ece:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_UART_MspInit+0xd0>)
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_UART_MspInit+0xd0>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_UART_MspInit+0xd0>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_UART_MspInit+0xd0>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f04:	2307      	movs	r3, #7
 8000f06:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f000 f9ff 	bl	8001314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f000 f9ed 	bl	8001314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3778      	adds	r7, #120	; 0x78
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40004400 	.word	0x40004400
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f892 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc8:	f7ff ffea 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <LoopForever+0xe>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	; (8001010 <LoopForever+0x16>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f002 fe19 	bl	8003c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ff6:	f7ff fa6b 	bl	80004d0 <main>

08000ffa <LoopForever>:

LoopForever:
    b LoopForever
 8000ffa:	e7fe      	b.n	8000ffa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ffc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001008:	08004a6c 	.word	0x08004a6c
  ldr r2, =_sbss
 800100c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001010:	20000514 	.word	0x20000514

08001014 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_IRQHandler>

08001016 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f943 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f80e 	bl	8001048 <HAL_InitTick>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	e001      	b.n	800103c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001038:	f7ff fea2 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103c:	79fb      	ldrb	r3, [r7, #7]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_InitTick+0x70>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_InitTick+0x6c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f941 	bl	80012fa <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10f      	bne.n	800109e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d809      	bhi.n	8001098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f919 	bl	80012c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_InitTick+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e007      	b.n	80010a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e004      	b.n	80010a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e001      	b.n	80010a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000010 	.word	0x20000010
 80010b8:	20000008 	.word	0x20000008
 80010bc:	2000000c 	.word	0x2000000c

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000010 	.word	0x20000010
 80010e4:	20000510 	.word	0x20000510

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000510 	.word	0x20000510

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000010 	.word	0x20000010

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff47 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff5c 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffb0 	bl	8001268 <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	e148      	b.n	80015b6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 813a 	beq.w	80015b0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d005      	beq.n	8001354 <HAL_GPIO_Init+0x40>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d130      	bne.n	80013b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138a:	2201      	movs	r2, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	f003 0201 	and.w	r2, r3, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d017      	beq.n	80013f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d123      	bne.n	8001446 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	220f      	movs	r2, #15
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	08da      	lsrs	r2, r3, #3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3208      	adds	r2, #8
 8001440:	6939      	ldr	r1, [r7, #16]
 8001442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0203 	and.w	r2, r3, #3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8094 	beq.w	80015b0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001488:	4b52      	ldr	r3, [pc, #328]	; (80015d4 <HAL_GPIO_Init+0x2c0>)
 800148a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <HAL_GPIO_Init+0x2c0>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6613      	str	r3, [r2, #96]	; 0x60
 8001494:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <HAL_GPIO_Init+0x2c0>)
 8001496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014a0:	4a4d      	ldr	r2, [pc, #308]	; (80015d8 <HAL_GPIO_Init+0x2c4>)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	220f      	movs	r2, #15
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ca:	d00d      	beq.n	80014e8 <HAL_GPIO_Init+0x1d4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a43      	ldr	r2, [pc, #268]	; (80015dc <HAL_GPIO_Init+0x2c8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d007      	beq.n	80014e4 <HAL_GPIO_Init+0x1d0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a42      	ldr	r2, [pc, #264]	; (80015e0 <HAL_GPIO_Init+0x2cc>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d101      	bne.n	80014e0 <HAL_GPIO_Init+0x1cc>
 80014dc:	2302      	movs	r3, #2
 80014de:	e004      	b.n	80014ea <HAL_GPIO_Init+0x1d6>
 80014e0:	2307      	movs	r3, #7
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_Init+0x1d6>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_GPIO_Init+0x1d6>
 80014e8:	2300      	movs	r3, #0
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	f002 0203 	and.w	r2, r2, #3
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	4093      	lsls	r3, r2
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014fa:	4937      	ldr	r1, [pc, #220]	; (80015d8 <HAL_GPIO_Init+0x2c4>)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001508:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800152c:	4a2d      	ldr	r2, [pc, #180]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001556:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001580:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_GPIO_Init+0x2d0>)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f aeaf 	bne.w	8001324 <HAL_GPIO_Init+0x10>
  }
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000
 80015dc:	48000400 	.word	0x48000400
 80015e0:	48000800 	.word	0x48000800
 80015e4:	40010400 	.word	0x40010400

080015e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e001      	b.n	800160a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001634:	e002      	b.n	800163c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e081      	b.n	800175e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fbaa 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001698:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	e006      	b.n	80016d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d104      	bne.n	80016e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001704:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69d9      	ldr	r1, [r3, #28]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1a      	ldr	r2, [r3, #32]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af02      	add	r7, sp, #8
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	461a      	mov	r2, r3
 8001774:	460b      	mov	r3, r1
 8001776:	817b      	strh	r3, [r7, #10]
 8001778:	4613      	mov	r3, r2
 800177a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b20      	cmp	r3, #32
 8001786:	f040 80da 	bne.w	800193e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_I2C_Master_Transmit+0x30>
 8001794:	2302      	movs	r3, #2
 8001796:	e0d3      	b.n	8001940 <HAL_I2C_Master_Transmit+0x1d8>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017a0:	f7ff fca2 	bl	80010e8 <HAL_GetTick>
 80017a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2319      	movs	r3, #25
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 f9f7 	bl	8001ba6 <I2C_WaitOnFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0be      	b.n	8001940 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2221      	movs	r2, #33	; 0x21
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2210      	movs	r2, #16
 80017ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	893a      	ldrh	r2, [r7, #8]
 80017e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	2bff      	cmp	r3, #255	; 0xff
 80017f2:	d90e      	bls.n	8001812 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	22ff      	movs	r2, #255	; 0xff
 80017f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	8979      	ldrh	r1, [r7, #10]
 8001802:	4b51      	ldr	r3, [pc, #324]	; (8001948 <HAL_I2C_Master_Transmit+0x1e0>)
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 fb74 	bl	8001ef8 <I2C_TransferConfig>
 8001810:	e06c      	b.n	80018ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001820:	b2da      	uxtb	r2, r3
 8001822:	8979      	ldrh	r1, [r7, #10]
 8001824:	4b48      	ldr	r3, [pc, #288]	; (8001948 <HAL_I2C_Master_Transmit+0x1e0>)
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 fb63 	bl	8001ef8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001832:	e05b      	b.n	80018ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	6a39      	ldr	r1, [r7, #32]
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 f9f4 	bl	8001c26 <I2C_WaitOnTXISFlagUntilTimeout>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e07b      	b.n	8001940 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187c:	b29b      	uxth	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d034      	beq.n	80018ec <HAL_I2C_Master_Transmit+0x184>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001886:	2b00      	cmp	r3, #0
 8001888:	d130      	bne.n	80018ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	2200      	movs	r2, #0
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f986 	bl	8001ba6 <I2C_WaitOnFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e04d      	b.n	8001940 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2bff      	cmp	r3, #255	; 0xff
 80018ac:	d90e      	bls.n	80018cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	22ff      	movs	r2, #255	; 0xff
 80018b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	8979      	ldrh	r1, [r7, #10]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fb17 	bl	8001ef8 <I2C_TransferConfig>
 80018ca:	e00f      	b.n	80018ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	8979      	ldrh	r1, [r7, #10]
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fb06 	bl	8001ef8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d19e      	bne.n	8001834 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	6a39      	ldr	r1, [r7, #32]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f9d3 	bl	8001ca6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e01a      	b.n	8001940 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2220      	movs	r2, #32
 8001910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_I2C_Master_Transmit+0x1e4>)
 800191e:	400b      	ands	r3, r1
 8001920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2220      	movs	r2, #32
 8001926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800193e:	2302      	movs	r3, #2
  }
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	80002000 	.word	0x80002000
 800194c:	fe00e800 	.word	0xfe00e800

08001950 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af02      	add	r7, sp, #8
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	460b      	mov	r3, r1
 800195e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b20      	cmp	r3, #32
 800196e:	f040 80f1 	bne.w	8001b54 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800197c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001980:	d101      	bne.n	8001986 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001982:	2302      	movs	r3, #2
 8001984:	e0e7      	b.n	8001b56 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_I2C_IsDeviceReady+0x44>
 8001990:	2302      	movs	r3, #2
 8001992:	e0e0      	b.n	8001b56 <HAL_I2C_IsDeviceReady+0x206>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2224      	movs	r2, #36	; 0x24
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d107      	bne.n	80019c2 <HAL_I2C_IsDeviceReady+0x72>
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019c0:	e004      	b.n	80019cc <HAL_I2C_IsDeviceReady+0x7c>
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019c8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff fb89 	bl	80010e8 <HAL_GetTick>
 80019d6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a04:	e034      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d01a      	beq.n	8001a44 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a0e:	f7ff fb6b 	bl	80010e8 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d302      	bcc.n	8001a24 <HAL_I2C_IsDeviceReady+0xd4>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10f      	bne.n	8001a44 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f043 0220 	orr.w	r2, r3, #32
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e088      	b.n	8001b56 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a70:	7ffb      	ldrb	r3, [r7, #31]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_I2C_IsDeviceReady+0x12c>
 8001a76:	7fbb      	ldrb	r3, [r7, #30]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0c4      	beq.n	8001a06 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d01a      	beq.n	8001ac0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	2120      	movs	r1, #32
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 f886 	bl	8001ba6 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e058      	b.n	8001b56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e04a      	b.n	8001b56 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2120      	movs	r1, #32
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f86b 	bl	8001ba6 <I2C_WaitOnFlagUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e03d      	b.n	8001b56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2210      	movs	r2, #16
 8001ae0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d118      	bne.n	8001b24 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b00:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f84a 	bl	8001ba6 <I2C_WaitOnFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e01c      	b.n	8001b56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2220      	movs	r2, #32
 8001b22:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	f63f af3b 	bhi.w	80019aa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001b54:	2302      	movs	r3, #2
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d103      	bne.n	8001b7c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d007      	beq.n	8001b9a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	619a      	str	r2, [r3, #24]
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bb6:	e022      	b.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d01e      	beq.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc0:	f7ff fa92 	bl	80010e8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d302      	bcc.n	8001bd6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d113      	bne.n	8001bfe <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4013      	ands	r3, r2
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d0cd      	beq.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c32:	e02c      	b.n	8001c8e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f871 	bl	8001d20 <I2C_IsErrorOccurred>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e02a      	b.n	8001c9e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4e:	d01e      	beq.n	8001c8e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c50:	f7ff fa4a 	bl	80010e8 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d302      	bcc.n	8001c66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d113      	bne.n	8001c8e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e007      	b.n	8001c9e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d1cb      	bne.n	8001c34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb2:	e028      	b.n	8001d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f831 	bl	8001d20 <I2C_IsErrorOccurred>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e026      	b.n	8001d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc8:	f7ff fa0e 	bl	80010e8 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d302      	bcc.n	8001cde <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d113      	bne.n	8001d06 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2220      	movs	r2, #32
 8001cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e007      	b.n	8001d16 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	d1cf      	bne.n	8001cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d075      	beq.n	8001e38 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2210      	movs	r2, #16
 8001d52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d54:	e056      	b.n	8001e04 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d052      	beq.n	8001e04 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d5e:	f7ff f9c3 	bl	80010e8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d302      	bcc.n	8001d74 <I2C_IsErrorOccurred+0x54>
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d147      	bne.n	8001e04 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d96:	d12e      	bne.n	8001df6 <I2C_IsErrorOccurred+0xd6>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d9e:	d02a      	beq.n	8001df6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001da0:	7cfb      	ldrb	r3, [r7, #19]
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d027      	beq.n	8001df6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001db6:	f7ff f997 	bl	80010e8 <HAL_GetTick>
 8001dba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dbc:	e01b      	b.n	8001df6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001dbe:	f7ff f993 	bl	80010e8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b19      	cmp	r3, #25
 8001dca:	d914      	bls.n	8001df6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f043 0220 	orr.w	r2, r3, #32
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d1dc      	bne.n	8001dbe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d003      	beq.n	8001e1a <I2C_IsErrorOccurred+0xfa>
 8001e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d09d      	beq.n	8001d56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d103      	bne.n	8001e2a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2220      	movs	r2, #32
 8001e28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	f043 0308 	orr.w	r3, r3, #8
 8001e72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01c      	beq.n	8001ee8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fe55 	bl	8001b5e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <I2C_IsErrorOccurred+0x1d4>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	fe00e800 	.word	0xfe00e800

08001ef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	817b      	strh	r3, [r7, #10]
 8001f06:	4613      	mov	r3, r2
 8001f08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f0a:	897b      	ldrh	r3, [r7, #10]
 8001f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f10:	7a7b      	ldrb	r3, [r7, #9]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	0d5b      	lsrs	r3, r3, #21
 8001f32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <I2C_TransferConfig+0x60>)
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	ea02 0103 	and.w	r1, r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	03ff63ff 	.word	0x03ff63ff

08001f5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d138      	bne.n	8001fe4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e032      	b.n	8001fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
  }
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b20      	cmp	r3, #32
 8002006:	d139      	bne.n	800207c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002012:	2302      	movs	r3, #2
 8002014:	e033      	b.n	800207e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2224      	movs	r2, #36	; 0x24
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002044:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40007000 	.word	0x40007000

080020ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40007000 	.word	0x40007000

080020c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d6:	d130      	bne.n	800213a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e4:	d038      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ee:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2232      	movs	r2, #50	; 0x32
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	3301      	adds	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800210c:	e002      	b.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002120:	d102      	bne.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f2      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002134:	d110      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e00f      	b.n	800215a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002146:	d007      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002150:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40007000 	.word	0x40007000
 800216c:	20000008 	.word	0x20000008
 8002170:	431bde83 	.word	0x431bde83

08002174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	f000 bc02 	b.w	800298c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002188:	4b96      	ldr	r3, [pc, #600]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002192:	4b94      	ldr	r3, [pc, #592]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80e4 	beq.w	8002372 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_RCC_OscConfig+0x4c>
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	f040 808b 	bne.w	80022ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 8087 	bne.w	80022ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021c0:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x64>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e3d9      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_RCC_OscConfig+0x7e>
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f0:	e005      	b.n	80021fe <HAL_RCC_OscConfig+0x8a>
 80021f2:	4b7c      	ldr	r3, [pc, #496]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fe:	4293      	cmp	r3, r2
 8002200:	d223      	bcs.n	800224a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fd8c 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e3ba      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002216:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a72      	ldr	r2, [pc, #456]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	496d      	ldr	r1, [pc, #436]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002234:	4b6b      	ldr	r3, [pc, #428]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	4968      	ldr	r1, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
 8002248:	e025      	b.n	8002296 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224a:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4960      	ldr	r1, [pc, #384]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002268:	4b5e      	ldr	r3, [pc, #376]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	495b      	ldr	r1, [pc, #364]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fd4c 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e37a      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002296:	f000 fc81 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4950      	ldr	r1, [pc, #320]	; (80023e8 <HAL_RCC_OscConfig+0x274>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a4e      	ldr	r2, [pc, #312]	; (80023ec <HAL_RCC_OscConfig+0x278>)
 80022b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022b6:	4b4e      	ldr	r3, [pc, #312]	; (80023f0 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fec4 	bl	8001048 <HAL_InitTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d052      	beq.n	8002370 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	e35e      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d032      	beq.n	800233c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a42      	ldr	r2, [pc, #264]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e2:	f7fe ff01 	bl	80010e8 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ea:	f7fe fefd 	bl	80010e8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e347      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4930      	ldr	r1, [pc, #192]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002326:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	492b      	ldr	r1, [pc, #172]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
 800233a:	e01a      	b.n	8002372 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002348:	f7fe fece 	bl	80010e8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002350:	f7fe feca 	bl	80010e8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e314      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1dc>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d073      	beq.n	8002466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x21c>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d10e      	bne.n	80023a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d063      	beq.n	8002464 <HAL_RCC_OscConfig+0x2f0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d15f      	bne.n	8002464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e2f1      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x24c>
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e025      	b.n	800240c <HAL_RCC_OscConfig+0x298>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d114      	bne.n	80023f4 <HAL_RCC_OscConfig+0x280>
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a02      	ldr	r2, [pc, #8]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e013      	b.n	800240c <HAL_RCC_OscConfig+0x298>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08004a14 	.word	0x08004a14
 80023ec:	20000008 	.word	0x20000008
 80023f0:	2000000c 	.word	0x2000000c
 80023f4:	4ba0      	ldr	r3, [pc, #640]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a9f      	ldr	r2, [pc, #636]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b9d      	ldr	r3, [pc, #628]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a9c      	ldr	r2, [pc, #624]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fe68 	bl	80010e8 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe fe64 	bl	80010e8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e2ae      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242e:	4b92      	ldr	r3, [pc, #584]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x2a8>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fe54 	bl	80010e8 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe fe50 	bl	80010e8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e29a      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002456:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x2d0>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d060      	beq.n	8002534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x310>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d119      	bne.n	80024b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d116      	bne.n	80024b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002484:	4b7c      	ldr	r3, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x328>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e277      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	4973      	ldr	r1, [pc, #460]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b0:	e040      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d023      	beq.n	8002502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fe0f 	bl	80010e8 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7fe fe0b 	bl	80010e8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e255      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e0:	4b65      	ldr	r3, [pc, #404]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b62      	ldr	r3, [pc, #392]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	495f      	ldr	r1, [pc, #380]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
 8002500:	e018      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5c      	ldr	r2, [pc, #368]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fdeb 	bl	80010e8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7fe fde7 	bl	80010e8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e231      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03c      	beq.n	80025ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01c      	beq.n	8002582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254e:	4a4a      	ldr	r2, [pc, #296]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fdc6 	bl	80010e8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fdc2 	bl	80010e8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e20c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ef      	beq.n	8002560 <HAL_RCC_OscConfig+0x3ec>
 8002580:	e01b      	b.n	80025ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002588:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7fe fda9 	bl	80010e8 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259a:	f7fe fda5 	bl	80010e8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1ef      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ac:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ef      	bne.n	800259a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a6 	beq.w	8002714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCC_OscConfig+0x508>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d118      	bne.n	8002632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002600:	4b1e      	ldr	r3, [pc, #120]	; (800267c <HAL_RCC_OscConfig+0x508>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x508>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260c:	f7fe fd6c 	bl	80010e8 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7fe fd68 	bl	80010e8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1b2      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x508>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x4d8>
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800264a:	e029      	b.n	80026a0 <HAL_RCC_OscConfig+0x52c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b05      	cmp	r3, #5
 8002652:	d115      	bne.n	8002680 <HAL_RCC_OscConfig+0x50c>
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	4a03      	ldr	r2, [pc, #12]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002674:	e014      	b.n	80026a0 <HAL_RCC_OscConfig+0x52c>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
 8002680:	4b9a      	ldr	r3, [pc, #616]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	4a99      	ldr	r2, [pc, #612]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002690:	4b96      	ldr	r3, [pc, #600]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	4a95      	ldr	r2, [pc, #596]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d016      	beq.n	80026d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fd1e 	bl	80010e8 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7fe fd1a 	bl	80010e8 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e162      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	4b89      	ldr	r3, [pc, #548]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ed      	beq.n	80026b0 <HAL_RCC_OscConfig+0x53c>
 80026d4:	e015      	b.n	8002702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe fd07 	bl	80010e8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe fd03 	bl	80010e8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e14b      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f4:	4b7d      	ldr	r3, [pc, #500]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ed      	bne.n	80026de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4b78      	ldr	r3, [pc, #480]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	4a77      	ldr	r2, [pc, #476]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002712:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03c      	beq.n	800279a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01c      	beq.n	8002762 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002728:	4b70      	ldr	r3, [pc, #448]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800272a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800272e:	4a6f      	ldr	r2, [pc, #444]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fcd6 	bl	80010e8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002740:	f7fe fcd2 	bl	80010e8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e11c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002752:	4b66      	ldr	r3, [pc, #408]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCC_OscConfig+0x5cc>
 8002760:	e01b      	b.n	800279a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002762:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002768:	4a60      	ldr	r2, [pc, #384]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fcb9 	bl	80010e8 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277a:	f7fe fcb5 	bl	80010e8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0ff      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800278c:	4b57      	ldr	r3, [pc, #348]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800278e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ef      	bne.n	800277a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80f3 	beq.w	800298a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f040 80c9 	bne.w	8002940 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ae:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d12c      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	3b01      	subs	r3, #1
 80027ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d123      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d11b      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d113      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d109      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	3b01      	subs	r3, #1
 8002816:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d06b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d062      	beq.n	80028e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0ac      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002832:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800283c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800283e:	f7fe fc53 	bl	80010e8 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe fc4f 	bl	80010e8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e099      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_RCC_OscConfig+0x77c>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002874:	3a01      	subs	r2, #1
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	4311      	orrs	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800287e:	0212      	lsls	r2, r2, #8
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002886:	0852      	lsrs	r2, r2, #1
 8002888:	3a01      	subs	r2, #1
 800288a:	0552      	lsls	r2, r2, #21
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002892:	0852      	lsrs	r2, r2, #1
 8002894:	3a01      	subs	r2, #1
 8002896:	0652      	lsls	r2, r2, #25
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800289e:	06d2      	lsls	r2, r2, #27
 80028a0:	430a      	orrs	r2, r1
 80028a2:	4912      	ldr	r1, [pc, #72]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c0:	f7fe fc12 	bl	80010e8 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fc0e 	bl	80010e8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e058      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e6:	e050      	b.n	800298a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e04f      	b.n	800298c <HAL_RCC_OscConfig+0x818>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d144      	bne.n	800298a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002918:	f7fe fbe6 	bl	80010e8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fbe2 	bl	80010e8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e02c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x7ac>
 800293e:	e024      	b.n	800298a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d01f      	beq.n	8002986 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800294c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe fbc9 	bl	80010e8 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7fe fbc5 	bl	80010e8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e00f      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4905      	ldr	r1, [pc, #20]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_OscConfig+0x824>)
 8002980:	4013      	ands	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
 8002984:	e001      	b.n	800298a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	feeefffc 	.word	0xfeeefffc

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0e7      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b75      	ldr	r3, [pc, #468]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b72      	ldr	r3, [pc, #456]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4970      	ldr	r1, [pc, #448]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b6e      	ldr	r3, [pc, #440]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cf      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4b66      	ldr	r3, [pc, #408]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d908      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4960      	ldr	r1, [pc, #384]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d04c      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a22:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d121      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0a6      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d115      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e09a      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a52:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e08e      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e086      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4943      	ldr	r1, [pc, #268]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7fe fb30 	bl	80010e8 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fe fb2c 	bl	80010e8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e06e      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d208      	bcs.n	8002ae2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	492b      	ldr	r1, [pc, #172]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d210      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 0207 	bic.w	r2, r3, #7
 8002af8:	4923      	ldr	r1, [pc, #140]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e036      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4918      	ldr	r1, [pc, #96]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4910      	ldr	r1, [pc, #64]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b50:	f000 f824 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	490b      	ldr	r1, [pc, #44]	; (8002b90 <HAL_RCC_ClockConfig+0x1f4>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1fc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fa67 	bl	8001048 <HAL_InitTick>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08004a14 	.word	0x08004a14
 8002b94:	20000008 	.word	0x20000008
 8002b98:	2000000c 	.word	0x2000000c

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d11e      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e004      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d134      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d003      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0xac>
 8002c40:	e005      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c4a:	617b      	str	r3, [r7, #20]
      break;
 8002c4c:	e002      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	3301      	adds	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb03 f202 	mul.w	r2, r3, r2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	0e5b      	lsrs	r3, r3, #25
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	3301      	adds	r3, #1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c94:	69bb      	ldr	r3, [r7, #24]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08004a2c 	.word	0x08004a2c
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000008 	.word	0x20000008

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08004a24 	.word	0x08004a24

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cfc:	f7ff ffda 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0adb      	lsrs	r3, r3, #11
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4904      	ldr	r1, [pc, #16]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08004a24 	.word	0x08004a24

08002d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d30:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d3c:	f7ff f9b6 	bl	80020ac <HAL_PWREx_GetVoltageRange>
 8002d40:	6178      	str	r0, [r7, #20]
 8002d42:	e014      	b.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d5c:	f7ff f9a6 	bl	80020ac <HAL_PWREx_GetVoltageRange>
 8002d60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d74:	d10b      	bne.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d919      	bls.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d80:	d902      	bls.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d82:	2302      	movs	r3, #2
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	e013      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d88:	2301      	movs	r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e010      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b80      	cmp	r3, #128	; 0x80
 8002d92:	d902      	bls.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d94:	2303      	movs	r3, #3
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e00a      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d102      	bne.n	8002da6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da0:	2302      	movs	r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	e004      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b70      	cmp	r3, #112	; 0x70
 8002daa:	d101      	bne.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dac:	2301      	movs	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 0207 	bic.w	r2, r3, #7
 8002db8:	4909      	ldr	r1, [pc, #36]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d001      	beq.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40022000 	.word	0x40022000

08002de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dec:	2300      	movs	r3, #0
 8002dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002df0:	2300      	movs	r3, #0
 8002df2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d031      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e08:	d01a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e0e:	d814      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e18:	d10f      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	4a5c      	ldr	r2, [pc, #368]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e26:	e00c      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f9de 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e38:	e003      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e3e:	e000      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e48:	4b51      	ldr	r3, [pc, #324]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	494e      	ldr	r1, [pc, #312]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e5e:	e001      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 809e 	beq.w	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e76:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	4a3f      	ldr	r2, [pc, #252]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	; 0x58
 8002e98:	4b3d      	ldr	r3, [pc, #244]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe f918 	bl	80010e8 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eba:	e009      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebc:	f7fe f914 	bl	80010e8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d902      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	74fb      	strb	r3, [r7, #19]
        break;
 8002ece:	e005      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ef      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d15a      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01e      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d019      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f2a:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe f8d4 	bl	80010e8 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f42:	e00b      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe f8d0 	bl	80010e8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d902      	bls.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	74fb      	strb	r3, [r7, #19]
            break;
 8002f5a:	e006      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ec      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7e:	4904      	ldr	r1, [pc, #16]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f86:	e009      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
 8002f8c:	e006      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9c:	7c7b      	ldrb	r3, [r7, #17]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b8a      	ldr	r3, [pc, #552]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a89      	ldr	r2, [pc, #548]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fba:	4b84      	ldr	r3, [pc, #528]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	f023 0203 	bic.w	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4980      	ldr	r1, [pc, #512]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 020c 	bic.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	4978      	ldr	r1, [pc, #480]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	496f      	ldr	r1, [pc, #444]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003020:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	4967      	ldr	r1, [pc, #412]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003042:	4b62      	ldr	r3, [pc, #392]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	495e      	ldr	r1, [pc, #376]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	4956      	ldr	r1, [pc, #344]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003086:	4b51      	ldr	r3, [pc, #324]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	494d      	ldr	r1, [pc, #308]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d028      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a8:	4b48      	ldr	r3, [pc, #288]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4945      	ldr	r1, [pc, #276]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c6:	d106      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c8:	4b40      	ldr	r3, [pc, #256]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a3f      	ldr	r2, [pc, #252]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030d2:	60d3      	str	r3, [r2, #12]
 80030d4:	e011      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030de:	d10c      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f882 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d028      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	492d      	ldr	r1, [pc, #180]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003124:	d106      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	4a28      	ldr	r2, [pc, #160]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003130:	60d3      	str	r3, [r2, #12]
 8003132:	e011      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800313c:	d10c      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f853 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	4916      	ldr	r1, [pc, #88]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003182:	d10c      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f830 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	4904      	ldr	r1, [pc, #16]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80031da:	f043 0304 	orr.w	r3, r3, #4
 80031de:	6013      	str	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000

080031f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fe:	4b74      	ldr	r3, [pc, #464]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d018      	beq.n	800323c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800320a:	4b71      	ldr	r3, [pc, #452]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0203 	and.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d10d      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
       ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003222:	4b6b      	ldr	r3, [pc, #428]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
       ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d047      	beq.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e044      	b.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d018      	beq.n	8003276 <RCCEx_PLLSAI1_Config+0x86>
 8003244:	2b03      	cmp	r3, #3
 8003246:	d825      	bhi.n	8003294 <RCCEx_PLLSAI1_Config+0xa4>
 8003248:	2b01      	cmp	r3, #1
 800324a:	d002      	beq.n	8003252 <RCCEx_PLLSAI1_Config+0x62>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d009      	beq.n	8003264 <RCCEx_PLLSAI1_Config+0x74>
 8003250:	e020      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003252:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11d      	bne.n	800329a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003262:	e01a      	b.n	800329a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003264:	4b5a      	ldr	r3, [pc, #360]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e013      	b.n	800329e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003276:	4b56      	ldr	r3, [pc, #344]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003292:	e006      	b.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e004      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	430b      	orrs	r3, r1
 80032c0:	4943      	ldr	r1, [pc, #268]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d17c      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032cc:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a3f      	ldr	r2, [pc, #252]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd ff06 	bl	80010e8 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032de:	e009      	b.n	80032f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e0:	f7fd ff02 	bl	80010e8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	73fb      	strb	r3, [r7, #15]
        break;
 80032f2:	e005      	b.n	8003300 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ef      	bne.n	80032e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d15f      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d110      	bne.n	800332e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003314:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6892      	ldr	r2, [r2, #8]
 800331c:	0211      	lsls	r1, r2, #8
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	06d2      	lsls	r2, r2, #27
 8003324:	430a      	orrs	r2, r1
 8003326:	492a      	ldr	r1, [pc, #168]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	610b      	str	r3, [r1, #16]
 800332c:	e027      	b.n	800337e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d112      	bne.n	800335a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003334:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800333c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6892      	ldr	r2, [r2, #8]
 8003344:	0211      	lsls	r1, r2, #8
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6912      	ldr	r2, [r2, #16]
 800334a:	0852      	lsrs	r2, r2, #1
 800334c:	3a01      	subs	r2, #1
 800334e:	0552      	lsls	r2, r2, #21
 8003350:	430a      	orrs	r2, r1
 8003352:	491f      	ldr	r1, [pc, #124]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003354:	4313      	orrs	r3, r2
 8003356:	610b      	str	r3, [r1, #16]
 8003358:	e011      	b.n	800337e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003362:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	0211      	lsls	r1, r2, #8
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6952      	ldr	r2, [r2, #20]
 8003370:	0852      	lsrs	r2, r2, #1
 8003372:	3a01      	subs	r2, #1
 8003374:	0652      	lsls	r2, r2, #25
 8003376:	430a      	orrs	r2, r1
 8003378:	4915      	ldr	r1, [pc, #84]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003388:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fd fead 	bl	80010e8 <HAL_GetTick>
 800338e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003390:	e009      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003392:	f7fd fea9 	bl	80010e8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d902      	bls.n	80033a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	73fb      	strb	r3, [r7, #15]
          break;
 80033a4:	e005      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ef      	beq.n	8003392 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4903      	ldr	r1, [pc, #12]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e040      	b.n	8003468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fd3e 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f82c 	bl	8003470 <UART_SetConfig>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa4c 	bl	80038c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800343e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800344e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fad3 	bl	8003a0c <UART_CheckIdleState>
 8003466:	4603      	mov	r3, r0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	431a      	orrs	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	431a      	orrs	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	4313      	orrs	r3, r2
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4bb4      	ldr	r3, [pc, #720]	; (8003770 <UART_SetConfig+0x300>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4aa9      	ldr	r2, [pc, #676]	; (8003774 <UART_SetConfig+0x304>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	4313      	orrs	r3, r2
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4aa0      	ldr	r2, [pc, #640]	; (8003778 <UART_SetConfig+0x308>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d126      	bne.n	8003548 <UART_SetConfig+0xd8>
 80034fa:	4ba0      	ldr	r3, [pc, #640]	; (800377c <UART_SetConfig+0x30c>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	2b03      	cmp	r3, #3
 8003506:	d81b      	bhi.n	8003540 <UART_SetConfig+0xd0>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <UART_SetConfig+0xa0>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003521 	.word	0x08003521
 8003514:	08003531 	.word	0x08003531
 8003518:	08003529 	.word	0x08003529
 800351c:	08003539 	.word	0x08003539
 8003520:	2301      	movs	r3, #1
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003526:	e080      	b.n	800362a <UART_SetConfig+0x1ba>
 8003528:	2302      	movs	r3, #2
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352e:	e07c      	b.n	800362a <UART_SetConfig+0x1ba>
 8003530:	2304      	movs	r3, #4
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003536:	e078      	b.n	800362a <UART_SetConfig+0x1ba>
 8003538:	2308      	movs	r3, #8
 800353a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353e:	e074      	b.n	800362a <UART_SetConfig+0x1ba>
 8003540:	2310      	movs	r3, #16
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003546:	e070      	b.n	800362a <UART_SetConfig+0x1ba>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a8c      	ldr	r2, [pc, #560]	; (8003780 <UART_SetConfig+0x310>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d138      	bne.n	80035c4 <UART_SetConfig+0x154>
 8003552:	4b8a      	ldr	r3, [pc, #552]	; (800377c <UART_SetConfig+0x30c>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d82d      	bhi.n	80035bc <UART_SetConfig+0x14c>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0xf8>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080035bd 	.word	0x080035bd
 8003570:	080035bd 	.word	0x080035bd
 8003574:	080035bd 	.word	0x080035bd
 8003578:	080035ad 	.word	0x080035ad
 800357c:	080035bd 	.word	0x080035bd
 8003580:	080035bd 	.word	0x080035bd
 8003584:	080035bd 	.word	0x080035bd
 8003588:	080035a5 	.word	0x080035a5
 800358c:	080035bd 	.word	0x080035bd
 8003590:	080035bd 	.word	0x080035bd
 8003594:	080035bd 	.word	0x080035bd
 8003598:	080035b5 	.word	0x080035b5
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e042      	b.n	800362a <UART_SetConfig+0x1ba>
 80035a4:	2302      	movs	r3, #2
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e03e      	b.n	800362a <UART_SetConfig+0x1ba>
 80035ac:	2304      	movs	r3, #4
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b2:	e03a      	b.n	800362a <UART_SetConfig+0x1ba>
 80035b4:	2308      	movs	r3, #8
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ba:	e036      	b.n	800362a <UART_SetConfig+0x1ba>
 80035bc:	2310      	movs	r3, #16
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c2:	e032      	b.n	800362a <UART_SetConfig+0x1ba>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6a      	ldr	r2, [pc, #424]	; (8003774 <UART_SetConfig+0x304>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d12a      	bne.n	8003624 <UART_SetConfig+0x1b4>
 80035ce:	4b6b      	ldr	r3, [pc, #428]	; (800377c <UART_SetConfig+0x30c>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035dc:	d01a      	beq.n	8003614 <UART_SetConfig+0x1a4>
 80035de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e2:	d81b      	bhi.n	800361c <UART_SetConfig+0x1ac>
 80035e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e8:	d00c      	beq.n	8003604 <UART_SetConfig+0x194>
 80035ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ee:	d815      	bhi.n	800361c <UART_SetConfig+0x1ac>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <UART_SetConfig+0x18c>
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	d008      	beq.n	800360c <UART_SetConfig+0x19c>
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x1ac>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e012      	b.n	800362a <UART_SetConfig+0x1ba>
 8003604:	2302      	movs	r3, #2
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e00e      	b.n	800362a <UART_SetConfig+0x1ba>
 800360c:	2304      	movs	r3, #4
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e00a      	b.n	800362a <UART_SetConfig+0x1ba>
 8003614:	2308      	movs	r3, #8
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e006      	b.n	800362a <UART_SetConfig+0x1ba>
 800361c:	2310      	movs	r3, #16
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e002      	b.n	800362a <UART_SetConfig+0x1ba>
 8003624:	2310      	movs	r3, #16
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a51      	ldr	r2, [pc, #324]	; (8003774 <UART_SetConfig+0x304>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d17a      	bne.n	800372a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003634:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003638:	2b08      	cmp	r3, #8
 800363a:	d824      	bhi.n	8003686 <UART_SetConfig+0x216>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x1d4>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003669 	.word	0x08003669
 8003648:	08003687 	.word	0x08003687
 800364c:	08003671 	.word	0x08003671
 8003650:	08003687 	.word	0x08003687
 8003654:	08003677 	.word	0x08003677
 8003658:	08003687 	.word	0x08003687
 800365c:	08003687 	.word	0x08003687
 8003660:	08003687 	.word	0x08003687
 8003664:	0800367f 	.word	0x0800367f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7ff fb30 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 800366c:	61f8      	str	r0, [r7, #28]
        break;
 800366e:	e010      	b.n	8003692 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003670:	4b44      	ldr	r3, [pc, #272]	; (8003784 <UART_SetConfig+0x314>)
 8003672:	61fb      	str	r3, [r7, #28]
        break;
 8003674:	e00d      	b.n	8003692 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003676:	f7ff fa91 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800367a:	61f8      	str	r0, [r7, #28]
        break;
 800367c:	e009      	b.n	8003692 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	61fb      	str	r3, [r7, #28]
        break;
 8003684:	e005      	b.n	8003692 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8107 	beq.w	80038a8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d305      	bcc.n	80036b6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d903      	bls.n	80036be <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036bc:	e0f4      	b.n	80038a8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2200      	movs	r2, #0
 80036c2:	461c      	mov	r4, r3
 80036c4:	4615      	mov	r5, r2
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	022b      	lsls	r3, r5, #8
 80036d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036d4:	0222      	lsls	r2, r4, #8
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	6849      	ldr	r1, [r1, #4]
 80036da:	0849      	lsrs	r1, r1, #1
 80036dc:	2000      	movs	r0, #0
 80036de:	4688      	mov	r8, r1
 80036e0:	4681      	mov	r9, r0
 80036e2:	eb12 0a08 	adds.w	sl, r2, r8
 80036e6:	eb43 0b09 	adc.w	fp, r3, r9
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036f8:	4650      	mov	r0, sl
 80036fa:	4659      	mov	r1, fp
 80036fc:	f7fc fd66 	bl	80001cc <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370e:	d308      	bcc.n	8003722 <UART_SetConfig+0x2b2>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d204      	bcs.n	8003722 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e0c2      	b.n	80038a8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003728:	e0be      	b.n	80038a8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003732:	d16a      	bne.n	800380a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003738:	2b08      	cmp	r3, #8
 800373a:	d834      	bhi.n	80037a6 <UART_SetConfig+0x336>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x2d4>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003769 	.word	0x08003769
 8003748:	08003789 	.word	0x08003789
 800374c:	08003791 	.word	0x08003791
 8003750:	080037a7 	.word	0x080037a7
 8003754:	08003797 	.word	0x08003797
 8003758:	080037a7 	.word	0x080037a7
 800375c:	080037a7 	.word	0x080037a7
 8003760:	080037a7 	.word	0x080037a7
 8003764:	0800379f 	.word	0x0800379f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7ff fab0 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 800376c:	61f8      	str	r0, [r7, #28]
        break;
 800376e:	e020      	b.n	80037b2 <UART_SetConfig+0x342>
 8003770:	efff69f3 	.word	0xefff69f3
 8003774:	40008000 	.word	0x40008000
 8003778:	40013800 	.word	0x40013800
 800377c:	40021000 	.word	0x40021000
 8003780:	40004400 	.word	0x40004400
 8003784:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7ff fab6 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 800378c:	61f8      	str	r0, [r7, #28]
        break;
 800378e:	e010      	b.n	80037b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003790:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <UART_SetConfig+0x454>)
 8003792:	61fb      	str	r3, [r7, #28]
        break;
 8003794:	e00d      	b.n	80037b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003796:	f7ff fa01 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800379a:	61f8      	str	r0, [r7, #28]
        break;
 800379c:	e009      	b.n	80037b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a2:	61fb      	str	r3, [r7, #28]
        break;
 80037a4:	e005      	b.n	80037b2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d077      	beq.n	80038a8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005a      	lsls	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	d916      	bls.n	8003802 <UART_SetConfig+0x392>
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037da:	d212      	bcs.n	8003802 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f023 030f 	bic.w	r3, r3, #15
 80037e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	8afb      	ldrh	r3, [r7, #22]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	8afa      	ldrh	r2, [r7, #22]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	e052      	b.n	80038a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003808:	e04e      	b.n	80038a8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800380a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800380e:	2b08      	cmp	r3, #8
 8003810:	d827      	bhi.n	8003862 <UART_SetConfig+0x3f2>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <UART_SetConfig+0x3a8>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	0800383d 	.word	0x0800383d
 800381c:	08003845 	.word	0x08003845
 8003820:	0800384d 	.word	0x0800384d
 8003824:	08003863 	.word	0x08003863
 8003828:	08003853 	.word	0x08003853
 800382c:	08003863 	.word	0x08003863
 8003830:	08003863 	.word	0x08003863
 8003834:	08003863 	.word	0x08003863
 8003838:	0800385b 	.word	0x0800385b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800383c:	f7ff fa46 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003840:	61f8      	str	r0, [r7, #28]
        break;
 8003842:	e014      	b.n	800386e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7ff fa58 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003848:	61f8      	str	r0, [r7, #28]
        break;
 800384a:	e010      	b.n	800386e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <UART_SetConfig+0x454>)
 800384e:	61fb      	str	r3, [r7, #28]
        break;
 8003850:	e00d      	b.n	800386e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003852:	f7ff f9a3 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003856:	61f8      	str	r0, [r7, #28]
        break;
 8003858:	e009      	b.n	800386e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800385a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800385e:	61fb      	str	r3, [r7, #28]
        break;
 8003860:	e005      	b.n	800386e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800386c:	bf00      	nop
    }

    if (pclk != 0U)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d019      	beq.n	80038a8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	085a      	lsrs	r2, r3, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	441a      	add	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	d909      	bls.n	80038a2 <UART_SetConfig+0x432>
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d205      	bcs.n	80038a2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e002      	b.n	80038a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038c2:	bf00      	nop
 80038c4:	00f42400 	.word	0x00f42400

080038c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01a      	beq.n	80039de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c6:	d10a      	bne.n	80039de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
  }
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a1c:	f7fd fb64 	bl	80010e8 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d10e      	bne.n	8003a4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f82d 	bl	8003a9e <UART_WaitOnFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e023      	b.n	8003a96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d10e      	bne.n	8003a7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f817 	bl	8003a9e <UART_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e00d      	b.n	8003a96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b09c      	sub	sp, #112	; 0x70
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aae:	e0a5      	b.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	f000 80a1 	beq.w	8003bfc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fd fb15 	bl	80010e8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d13e      	bne.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003af4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e6      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3308      	adds	r3, #8
 8003b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	663b      	str	r3, [r7, #96]	; 0x60
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b22:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e5      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e067      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d04f      	beq.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b6a:	d147      	bne.n	8003bfc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b74:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
 8003b96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e6      	bne.n	8003b76 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3308      	adds	r3, #8
 8003bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bc8:	623a      	str	r2, [r7, #32]
 8003bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	69f9      	ldr	r1, [r7, #28]
 8003bce:	6a3a      	ldr	r2, [r7, #32]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e010      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	f43f af4a 	beq.w	8003ab0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3770      	adds	r7, #112	; 0x70
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <__libc_init_array>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4d0d      	ldr	r5, [pc, #52]	; (8003c60 <__libc_init_array+0x38>)
 8003c2c:	4c0d      	ldr	r4, [pc, #52]	; (8003c64 <__libc_init_array+0x3c>)
 8003c2e:	1b64      	subs	r4, r4, r5
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	2600      	movs	r6, #0
 8003c34:	42a6      	cmp	r6, r4
 8003c36:	d109      	bne.n	8003c4c <__libc_init_array+0x24>
 8003c38:	4d0b      	ldr	r5, [pc, #44]	; (8003c68 <__libc_init_array+0x40>)
 8003c3a:	4c0c      	ldr	r4, [pc, #48]	; (8003c6c <__libc_init_array+0x44>)
 8003c3c:	f000 f820 	bl	8003c80 <_init>
 8003c40:	1b64      	subs	r4, r4, r5
 8003c42:	10a4      	asrs	r4, r4, #2
 8003c44:	2600      	movs	r6, #0
 8003c46:	42a6      	cmp	r6, r4
 8003c48:	d105      	bne.n	8003c56 <__libc_init_array+0x2e>
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c50:	4798      	blx	r3
 8003c52:	3601      	adds	r6, #1
 8003c54:	e7ee      	b.n	8003c34 <__libc_init_array+0xc>
 8003c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5a:	4798      	blx	r3
 8003c5c:	3601      	adds	r6, #1
 8003c5e:	e7f2      	b.n	8003c46 <__libc_init_array+0x1e>
 8003c60:	08004a64 	.word	0x08004a64
 8003c64:	08004a64 	.word	0x08004a64
 8003c68:	08004a64 	.word	0x08004a64
 8003c6c:	08004a68 	.word	0x08004a68

08003c70 <memset>:
 8003c70:	4402      	add	r2, r0
 8003c72:	4603      	mov	r3, r0
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d100      	bne.n	8003c7a <memset+0xa>
 8003c78:	4770      	bx	lr
 8003c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7e:	e7f9      	b.n	8003c74 <memset+0x4>

08003c80 <_init>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	bf00      	nop
 8003c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c86:	bc08      	pop	{r3}
 8003c88:	469e      	mov	lr, r3
 8003c8a:	4770      	bx	lr

08003c8c <_fini>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr
